//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
// On Sat Apr 27 13:13:12 IST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_request_put                O     1 reg
// response_get                   O     7 reg
// RDY_response_get               O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// request_put                    I     7 reg
// EN_request_put                 I     1
// EN_response_get                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkLdpcCore(CLK,
		  RST_N,

		  request_put,
		  EN_request_put,
		  RDY_request_put,

		  EN_response_get,
		  response_get,
		  RDY_response_get);
  input  CLK;
  input  RST_N;

  // action method request_put
  input  [6 : 0] request_put;
  input  EN_request_put;
  output RDY_request_put;

  // actionvalue method response_get
  input  EN_response_get;
  output [6 : 0] response_get;
  output RDY_response_get;

  // signals for module outputs
  wire [6 : 0] response_get;
  wire RDY_request_put, RDY_response_get;

  // register rgIdle
  reg rgIdle;
  wire rgIdle$D_IN, rgIdle$EN;

  // ports of submodule ffI
  wire [6 : 0] ffI$D_IN, ffI$D_OUT;
  wire ffI$CLR, ffI$DEQ, ffI$EMPTY_N, ffI$ENQ, ffI$FULL_N;

  // ports of submodule ffO
  wire [6 : 0] ffO$D_IN, ffO$D_OUT;
  wire ffO$CLR, ffO$DEQ, ffO$EMPTY_N, ffO$ENQ, ffO$FULL_N;

  // ports of submodule vBitNodes_0
  wire vBitNodes_0$EN_b2c_get,
       vBitNodes_0$EN_c2b_0_put,
       vBitNodes_0$EN_c2b_1_put,
       vBitNodes_0$EN_c2b_2_put,
       vBitNodes_0$EN_codeIn_put,
       vBitNodes_0$EN_dataOut_get,
       vBitNodes_0$RDY_b2c_get,
       vBitNodes_0$RDY_c2b_0_put,
       vBitNodes_0$RDY_c2b_1_put,
       vBitNodes_0$RDY_c2b_2_put,
       vBitNodes_0$RDY_codeIn_put,
       vBitNodes_0$RDY_dataOut_get,
       vBitNodes_0$b2c_get,
       vBitNodes_0$c2b_0_put,
       vBitNodes_0$c2b_1_put,
       vBitNodes_0$c2b_2_put,
       vBitNodes_0$codeIn_put,
       vBitNodes_0$dataOut_get;

  // ports of submodule vBitNodes_1
  wire vBitNodes_1$EN_b2c_get,
       vBitNodes_1$EN_c2b_0_put,
       vBitNodes_1$EN_c2b_1_put,
       vBitNodes_1$EN_c2b_2_put,
       vBitNodes_1$EN_codeIn_put,
       vBitNodes_1$EN_dataOut_get,
       vBitNodes_1$RDY_b2c_get,
       vBitNodes_1$RDY_c2b_0_put,
       vBitNodes_1$RDY_c2b_1_put,
       vBitNodes_1$RDY_c2b_2_put,
       vBitNodes_1$RDY_codeIn_put,
       vBitNodes_1$RDY_dataOut_get,
       vBitNodes_1$b2c_get,
       vBitNodes_1$c2b_0_put,
       vBitNodes_1$c2b_1_put,
       vBitNodes_1$c2b_2_put,
       vBitNodes_1$codeIn_put,
       vBitNodes_1$dataOut_get;

  // ports of submodule vBitNodes_2
  wire vBitNodes_2$EN_b2c_get,
       vBitNodes_2$EN_c2b_0_put,
       vBitNodes_2$EN_c2b_1_put,
       vBitNodes_2$EN_c2b_2_put,
       vBitNodes_2$EN_codeIn_put,
       vBitNodes_2$EN_dataOut_get,
       vBitNodes_2$RDY_b2c_get,
       vBitNodes_2$RDY_c2b_0_put,
       vBitNodes_2$RDY_c2b_1_put,
       vBitNodes_2$RDY_c2b_2_put,
       vBitNodes_2$RDY_codeIn_put,
       vBitNodes_2$RDY_dataOut_get,
       vBitNodes_2$b2c_get,
       vBitNodes_2$c2b_0_put,
       vBitNodes_2$c2b_1_put,
       vBitNodes_2$c2b_2_put,
       vBitNodes_2$codeIn_put,
       vBitNodes_2$dataOut_get;

  // ports of submodule vBitNodes_3
  wire vBitNodes_3$EN_b2c_get,
       vBitNodes_3$EN_c2b_0_put,
       vBitNodes_3$EN_c2b_1_put,
       vBitNodes_3$EN_c2b_2_put,
       vBitNodes_3$EN_codeIn_put,
       vBitNodes_3$EN_dataOut_get,
       vBitNodes_3$RDY_b2c_get,
       vBitNodes_3$RDY_c2b_0_put,
       vBitNodes_3$RDY_c2b_1_put,
       vBitNodes_3$RDY_c2b_2_put,
       vBitNodes_3$RDY_codeIn_put,
       vBitNodes_3$RDY_dataOut_get,
       vBitNodes_3$b2c_get,
       vBitNodes_3$c2b_0_put,
       vBitNodes_3$c2b_1_put,
       vBitNodes_3$c2b_2_put,
       vBitNodes_3$codeIn_put,
       vBitNodes_3$dataOut_get;

  // ports of submodule vBitNodes_4
  wire vBitNodes_4$EN_b2c_get,
       vBitNodes_4$EN_c2b_0_put,
       vBitNodes_4$EN_c2b_1_put,
       vBitNodes_4$EN_c2b_2_put,
       vBitNodes_4$EN_codeIn_put,
       vBitNodes_4$EN_dataOut_get,
       vBitNodes_4$RDY_b2c_get,
       vBitNodes_4$RDY_c2b_0_put,
       vBitNodes_4$RDY_c2b_1_put,
       vBitNodes_4$RDY_c2b_2_put,
       vBitNodes_4$RDY_codeIn_put,
       vBitNodes_4$RDY_dataOut_get,
       vBitNodes_4$b2c_get,
       vBitNodes_4$c2b_0_put,
       vBitNodes_4$c2b_1_put,
       vBitNodes_4$c2b_2_put,
       vBitNodes_4$codeIn_put,
       vBitNodes_4$dataOut_get;

  // ports of submodule vBitNodes_5
  wire vBitNodes_5$EN_b2c_get,
       vBitNodes_5$EN_c2b_0_put,
       vBitNodes_5$EN_c2b_1_put,
       vBitNodes_5$EN_c2b_2_put,
       vBitNodes_5$EN_codeIn_put,
       vBitNodes_5$EN_dataOut_get,
       vBitNodes_5$RDY_b2c_get,
       vBitNodes_5$RDY_c2b_0_put,
       vBitNodes_5$RDY_c2b_1_put,
       vBitNodes_5$RDY_c2b_2_put,
       vBitNodes_5$RDY_codeIn_put,
       vBitNodes_5$RDY_dataOut_get,
       vBitNodes_5$b2c_get,
       vBitNodes_5$c2b_0_put,
       vBitNodes_5$c2b_1_put,
       vBitNodes_5$c2b_2_put,
       vBitNodes_5$codeIn_put,
       vBitNodes_5$dataOut_get;

  // ports of submodule vBitNodes_6
  wire vBitNodes_6$EN_b2c_get,
       vBitNodes_6$EN_c2b_0_put,
       vBitNodes_6$EN_c2b_1_put,
       vBitNodes_6$EN_c2b_2_put,
       vBitNodes_6$EN_codeIn_put,
       vBitNodes_6$EN_dataOut_get,
       vBitNodes_6$RDY_b2c_get,
       vBitNodes_6$RDY_c2b_0_put,
       vBitNodes_6$RDY_c2b_1_put,
       vBitNodes_6$RDY_c2b_2_put,
       vBitNodes_6$RDY_codeIn_put,
       vBitNodes_6$RDY_dataOut_get,
       vBitNodes_6$b2c_get,
       vBitNodes_6$c2b_0_put,
       vBitNodes_6$c2b_1_put,
       vBitNodes_6$c2b_2_put,
       vBitNodes_6$codeIn_put,
       vBitNodes_6$dataOut_get;

  // ports of submodule vCheckNodes_0
  wire vCheckNodes_0$EN_b2c_0_put,
       vCheckNodes_0$EN_b2c_1_put,
       vCheckNodes_0$EN_b2c_2_put,
       vCheckNodes_0$EN_c2b_0_get,
       vCheckNodes_0$EN_c2b_1_get,
       vCheckNodes_0$EN_c2b_2_get,
       vCheckNodes_0$RDY_b2c_0_put,
       vCheckNodes_0$RDY_b2c_1_put,
       vCheckNodes_0$RDY_b2c_2_put,
       vCheckNodes_0$RDY_c2b_0_get,
       vCheckNodes_0$RDY_c2b_1_get,
       vCheckNodes_0$RDY_c2b_2_get,
       vCheckNodes_0$b2c_0_put,
       vCheckNodes_0$b2c_1_put,
       vCheckNodes_0$b2c_2_put,
       vCheckNodes_0$c2b_0_get,
       vCheckNodes_0$c2b_1_get,
       vCheckNodes_0$c2b_2_get;

  // ports of submodule vCheckNodes_1
  wire vCheckNodes_1$EN_b2c_0_put,
       vCheckNodes_1$EN_b2c_1_put,
       vCheckNodes_1$EN_b2c_2_put,
       vCheckNodes_1$EN_c2b_0_get,
       vCheckNodes_1$EN_c2b_1_get,
       vCheckNodes_1$EN_c2b_2_get,
       vCheckNodes_1$RDY_b2c_0_put,
       vCheckNodes_1$RDY_b2c_1_put,
       vCheckNodes_1$RDY_b2c_2_put,
       vCheckNodes_1$RDY_c2b_0_get,
       vCheckNodes_1$RDY_c2b_1_get,
       vCheckNodes_1$RDY_c2b_2_get,
       vCheckNodes_1$b2c_0_put,
       vCheckNodes_1$b2c_1_put,
       vCheckNodes_1$b2c_2_put,
       vCheckNodes_1$c2b_0_get,
       vCheckNodes_1$c2b_1_get,
       vCheckNodes_1$c2b_2_get;

  // ports of submodule vCheckNodes_2
  wire vCheckNodes_2$EN_b2c_0_put,
       vCheckNodes_2$EN_b2c_1_put,
       vCheckNodes_2$EN_b2c_2_put,
       vCheckNodes_2$EN_c2b_0_get,
       vCheckNodes_2$EN_c2b_1_get,
       vCheckNodes_2$EN_c2b_2_get,
       vCheckNodes_2$RDY_b2c_0_put,
       vCheckNodes_2$RDY_b2c_1_put,
       vCheckNodes_2$RDY_b2c_2_put,
       vCheckNodes_2$RDY_c2b_0_get,
       vCheckNodes_2$RDY_c2b_1_get,
       vCheckNodes_2$RDY_c2b_2_get,
       vCheckNodes_2$b2c_0_put,
       vCheckNodes_2$b2c_1_put,
       vCheckNodes_2$b2c_2_put,
       vCheckNodes_2$c2b_0_get,
       vCheckNodes_2$c2b_1_get,
       vCheckNodes_2$c2b_2_get;

  // ports of submodule vCheckNodes_3
  wire vCheckNodes_3$EN_b2c_0_put,
       vCheckNodes_3$EN_b2c_1_put,
       vCheckNodes_3$EN_b2c_2_put,
       vCheckNodes_3$EN_c2b_0_get,
       vCheckNodes_3$EN_c2b_1_get,
       vCheckNodes_3$EN_c2b_2_get,
       vCheckNodes_3$RDY_b2c_0_put,
       vCheckNodes_3$RDY_b2c_1_put,
       vCheckNodes_3$RDY_b2c_2_put,
       vCheckNodes_3$RDY_c2b_0_get,
       vCheckNodes_3$RDY_c2b_1_get,
       vCheckNodes_3$RDY_c2b_2_get,
       vCheckNodes_3$b2c_0_put,
       vCheckNodes_3$b2c_1_put,
       vCheckNodes_3$b2c_2_put,
       vCheckNodes_3$c2b_0_get,
       vCheckNodes_3$c2b_1_get,
       vCheckNodes_3$c2b_2_get;

  // ports of submodule vCheckNodes_4
  wire vCheckNodes_4$EN_b2c_0_put,
       vCheckNodes_4$EN_b2c_1_put,
       vCheckNodes_4$EN_b2c_2_put,
       vCheckNodes_4$EN_c2b_0_get,
       vCheckNodes_4$EN_c2b_1_get,
       vCheckNodes_4$EN_c2b_2_get,
       vCheckNodes_4$RDY_b2c_0_put,
       vCheckNodes_4$RDY_b2c_1_put,
       vCheckNodes_4$RDY_b2c_2_put,
       vCheckNodes_4$RDY_c2b_0_get,
       vCheckNodes_4$RDY_c2b_1_get,
       vCheckNodes_4$RDY_c2b_2_get,
       vCheckNodes_4$b2c_0_put,
       vCheckNodes_4$b2c_1_put,
       vCheckNodes_4$b2c_2_put,
       vCheckNodes_4$c2b_0_get,
       vCheckNodes_4$c2b_1_get,
       vCheckNodes_4$c2b_2_get;

  // ports of submodule vCheckNodes_5
  wire vCheckNodes_5$EN_b2c_0_put,
       vCheckNodes_5$EN_b2c_1_put,
       vCheckNodes_5$EN_b2c_2_put,
       vCheckNodes_5$EN_c2b_0_get,
       vCheckNodes_5$EN_c2b_1_get,
       vCheckNodes_5$EN_c2b_2_get,
       vCheckNodes_5$RDY_b2c_0_put,
       vCheckNodes_5$RDY_b2c_1_put,
       vCheckNodes_5$RDY_b2c_2_put,
       vCheckNodes_5$RDY_c2b_0_get,
       vCheckNodes_5$RDY_c2b_1_get,
       vCheckNodes_5$RDY_c2b_2_get,
       vCheckNodes_5$b2c_0_put,
       vCheckNodes_5$b2c_1_put,
       vCheckNodes_5$b2c_2_put,
       vCheckNodes_5$c2b_0_get,
       vCheckNodes_5$c2b_1_get,
       vCheckNodes_5$c2b_2_get;

  // ports of submodule vCheckNodes_6
  wire vCheckNodes_6$EN_b2c_0_put,
       vCheckNodes_6$EN_b2c_1_put,
       vCheckNodes_6$EN_b2c_2_put,
       vCheckNodes_6$EN_c2b_0_get,
       vCheckNodes_6$EN_c2b_1_get,
       vCheckNodes_6$EN_c2b_2_get,
       vCheckNodes_6$RDY_b2c_0_put,
       vCheckNodes_6$RDY_b2c_1_put,
       vCheckNodes_6$RDY_b2c_2_put,
       vCheckNodes_6$RDY_c2b_0_get,
       vCheckNodes_6$RDY_c2b_1_get,
       vCheckNodes_6$RDY_c2b_2_get,
       vCheckNodes_6$b2c_0_put,
       vCheckNodes_6$b2c_1_put,
       vCheckNodes_6$b2c_2_put,
       vCheckNodes_6$c2b_0_get,
       vCheckNodes_6$c2b_1_get,
       vCheckNodes_6$c2b_2_get;

  // rule scheduling signals
  wire CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_RL_mkConnectionGetPut_10,
       CAN_FIRE_RL_mkConnectionGetPut_11,
       CAN_FIRE_RL_mkConnectionGetPut_12,
       CAN_FIRE_RL_mkConnectionGetPut_13,
       CAN_FIRE_RL_mkConnectionGetPut_14,
       CAN_FIRE_RL_mkConnectionGetPut_15,
       CAN_FIRE_RL_mkConnectionGetPut_16,
       CAN_FIRE_RL_mkConnectionGetPut_17,
       CAN_FIRE_RL_mkConnectionGetPut_18,
       CAN_FIRE_RL_mkConnectionGetPut_19,
       CAN_FIRE_RL_mkConnectionGetPut_2,
       CAN_FIRE_RL_mkConnectionGetPut_20,
       CAN_FIRE_RL_mkConnectionGetPut_3,
       CAN_FIRE_RL_mkConnectionGetPut_4,
       CAN_FIRE_RL_mkConnectionGetPut_5,
       CAN_FIRE_RL_mkConnectionGetPut_6,
       CAN_FIRE_RL_mkConnectionGetPut_7,
       CAN_FIRE_RL_mkConnectionGetPut_8,
       CAN_FIRE_RL_mkConnectionGetPut_9,
       CAN_FIRE_RL_rlConnect,
       CAN_FIRE_RL_rlConnect_1,
       CAN_FIRE_RL_rlConnect_2,
       CAN_FIRE_RL_rlConnect_3,
       CAN_FIRE_RL_rlConnect_4,
       CAN_FIRE_RL_rlConnect_5,
       CAN_FIRE_RL_rlConnect_6,
       CAN_FIRE_RL_rlEvaluateOutput,
       CAN_FIRE_RL_rlPutCodeWordIn,
       CAN_FIRE_request_put,
       CAN_FIRE_response_get,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_RL_mkConnectionGetPut_10,
       WILL_FIRE_RL_mkConnectionGetPut_11,
       WILL_FIRE_RL_mkConnectionGetPut_12,
       WILL_FIRE_RL_mkConnectionGetPut_13,
       WILL_FIRE_RL_mkConnectionGetPut_14,
       WILL_FIRE_RL_mkConnectionGetPut_15,
       WILL_FIRE_RL_mkConnectionGetPut_16,
       WILL_FIRE_RL_mkConnectionGetPut_17,
       WILL_FIRE_RL_mkConnectionGetPut_18,
       WILL_FIRE_RL_mkConnectionGetPut_19,
       WILL_FIRE_RL_mkConnectionGetPut_2,
       WILL_FIRE_RL_mkConnectionGetPut_20,
       WILL_FIRE_RL_mkConnectionGetPut_3,
       WILL_FIRE_RL_mkConnectionGetPut_4,
       WILL_FIRE_RL_mkConnectionGetPut_5,
       WILL_FIRE_RL_mkConnectionGetPut_6,
       WILL_FIRE_RL_mkConnectionGetPut_7,
       WILL_FIRE_RL_mkConnectionGetPut_8,
       WILL_FIRE_RL_mkConnectionGetPut_9,
       WILL_FIRE_RL_rlConnect,
       WILL_FIRE_RL_rlConnect_1,
       WILL_FIRE_RL_rlConnect_2,
       WILL_FIRE_RL_rlConnect_3,
       WILL_FIRE_RL_rlConnect_4,
       WILL_FIRE_RL_rlConnect_5,
       WILL_FIRE_RL_rlConnect_6,
       WILL_FIRE_RL_rlEvaluateOutput,
       WILL_FIRE_RL_rlPutCodeWordIn,
       WILL_FIRE_request_put,
       WILL_FIRE_response_get;

  // inputs to muxes for submodule ports
  wire MUX_rgIdle$write_1__SEL_1, MUX_vBitNodes_0$codeIn_put_1__SEL_1;

  // remaining internal signals
  wire fnCheckDecodedWord___d200,
       vBitNodes_0_RDY_codeIn_put__41_AND_vBitNodes_1_ETC___d178,
       vBitNodes_1_RDY_codeIn_put__42_AND_vBitNodes_2_ETC___d154,
       vBitNodes_2_RDY_dataOut_get__68_AND_vBitNodes__ETC___d185;

  // action method request_put
  assign RDY_request_put = ffI$FULL_N ;
  assign CAN_FIRE_request_put = ffI$FULL_N ;
  assign WILL_FIRE_request_put = EN_request_put ;

  // actionvalue method response_get
  assign response_get = ffO$D_OUT ;
  assign RDY_response_get = ffO$EMPTY_N ;
  assign CAN_FIRE_response_get = ffO$EMPTY_N ;
  assign WILL_FIRE_response_get = EN_response_get ;

  // submodule ffI
  FIFO2 #(.width(32'd7), .guarded(32'd1)) ffI(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(ffI$D_IN),
					      .ENQ(ffI$ENQ),
					      .DEQ(ffI$DEQ),
					      .CLR(ffI$CLR),
					      .D_OUT(ffI$D_OUT),
					      .FULL_N(ffI$FULL_N),
					      .EMPTY_N(ffI$EMPTY_N));

  // submodule ffO
  FIFO2 #(.width(32'd7), .guarded(32'd1)) ffO(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(ffO$D_IN),
					      .ENQ(ffO$ENQ),
					      .DEQ(ffO$DEQ),
					      .CLR(ffO$CLR),
					      .D_OUT(ffO$D_OUT),
					      .FULL_N(ffO$FULL_N),
					      .EMPTY_N(ffO$EMPTY_N));

  // submodule vBitNodes_0
  mkBitNode vBitNodes_0(.CLK(CLK),
			.RST_N(RST_N),
			.c2b_0_put(vBitNodes_0$c2b_0_put),
			.c2b_1_put(vBitNodes_0$c2b_1_put),
			.c2b_2_put(vBitNodes_0$c2b_2_put),
			.codeIn_put(vBitNodes_0$codeIn_put),
			.EN_c2b_0_put(vBitNodes_0$EN_c2b_0_put),
			.EN_c2b_1_put(vBitNodes_0$EN_c2b_1_put),
			.EN_c2b_2_put(vBitNodes_0$EN_c2b_2_put),
			.EN_b2c_get(vBitNodes_0$EN_b2c_get),
			.EN_codeIn_put(vBitNodes_0$EN_codeIn_put),
			.EN_dataOut_get(vBitNodes_0$EN_dataOut_get),
			.RDY_c2b_0_put(vBitNodes_0$RDY_c2b_0_put),
			.RDY_c2b_1_put(vBitNodes_0$RDY_c2b_1_put),
			.RDY_c2b_2_put(vBitNodes_0$RDY_c2b_2_put),
			.b2c_get(vBitNodes_0$b2c_get),
			.RDY_b2c_get(vBitNodes_0$RDY_b2c_get),
			.RDY_codeIn_put(vBitNodes_0$RDY_codeIn_put),
			.dataOut_get(vBitNodes_0$dataOut_get),
			.RDY_dataOut_get(vBitNodes_0$RDY_dataOut_get));

  // submodule vBitNodes_1
  mkBitNode vBitNodes_1(.CLK(CLK),
			.RST_N(RST_N),
			.c2b_0_put(vBitNodes_1$c2b_0_put),
			.c2b_1_put(vBitNodes_1$c2b_1_put),
			.c2b_2_put(vBitNodes_1$c2b_2_put),
			.codeIn_put(vBitNodes_1$codeIn_put),
			.EN_c2b_0_put(vBitNodes_1$EN_c2b_0_put),
			.EN_c2b_1_put(vBitNodes_1$EN_c2b_1_put),
			.EN_c2b_2_put(vBitNodes_1$EN_c2b_2_put),
			.EN_b2c_get(vBitNodes_1$EN_b2c_get),
			.EN_codeIn_put(vBitNodes_1$EN_codeIn_put),
			.EN_dataOut_get(vBitNodes_1$EN_dataOut_get),
			.RDY_c2b_0_put(vBitNodes_1$RDY_c2b_0_put),
			.RDY_c2b_1_put(vBitNodes_1$RDY_c2b_1_put),
			.RDY_c2b_2_put(vBitNodes_1$RDY_c2b_2_put),
			.b2c_get(vBitNodes_1$b2c_get),
			.RDY_b2c_get(vBitNodes_1$RDY_b2c_get),
			.RDY_codeIn_put(vBitNodes_1$RDY_codeIn_put),
			.dataOut_get(vBitNodes_1$dataOut_get),
			.RDY_dataOut_get(vBitNodes_1$RDY_dataOut_get));

  // submodule vBitNodes_2
  mkBitNode vBitNodes_2(.CLK(CLK),
			.RST_N(RST_N),
			.c2b_0_put(vBitNodes_2$c2b_0_put),
			.c2b_1_put(vBitNodes_2$c2b_1_put),
			.c2b_2_put(vBitNodes_2$c2b_2_put),
			.codeIn_put(vBitNodes_2$codeIn_put),
			.EN_c2b_0_put(vBitNodes_2$EN_c2b_0_put),
			.EN_c2b_1_put(vBitNodes_2$EN_c2b_1_put),
			.EN_c2b_2_put(vBitNodes_2$EN_c2b_2_put),
			.EN_b2c_get(vBitNodes_2$EN_b2c_get),
			.EN_codeIn_put(vBitNodes_2$EN_codeIn_put),
			.EN_dataOut_get(vBitNodes_2$EN_dataOut_get),
			.RDY_c2b_0_put(vBitNodes_2$RDY_c2b_0_put),
			.RDY_c2b_1_put(vBitNodes_2$RDY_c2b_1_put),
			.RDY_c2b_2_put(vBitNodes_2$RDY_c2b_2_put),
			.b2c_get(vBitNodes_2$b2c_get),
			.RDY_b2c_get(vBitNodes_2$RDY_b2c_get),
			.RDY_codeIn_put(vBitNodes_2$RDY_codeIn_put),
			.dataOut_get(vBitNodes_2$dataOut_get),
			.RDY_dataOut_get(vBitNodes_2$RDY_dataOut_get));

  // submodule vBitNodes_3
  mkBitNode vBitNodes_3(.CLK(CLK),
			.RST_N(RST_N),
			.c2b_0_put(vBitNodes_3$c2b_0_put),
			.c2b_1_put(vBitNodes_3$c2b_1_put),
			.c2b_2_put(vBitNodes_3$c2b_2_put),
			.codeIn_put(vBitNodes_3$codeIn_put),
			.EN_c2b_0_put(vBitNodes_3$EN_c2b_0_put),
			.EN_c2b_1_put(vBitNodes_3$EN_c2b_1_put),
			.EN_c2b_2_put(vBitNodes_3$EN_c2b_2_put),
			.EN_b2c_get(vBitNodes_3$EN_b2c_get),
			.EN_codeIn_put(vBitNodes_3$EN_codeIn_put),
			.EN_dataOut_get(vBitNodes_3$EN_dataOut_get),
			.RDY_c2b_0_put(vBitNodes_3$RDY_c2b_0_put),
			.RDY_c2b_1_put(vBitNodes_3$RDY_c2b_1_put),
			.RDY_c2b_2_put(vBitNodes_3$RDY_c2b_2_put),
			.b2c_get(vBitNodes_3$b2c_get),
			.RDY_b2c_get(vBitNodes_3$RDY_b2c_get),
			.RDY_codeIn_put(vBitNodes_3$RDY_codeIn_put),
			.dataOut_get(vBitNodes_3$dataOut_get),
			.RDY_dataOut_get(vBitNodes_3$RDY_dataOut_get));

  // submodule vBitNodes_4
  mkBitNode vBitNodes_4(.CLK(CLK),
			.RST_N(RST_N),
			.c2b_0_put(vBitNodes_4$c2b_0_put),
			.c2b_1_put(vBitNodes_4$c2b_1_put),
			.c2b_2_put(vBitNodes_4$c2b_2_put),
			.codeIn_put(vBitNodes_4$codeIn_put),
			.EN_c2b_0_put(vBitNodes_4$EN_c2b_0_put),
			.EN_c2b_1_put(vBitNodes_4$EN_c2b_1_put),
			.EN_c2b_2_put(vBitNodes_4$EN_c2b_2_put),
			.EN_b2c_get(vBitNodes_4$EN_b2c_get),
			.EN_codeIn_put(vBitNodes_4$EN_codeIn_put),
			.EN_dataOut_get(vBitNodes_4$EN_dataOut_get),
			.RDY_c2b_0_put(vBitNodes_4$RDY_c2b_0_put),
			.RDY_c2b_1_put(vBitNodes_4$RDY_c2b_1_put),
			.RDY_c2b_2_put(vBitNodes_4$RDY_c2b_2_put),
			.b2c_get(vBitNodes_4$b2c_get),
			.RDY_b2c_get(vBitNodes_4$RDY_b2c_get),
			.RDY_codeIn_put(vBitNodes_4$RDY_codeIn_put),
			.dataOut_get(vBitNodes_4$dataOut_get),
			.RDY_dataOut_get(vBitNodes_4$RDY_dataOut_get));

  // submodule vBitNodes_5
  mkBitNode vBitNodes_5(.CLK(CLK),
			.RST_N(RST_N),
			.c2b_0_put(vBitNodes_5$c2b_0_put),
			.c2b_1_put(vBitNodes_5$c2b_1_put),
			.c2b_2_put(vBitNodes_5$c2b_2_put),
			.codeIn_put(vBitNodes_5$codeIn_put),
			.EN_c2b_0_put(vBitNodes_5$EN_c2b_0_put),
			.EN_c2b_1_put(vBitNodes_5$EN_c2b_1_put),
			.EN_c2b_2_put(vBitNodes_5$EN_c2b_2_put),
			.EN_b2c_get(vBitNodes_5$EN_b2c_get),
			.EN_codeIn_put(vBitNodes_5$EN_codeIn_put),
			.EN_dataOut_get(vBitNodes_5$EN_dataOut_get),
			.RDY_c2b_0_put(vBitNodes_5$RDY_c2b_0_put),
			.RDY_c2b_1_put(vBitNodes_5$RDY_c2b_1_put),
			.RDY_c2b_2_put(vBitNodes_5$RDY_c2b_2_put),
			.b2c_get(vBitNodes_5$b2c_get),
			.RDY_b2c_get(vBitNodes_5$RDY_b2c_get),
			.RDY_codeIn_put(vBitNodes_5$RDY_codeIn_put),
			.dataOut_get(vBitNodes_5$dataOut_get),
			.RDY_dataOut_get(vBitNodes_5$RDY_dataOut_get));

  // submodule vBitNodes_6
  mkBitNode vBitNodes_6(.CLK(CLK),
			.RST_N(RST_N),
			.c2b_0_put(vBitNodes_6$c2b_0_put),
			.c2b_1_put(vBitNodes_6$c2b_1_put),
			.c2b_2_put(vBitNodes_6$c2b_2_put),
			.codeIn_put(vBitNodes_6$codeIn_put),
			.EN_c2b_0_put(vBitNodes_6$EN_c2b_0_put),
			.EN_c2b_1_put(vBitNodes_6$EN_c2b_1_put),
			.EN_c2b_2_put(vBitNodes_6$EN_c2b_2_put),
			.EN_b2c_get(vBitNodes_6$EN_b2c_get),
			.EN_codeIn_put(vBitNodes_6$EN_codeIn_put),
			.EN_dataOut_get(vBitNodes_6$EN_dataOut_get),
			.RDY_c2b_0_put(vBitNodes_6$RDY_c2b_0_put),
			.RDY_c2b_1_put(vBitNodes_6$RDY_c2b_1_put),
			.RDY_c2b_2_put(vBitNodes_6$RDY_c2b_2_put),
			.b2c_get(vBitNodes_6$b2c_get),
			.RDY_b2c_get(vBitNodes_6$RDY_b2c_get),
			.RDY_codeIn_put(vBitNodes_6$RDY_codeIn_put),
			.dataOut_get(vBitNodes_6$dataOut_get),
			.RDY_dataOut_get(vBitNodes_6$RDY_dataOut_get));

  // submodule vCheckNodes_0
  mkChkNode vCheckNodes_0(.CLK(CLK),
			  .RST_N(RST_N),
			  .b2c_0_put(vCheckNodes_0$b2c_0_put),
			  .b2c_1_put(vCheckNodes_0$b2c_1_put),
			  .b2c_2_put(vCheckNodes_0$b2c_2_put),
			  .EN_b2c_0_put(vCheckNodes_0$EN_b2c_0_put),
			  .EN_b2c_1_put(vCheckNodes_0$EN_b2c_1_put),
			  .EN_b2c_2_put(vCheckNodes_0$EN_b2c_2_put),
			  .EN_c2b_0_get(vCheckNodes_0$EN_c2b_0_get),
			  .EN_c2b_1_get(vCheckNodes_0$EN_c2b_1_get),
			  .EN_c2b_2_get(vCheckNodes_0$EN_c2b_2_get),
			  .RDY_b2c_0_put(vCheckNodes_0$RDY_b2c_0_put),
			  .RDY_b2c_1_put(vCheckNodes_0$RDY_b2c_1_put),
			  .RDY_b2c_2_put(vCheckNodes_0$RDY_b2c_2_put),
			  .c2b_0_get(vCheckNodes_0$c2b_0_get),
			  .RDY_c2b_0_get(vCheckNodes_0$RDY_c2b_0_get),
			  .c2b_1_get(vCheckNodes_0$c2b_1_get),
			  .RDY_c2b_1_get(vCheckNodes_0$RDY_c2b_1_get),
			  .c2b_2_get(vCheckNodes_0$c2b_2_get),
			  .RDY_c2b_2_get(vCheckNodes_0$RDY_c2b_2_get));

  // submodule vCheckNodes_1
  mkChkNode vCheckNodes_1(.CLK(CLK),
			  .RST_N(RST_N),
			  .b2c_0_put(vCheckNodes_1$b2c_0_put),
			  .b2c_1_put(vCheckNodes_1$b2c_1_put),
			  .b2c_2_put(vCheckNodes_1$b2c_2_put),
			  .EN_b2c_0_put(vCheckNodes_1$EN_b2c_0_put),
			  .EN_b2c_1_put(vCheckNodes_1$EN_b2c_1_put),
			  .EN_b2c_2_put(vCheckNodes_1$EN_b2c_2_put),
			  .EN_c2b_0_get(vCheckNodes_1$EN_c2b_0_get),
			  .EN_c2b_1_get(vCheckNodes_1$EN_c2b_1_get),
			  .EN_c2b_2_get(vCheckNodes_1$EN_c2b_2_get),
			  .RDY_b2c_0_put(vCheckNodes_1$RDY_b2c_0_put),
			  .RDY_b2c_1_put(vCheckNodes_1$RDY_b2c_1_put),
			  .RDY_b2c_2_put(vCheckNodes_1$RDY_b2c_2_put),
			  .c2b_0_get(vCheckNodes_1$c2b_0_get),
			  .RDY_c2b_0_get(vCheckNodes_1$RDY_c2b_0_get),
			  .c2b_1_get(vCheckNodes_1$c2b_1_get),
			  .RDY_c2b_1_get(vCheckNodes_1$RDY_c2b_1_get),
			  .c2b_2_get(vCheckNodes_1$c2b_2_get),
			  .RDY_c2b_2_get(vCheckNodes_1$RDY_c2b_2_get));

  // submodule vCheckNodes_2
  mkChkNode vCheckNodes_2(.CLK(CLK),
			  .RST_N(RST_N),
			  .b2c_0_put(vCheckNodes_2$b2c_0_put),
			  .b2c_1_put(vCheckNodes_2$b2c_1_put),
			  .b2c_2_put(vCheckNodes_2$b2c_2_put),
			  .EN_b2c_0_put(vCheckNodes_2$EN_b2c_0_put),
			  .EN_b2c_1_put(vCheckNodes_2$EN_b2c_1_put),
			  .EN_b2c_2_put(vCheckNodes_2$EN_b2c_2_put),
			  .EN_c2b_0_get(vCheckNodes_2$EN_c2b_0_get),
			  .EN_c2b_1_get(vCheckNodes_2$EN_c2b_1_get),
			  .EN_c2b_2_get(vCheckNodes_2$EN_c2b_2_get),
			  .RDY_b2c_0_put(vCheckNodes_2$RDY_b2c_0_put),
			  .RDY_b2c_1_put(vCheckNodes_2$RDY_b2c_1_put),
			  .RDY_b2c_2_put(vCheckNodes_2$RDY_b2c_2_put),
			  .c2b_0_get(vCheckNodes_2$c2b_0_get),
			  .RDY_c2b_0_get(vCheckNodes_2$RDY_c2b_0_get),
			  .c2b_1_get(vCheckNodes_2$c2b_1_get),
			  .RDY_c2b_1_get(vCheckNodes_2$RDY_c2b_1_get),
			  .c2b_2_get(vCheckNodes_2$c2b_2_get),
			  .RDY_c2b_2_get(vCheckNodes_2$RDY_c2b_2_get));

  // submodule vCheckNodes_3
  mkChkNode vCheckNodes_3(.CLK(CLK),
			  .RST_N(RST_N),
			  .b2c_0_put(vCheckNodes_3$b2c_0_put),
			  .b2c_1_put(vCheckNodes_3$b2c_1_put),
			  .b2c_2_put(vCheckNodes_3$b2c_2_put),
			  .EN_b2c_0_put(vCheckNodes_3$EN_b2c_0_put),
			  .EN_b2c_1_put(vCheckNodes_3$EN_b2c_1_put),
			  .EN_b2c_2_put(vCheckNodes_3$EN_b2c_2_put),
			  .EN_c2b_0_get(vCheckNodes_3$EN_c2b_0_get),
			  .EN_c2b_1_get(vCheckNodes_3$EN_c2b_1_get),
			  .EN_c2b_2_get(vCheckNodes_3$EN_c2b_2_get),
			  .RDY_b2c_0_put(vCheckNodes_3$RDY_b2c_0_put),
			  .RDY_b2c_1_put(vCheckNodes_3$RDY_b2c_1_put),
			  .RDY_b2c_2_put(vCheckNodes_3$RDY_b2c_2_put),
			  .c2b_0_get(vCheckNodes_3$c2b_0_get),
			  .RDY_c2b_0_get(vCheckNodes_3$RDY_c2b_0_get),
			  .c2b_1_get(vCheckNodes_3$c2b_1_get),
			  .RDY_c2b_1_get(vCheckNodes_3$RDY_c2b_1_get),
			  .c2b_2_get(vCheckNodes_3$c2b_2_get),
			  .RDY_c2b_2_get(vCheckNodes_3$RDY_c2b_2_get));

  // submodule vCheckNodes_4
  mkChkNode vCheckNodes_4(.CLK(CLK),
			  .RST_N(RST_N),
			  .b2c_0_put(vCheckNodes_4$b2c_0_put),
			  .b2c_1_put(vCheckNodes_4$b2c_1_put),
			  .b2c_2_put(vCheckNodes_4$b2c_2_put),
			  .EN_b2c_0_put(vCheckNodes_4$EN_b2c_0_put),
			  .EN_b2c_1_put(vCheckNodes_4$EN_b2c_1_put),
			  .EN_b2c_2_put(vCheckNodes_4$EN_b2c_2_put),
			  .EN_c2b_0_get(vCheckNodes_4$EN_c2b_0_get),
			  .EN_c2b_1_get(vCheckNodes_4$EN_c2b_1_get),
			  .EN_c2b_2_get(vCheckNodes_4$EN_c2b_2_get),
			  .RDY_b2c_0_put(vCheckNodes_4$RDY_b2c_0_put),
			  .RDY_b2c_1_put(vCheckNodes_4$RDY_b2c_1_put),
			  .RDY_b2c_2_put(vCheckNodes_4$RDY_b2c_2_put),
			  .c2b_0_get(vCheckNodes_4$c2b_0_get),
			  .RDY_c2b_0_get(vCheckNodes_4$RDY_c2b_0_get),
			  .c2b_1_get(vCheckNodes_4$c2b_1_get),
			  .RDY_c2b_1_get(vCheckNodes_4$RDY_c2b_1_get),
			  .c2b_2_get(vCheckNodes_4$c2b_2_get),
			  .RDY_c2b_2_get(vCheckNodes_4$RDY_c2b_2_get));

  // submodule vCheckNodes_5
  mkChkNode vCheckNodes_5(.CLK(CLK),
			  .RST_N(RST_N),
			  .b2c_0_put(vCheckNodes_5$b2c_0_put),
			  .b2c_1_put(vCheckNodes_5$b2c_1_put),
			  .b2c_2_put(vCheckNodes_5$b2c_2_put),
			  .EN_b2c_0_put(vCheckNodes_5$EN_b2c_0_put),
			  .EN_b2c_1_put(vCheckNodes_5$EN_b2c_1_put),
			  .EN_b2c_2_put(vCheckNodes_5$EN_b2c_2_put),
			  .EN_c2b_0_get(vCheckNodes_5$EN_c2b_0_get),
			  .EN_c2b_1_get(vCheckNodes_5$EN_c2b_1_get),
			  .EN_c2b_2_get(vCheckNodes_5$EN_c2b_2_get),
			  .RDY_b2c_0_put(vCheckNodes_5$RDY_b2c_0_put),
			  .RDY_b2c_1_put(vCheckNodes_5$RDY_b2c_1_put),
			  .RDY_b2c_2_put(vCheckNodes_5$RDY_b2c_2_put),
			  .c2b_0_get(vCheckNodes_5$c2b_0_get),
			  .RDY_c2b_0_get(vCheckNodes_5$RDY_c2b_0_get),
			  .c2b_1_get(vCheckNodes_5$c2b_1_get),
			  .RDY_c2b_1_get(vCheckNodes_5$RDY_c2b_1_get),
			  .c2b_2_get(vCheckNodes_5$c2b_2_get),
			  .RDY_c2b_2_get(vCheckNodes_5$RDY_c2b_2_get));

  // submodule vCheckNodes_6
  mkChkNode vCheckNodes_6(.CLK(CLK),
			  .RST_N(RST_N),
			  .b2c_0_put(vCheckNodes_6$b2c_0_put),
			  .b2c_1_put(vCheckNodes_6$b2c_1_put),
			  .b2c_2_put(vCheckNodes_6$b2c_2_put),
			  .EN_b2c_0_put(vCheckNodes_6$EN_b2c_0_put),
			  .EN_b2c_1_put(vCheckNodes_6$EN_b2c_1_put),
			  .EN_b2c_2_put(vCheckNodes_6$EN_b2c_2_put),
			  .EN_c2b_0_get(vCheckNodes_6$EN_c2b_0_get),
			  .EN_c2b_1_get(vCheckNodes_6$EN_c2b_1_get),
			  .EN_c2b_2_get(vCheckNodes_6$EN_c2b_2_get),
			  .RDY_b2c_0_put(vCheckNodes_6$RDY_b2c_0_put),
			  .RDY_b2c_1_put(vCheckNodes_6$RDY_b2c_1_put),
			  .RDY_b2c_2_put(vCheckNodes_6$RDY_b2c_2_put),
			  .c2b_0_get(vCheckNodes_6$c2b_0_get),
			  .RDY_c2b_0_get(vCheckNodes_6$RDY_c2b_0_get),
			  .c2b_1_get(vCheckNodes_6$c2b_1_get),
			  .RDY_c2b_1_get(vCheckNodes_6$RDY_c2b_1_get),
			  .c2b_2_get(vCheckNodes_6$c2b_2_get),
			  .RDY_c2b_2_get(vCheckNodes_6$RDY_c2b_2_get));

  // rule RL_rlConnect
  assign CAN_FIRE_RL_rlConnect =
	     vBitNodes_0$RDY_b2c_get && vCheckNodes_0$RDY_b2c_0_put &&
	     vCheckNodes_4$RDY_b2c_0_put &&
	     vCheckNodes_6$RDY_b2c_0_put ;
  assign WILL_FIRE_RL_rlConnect = CAN_FIRE_RL_rlConnect ;

  // rule RL_rlConnect_1
  assign CAN_FIRE_RL_rlConnect_1 =
	     vBitNodes_1$RDY_b2c_get && vCheckNodes_0$RDY_b2c_1_put &&
	     vCheckNodes_1$RDY_b2c_0_put &&
	     vCheckNodes_5$RDY_b2c_0_put ;
  assign WILL_FIRE_RL_rlConnect_1 = CAN_FIRE_RL_rlConnect_1 ;

  // rule RL_rlConnect_2
  assign CAN_FIRE_RL_rlConnect_2 =
	     vBitNodes_2$RDY_b2c_get && vCheckNodes_1$RDY_b2c_1_put &&
	     vCheckNodes_6$RDY_b2c_1_put &&
	     vCheckNodes_2$RDY_b2c_0_put ;
  assign WILL_FIRE_RL_rlConnect_2 = CAN_FIRE_RL_rlConnect_2 ;

  // rule RL_rlConnect_3
  assign CAN_FIRE_RL_rlConnect_3 =
	     vBitNodes_3$RDY_b2c_get && vCheckNodes_0$RDY_b2c_2_put &&
	     vCheckNodes_2$RDY_b2c_1_put &&
	     vCheckNodes_3$RDY_b2c_0_put ;
  assign WILL_FIRE_RL_rlConnect_3 = CAN_FIRE_RL_rlConnect_3 ;

  // rule RL_rlConnect_4
  assign CAN_FIRE_RL_rlConnect_4 =
	     vBitNodes_4$RDY_b2c_get && vCheckNodes_1$RDY_b2c_2_put &&
	     vCheckNodes_3$RDY_b2c_1_put &&
	     vCheckNodes_4$RDY_b2c_1_put ;
  assign WILL_FIRE_RL_rlConnect_4 = CAN_FIRE_RL_rlConnect_4 ;

  // rule RL_rlConnect_5
  assign CAN_FIRE_RL_rlConnect_5 =
	     vBitNodes_5$RDY_b2c_get && vCheckNodes_2$RDY_b2c_2_put &&
	     vCheckNodes_4$RDY_b2c_2_put &&
	     vCheckNodes_5$RDY_b2c_1_put ;
  assign WILL_FIRE_RL_rlConnect_5 = CAN_FIRE_RL_rlConnect_5 ;

  // rule RL_rlConnect_6
  assign CAN_FIRE_RL_rlConnect_6 =
	     vBitNodes_6$RDY_b2c_get && vCheckNodes_3$RDY_b2c_2_put &&
	     vCheckNodes_5$RDY_b2c_2_put &&
	     vCheckNodes_6$RDY_b2c_2_put ;
  assign WILL_FIRE_RL_rlConnect_6 = CAN_FIRE_RL_rlConnect_6 ;

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     vBitNodes_0$RDY_c2b_0_put && vCheckNodes_0$RDY_c2b_0_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 =
	     vBitNodes_1$RDY_c2b_0_put && vCheckNodes_0$RDY_c2b_1_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_1 =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // rule RL_mkConnectionGetPut_2
  assign CAN_FIRE_RL_mkConnectionGetPut_2 =
	     vBitNodes_3$RDY_c2b_0_put && vCheckNodes_0$RDY_c2b_2_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ;

  // rule RL_mkConnectionGetPut_3
  assign CAN_FIRE_RL_mkConnectionGetPut_3 =
	     vBitNodes_1$RDY_c2b_1_put && vCheckNodes_1$RDY_c2b_0_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_3 =
	     CAN_FIRE_RL_mkConnectionGetPut_3 ;

  // rule RL_mkConnectionGetPut_4
  assign CAN_FIRE_RL_mkConnectionGetPut_4 =
	     vBitNodes_2$RDY_c2b_0_put && vCheckNodes_1$RDY_c2b_1_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_4 =
	     CAN_FIRE_RL_mkConnectionGetPut_4 ;

  // rule RL_mkConnectionGetPut_5
  assign CAN_FIRE_RL_mkConnectionGetPut_5 =
	     vBitNodes_4$RDY_c2b_0_put && vCheckNodes_1$RDY_c2b_2_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_5 =
	     CAN_FIRE_RL_mkConnectionGetPut_5 ;

  // rule RL_mkConnectionGetPut_6
  assign CAN_FIRE_RL_mkConnectionGetPut_6 =
	     vBitNodes_2$RDY_c2b_1_put && vCheckNodes_2$RDY_c2b_0_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_6 =
	     CAN_FIRE_RL_mkConnectionGetPut_6 ;

  // rule RL_mkConnectionGetPut_7
  assign CAN_FIRE_RL_mkConnectionGetPut_7 =
	     vBitNodes_3$RDY_c2b_1_put && vCheckNodes_2$RDY_c2b_1_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_7 =
	     CAN_FIRE_RL_mkConnectionGetPut_7 ;

  // rule RL_mkConnectionGetPut_8
  assign CAN_FIRE_RL_mkConnectionGetPut_8 =
	     vBitNodes_5$RDY_c2b_0_put && vCheckNodes_2$RDY_c2b_2_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_8 =
	     CAN_FIRE_RL_mkConnectionGetPut_8 ;

  // rule RL_mkConnectionGetPut_9
  assign CAN_FIRE_RL_mkConnectionGetPut_9 =
	     vBitNodes_3$RDY_c2b_2_put && vCheckNodes_3$RDY_c2b_0_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_9 =
	     CAN_FIRE_RL_mkConnectionGetPut_9 ;

  // rule RL_mkConnectionGetPut_10
  assign CAN_FIRE_RL_mkConnectionGetPut_10 =
	     vBitNodes_4$RDY_c2b_1_put && vCheckNodes_3$RDY_c2b_1_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_10 =
	     CAN_FIRE_RL_mkConnectionGetPut_10 ;

  // rule RL_mkConnectionGetPut_11
  assign CAN_FIRE_RL_mkConnectionGetPut_11 =
	     vBitNodes_6$RDY_c2b_0_put && vCheckNodes_3$RDY_c2b_2_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_11 =
	     CAN_FIRE_RL_mkConnectionGetPut_11 ;

  // rule RL_mkConnectionGetPut_12
  assign CAN_FIRE_RL_mkConnectionGetPut_12 =
	     vBitNodes_0$RDY_c2b_1_put && vCheckNodes_4$RDY_c2b_0_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_12 =
	     CAN_FIRE_RL_mkConnectionGetPut_12 ;

  // rule RL_mkConnectionGetPut_13
  assign CAN_FIRE_RL_mkConnectionGetPut_13 =
	     vBitNodes_4$RDY_c2b_2_put && vCheckNodes_4$RDY_c2b_1_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_13 =
	     CAN_FIRE_RL_mkConnectionGetPut_13 ;

  // rule RL_mkConnectionGetPut_14
  assign CAN_FIRE_RL_mkConnectionGetPut_14 =
	     vBitNodes_5$RDY_c2b_1_put && vCheckNodes_4$RDY_c2b_2_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_14 =
	     CAN_FIRE_RL_mkConnectionGetPut_14 ;

  // rule RL_mkConnectionGetPut_15
  assign CAN_FIRE_RL_mkConnectionGetPut_15 =
	     vBitNodes_1$RDY_c2b_2_put && vCheckNodes_5$RDY_c2b_0_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_15 =
	     CAN_FIRE_RL_mkConnectionGetPut_15 ;

  // rule RL_mkConnectionGetPut_16
  assign CAN_FIRE_RL_mkConnectionGetPut_16 =
	     vBitNodes_5$RDY_c2b_2_put && vCheckNodes_5$RDY_c2b_1_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_16 =
	     CAN_FIRE_RL_mkConnectionGetPut_16 ;

  // rule RL_mkConnectionGetPut_17
  assign CAN_FIRE_RL_mkConnectionGetPut_17 =
	     vBitNodes_6$RDY_c2b_1_put && vCheckNodes_5$RDY_c2b_2_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_17 =
	     CAN_FIRE_RL_mkConnectionGetPut_17 ;

  // rule RL_mkConnectionGetPut_18
  assign CAN_FIRE_RL_mkConnectionGetPut_18 =
	     vBitNodes_0$RDY_c2b_2_put && vCheckNodes_6$RDY_c2b_0_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_18 =
	     CAN_FIRE_RL_mkConnectionGetPut_18 ;

  // rule RL_mkConnectionGetPut_19
  assign CAN_FIRE_RL_mkConnectionGetPut_19 =
	     vBitNodes_2$RDY_c2b_2_put && vCheckNodes_6$RDY_c2b_1_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_19 =
	     CAN_FIRE_RL_mkConnectionGetPut_19 ;

  // rule RL_mkConnectionGetPut_20
  assign CAN_FIRE_RL_mkConnectionGetPut_20 =
	     vBitNodes_6$RDY_c2b_2_put && vCheckNodes_6$RDY_c2b_2_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_20 =
	     CAN_FIRE_RL_mkConnectionGetPut_20 ;

  // rule RL_rlPutCodeWordIn
  assign CAN_FIRE_RL_rlPutCodeWordIn =
	     vBitNodes_0$RDY_codeIn_put &&
	     vBitNodes_1_RDY_codeIn_put__42_AND_vBitNodes_2_ETC___d154 &&
	     rgIdle ;
  assign WILL_FIRE_RL_rlPutCodeWordIn = CAN_FIRE_RL_rlPutCodeWordIn ;

  // rule RL_rlEvaluateOutput
  assign CAN_FIRE_RL_rlEvaluateOutput =
	     vBitNodes_0$RDY_dataOut_get && vBitNodes_1$RDY_dataOut_get &&
	     vBitNodes_2_RDY_dataOut_get__68_AND_vBitNodes__ETC___d185 &&
	     !rgIdle ;
  assign WILL_FIRE_RL_rlEvaluateOutput = CAN_FIRE_RL_rlEvaluateOutput ;

  // inputs to muxes for submodule ports
  assign MUX_rgIdle$write_1__SEL_1 =
	     WILL_FIRE_RL_rlEvaluateOutput && !fnCheckDecodedWord___d200 ;
  assign MUX_vBitNodes_0$codeIn_put_1__SEL_1 =
	     WILL_FIRE_RL_rlEvaluateOutput && fnCheckDecodedWord___d200 ;

  // register rgIdle
  assign rgIdle$D_IN = MUX_rgIdle$write_1__SEL_1 ;
  assign rgIdle$EN =
	     WILL_FIRE_RL_rlEvaluateOutput && !fnCheckDecodedWord___d200 ||
	     WILL_FIRE_RL_rlPutCodeWordIn ;

  // submodule ffI
  assign ffI$D_IN = request_put ;
  assign ffI$ENQ = EN_request_put ;
  assign ffI$DEQ = CAN_FIRE_RL_rlPutCodeWordIn ;
  assign ffI$CLR = 1'b0 ;

  // submodule ffO
  assign ffO$D_IN =
	     { vBitNodes_6$dataOut_get,
	       vBitNodes_5$dataOut_get,
	       vBitNodes_4$dataOut_get,
	       vBitNodes_3$dataOut_get,
	       vBitNodes_2$dataOut_get,
	       vBitNodes_1$dataOut_get,
	       vBitNodes_0$dataOut_get } ;
  assign ffO$ENQ = MUX_rgIdle$write_1__SEL_1 ;
  assign ffO$DEQ = EN_response_get ;
  assign ffO$CLR = 1'b0 ;

  // submodule vBitNodes_0
  assign vBitNodes_0$c2b_0_put = vCheckNodes_0$c2b_0_get ;
  assign vBitNodes_0$c2b_1_put = vCheckNodes_4$c2b_0_get ;
  assign vBitNodes_0$c2b_2_put = vCheckNodes_6$c2b_0_get ;
  assign vBitNodes_0$codeIn_put =
	     MUX_vBitNodes_0$codeIn_put_1__SEL_1 ?
	       vBitNodes_0$dataOut_get :
	       ffI$D_OUT[0] ;
  assign vBitNodes_0$EN_c2b_0_put = CAN_FIRE_RL_mkConnectionGetPut ;
  assign vBitNodes_0$EN_c2b_1_put = CAN_FIRE_RL_mkConnectionGetPut_12 ;
  assign vBitNodes_0$EN_c2b_2_put = CAN_FIRE_RL_mkConnectionGetPut_18 ;
  assign vBitNodes_0$EN_b2c_get = CAN_FIRE_RL_rlConnect ;
  assign vBitNodes_0$EN_codeIn_put =
	     WILL_FIRE_RL_rlEvaluateOutput && fnCheckDecodedWord___d200 ||
	     WILL_FIRE_RL_rlPutCodeWordIn ;
  assign vBitNodes_0$EN_dataOut_get = CAN_FIRE_RL_rlEvaluateOutput ;

  // submodule vBitNodes_1
  assign vBitNodes_1$c2b_0_put = vCheckNodes_0$c2b_1_get ;
  assign vBitNodes_1$c2b_1_put = vCheckNodes_1$c2b_0_get ;
  assign vBitNodes_1$c2b_2_put = vCheckNodes_5$c2b_0_get ;
  assign vBitNodes_1$codeIn_put =
	     MUX_vBitNodes_0$codeIn_put_1__SEL_1 ?
	       vBitNodes_1$dataOut_get :
	       ffI$D_OUT[1] ;
  assign vBitNodes_1$EN_c2b_0_put = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign vBitNodes_1$EN_c2b_1_put = CAN_FIRE_RL_mkConnectionGetPut_3 ;
  assign vBitNodes_1$EN_c2b_2_put = CAN_FIRE_RL_mkConnectionGetPut_15 ;
  assign vBitNodes_1$EN_b2c_get = CAN_FIRE_RL_rlConnect_1 ;
  assign vBitNodes_1$EN_codeIn_put =
	     WILL_FIRE_RL_rlEvaluateOutput && fnCheckDecodedWord___d200 ||
	     WILL_FIRE_RL_rlPutCodeWordIn ;
  assign vBitNodes_1$EN_dataOut_get = CAN_FIRE_RL_rlEvaluateOutput ;

  // submodule vBitNodes_2
  assign vBitNodes_2$c2b_0_put = vCheckNodes_1$c2b_1_get ;
  assign vBitNodes_2$c2b_1_put = vCheckNodes_2$c2b_0_get ;
  assign vBitNodes_2$c2b_2_put = vCheckNodes_6$c2b_1_get ;
  assign vBitNodes_2$codeIn_put =
	     MUX_vBitNodes_0$codeIn_put_1__SEL_1 ?
	       vBitNodes_2$dataOut_get :
	       ffI$D_OUT[2] ;
  assign vBitNodes_2$EN_c2b_0_put = CAN_FIRE_RL_mkConnectionGetPut_4 ;
  assign vBitNodes_2$EN_c2b_1_put = CAN_FIRE_RL_mkConnectionGetPut_6 ;
  assign vBitNodes_2$EN_c2b_2_put = CAN_FIRE_RL_mkConnectionGetPut_19 ;
  assign vBitNodes_2$EN_b2c_get = CAN_FIRE_RL_rlConnect_2 ;
  assign vBitNodes_2$EN_codeIn_put =
	     WILL_FIRE_RL_rlEvaluateOutput && fnCheckDecodedWord___d200 ||
	     WILL_FIRE_RL_rlPutCodeWordIn ;
  assign vBitNodes_2$EN_dataOut_get = CAN_FIRE_RL_rlEvaluateOutput ;

  // submodule vBitNodes_3
  assign vBitNodes_3$c2b_0_put = vCheckNodes_0$c2b_2_get ;
  assign vBitNodes_3$c2b_1_put = vCheckNodes_2$c2b_1_get ;
  assign vBitNodes_3$c2b_2_put = vCheckNodes_3$c2b_0_get ;
  assign vBitNodes_3$codeIn_put =
	     MUX_vBitNodes_0$codeIn_put_1__SEL_1 ?
	       vBitNodes_3$dataOut_get :
	       ffI$D_OUT[3] ;
  assign vBitNodes_3$EN_c2b_0_put = CAN_FIRE_RL_mkConnectionGetPut_2 ;
  assign vBitNodes_3$EN_c2b_1_put = CAN_FIRE_RL_mkConnectionGetPut_7 ;
  assign vBitNodes_3$EN_c2b_2_put = CAN_FIRE_RL_mkConnectionGetPut_9 ;
  assign vBitNodes_3$EN_b2c_get = CAN_FIRE_RL_rlConnect_3 ;
  assign vBitNodes_3$EN_codeIn_put =
	     WILL_FIRE_RL_rlEvaluateOutput && fnCheckDecodedWord___d200 ||
	     WILL_FIRE_RL_rlPutCodeWordIn ;
  assign vBitNodes_3$EN_dataOut_get = CAN_FIRE_RL_rlEvaluateOutput ;

  // submodule vBitNodes_4
  assign vBitNodes_4$c2b_0_put = vCheckNodes_1$c2b_2_get ;
  assign vBitNodes_4$c2b_1_put = vCheckNodes_3$c2b_1_get ;
  assign vBitNodes_4$c2b_2_put = vCheckNodes_4$c2b_1_get ;
  assign vBitNodes_4$codeIn_put =
	     MUX_vBitNodes_0$codeIn_put_1__SEL_1 ?
	       vBitNodes_4$dataOut_get :
	       ffI$D_OUT[4] ;
  assign vBitNodes_4$EN_c2b_0_put = CAN_FIRE_RL_mkConnectionGetPut_5 ;
  assign vBitNodes_4$EN_c2b_1_put = CAN_FIRE_RL_mkConnectionGetPut_10 ;
  assign vBitNodes_4$EN_c2b_2_put = CAN_FIRE_RL_mkConnectionGetPut_13 ;
  assign vBitNodes_4$EN_b2c_get = CAN_FIRE_RL_rlConnect_4 ;
  assign vBitNodes_4$EN_codeIn_put =
	     WILL_FIRE_RL_rlEvaluateOutput && fnCheckDecodedWord___d200 ||
	     WILL_FIRE_RL_rlPutCodeWordIn ;
  assign vBitNodes_4$EN_dataOut_get = CAN_FIRE_RL_rlEvaluateOutput ;

  // submodule vBitNodes_5
  assign vBitNodes_5$c2b_0_put = vCheckNodes_2$c2b_2_get ;
  assign vBitNodes_5$c2b_1_put = vCheckNodes_4$c2b_2_get ;
  assign vBitNodes_5$c2b_2_put = vCheckNodes_5$c2b_1_get ;
  assign vBitNodes_5$codeIn_put =
	     MUX_vBitNodes_0$codeIn_put_1__SEL_1 ?
	       vBitNodes_5$dataOut_get :
	       ffI$D_OUT[5] ;
  assign vBitNodes_5$EN_c2b_0_put = CAN_FIRE_RL_mkConnectionGetPut_8 ;
  assign vBitNodes_5$EN_c2b_1_put = CAN_FIRE_RL_mkConnectionGetPut_14 ;
  assign vBitNodes_5$EN_c2b_2_put = CAN_FIRE_RL_mkConnectionGetPut_16 ;
  assign vBitNodes_5$EN_b2c_get = CAN_FIRE_RL_rlConnect_5 ;
  assign vBitNodes_5$EN_codeIn_put =
	     WILL_FIRE_RL_rlEvaluateOutput && fnCheckDecodedWord___d200 ||
	     WILL_FIRE_RL_rlPutCodeWordIn ;
  assign vBitNodes_5$EN_dataOut_get = CAN_FIRE_RL_rlEvaluateOutput ;

  // submodule vBitNodes_6
  assign vBitNodes_6$c2b_0_put = vCheckNodes_3$c2b_2_get ;
  assign vBitNodes_6$c2b_1_put = vCheckNodes_5$c2b_2_get ;
  assign vBitNodes_6$c2b_2_put = vCheckNodes_6$c2b_2_get ;
  assign vBitNodes_6$codeIn_put =
	     MUX_vBitNodes_0$codeIn_put_1__SEL_1 ?
	       vBitNodes_6$dataOut_get :
	       ffI$D_OUT[6] ;
  assign vBitNodes_6$EN_c2b_0_put = CAN_FIRE_RL_mkConnectionGetPut_11 ;
  assign vBitNodes_6$EN_c2b_1_put = CAN_FIRE_RL_mkConnectionGetPut_17 ;
  assign vBitNodes_6$EN_c2b_2_put = CAN_FIRE_RL_mkConnectionGetPut_20 ;
  assign vBitNodes_6$EN_b2c_get = CAN_FIRE_RL_rlConnect_6 ;
  assign vBitNodes_6$EN_codeIn_put =
	     WILL_FIRE_RL_rlEvaluateOutput && fnCheckDecodedWord___d200 ||
	     WILL_FIRE_RL_rlPutCodeWordIn ;
  assign vBitNodes_6$EN_dataOut_get = CAN_FIRE_RL_rlEvaluateOutput ;

  // submodule vCheckNodes_0
  assign vCheckNodes_0$b2c_0_put = vBitNodes_0$b2c_get ;
  assign vCheckNodes_0$b2c_1_put = vBitNodes_1$b2c_get ;
  assign vCheckNodes_0$b2c_2_put = vBitNodes_3$b2c_get ;
  assign vCheckNodes_0$EN_b2c_0_put = CAN_FIRE_RL_rlConnect ;
  assign vCheckNodes_0$EN_b2c_1_put = CAN_FIRE_RL_rlConnect_1 ;
  assign vCheckNodes_0$EN_b2c_2_put = CAN_FIRE_RL_rlConnect_3 ;
  assign vCheckNodes_0$EN_c2b_0_get = CAN_FIRE_RL_mkConnectionGetPut ;
  assign vCheckNodes_0$EN_c2b_1_get = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign vCheckNodes_0$EN_c2b_2_get = CAN_FIRE_RL_mkConnectionGetPut_2 ;

  // submodule vCheckNodes_1
  assign vCheckNodes_1$b2c_0_put = vBitNodes_1$b2c_get ;
  assign vCheckNodes_1$b2c_1_put = vBitNodes_2$b2c_get ;
  assign vCheckNodes_1$b2c_2_put = vBitNodes_4$b2c_get ;
  assign vCheckNodes_1$EN_b2c_0_put = CAN_FIRE_RL_rlConnect_1 ;
  assign vCheckNodes_1$EN_b2c_1_put = CAN_FIRE_RL_rlConnect_2 ;
  assign vCheckNodes_1$EN_b2c_2_put = CAN_FIRE_RL_rlConnect_4 ;
  assign vCheckNodes_1$EN_c2b_0_get = CAN_FIRE_RL_mkConnectionGetPut_3 ;
  assign vCheckNodes_1$EN_c2b_1_get = CAN_FIRE_RL_mkConnectionGetPut_4 ;
  assign vCheckNodes_1$EN_c2b_2_get = CAN_FIRE_RL_mkConnectionGetPut_5 ;

  // submodule vCheckNodes_2
  assign vCheckNodes_2$b2c_0_put = vBitNodes_2$b2c_get ;
  assign vCheckNodes_2$b2c_1_put = vBitNodes_3$b2c_get ;
  assign vCheckNodes_2$b2c_2_put = vBitNodes_5$b2c_get ;
  assign vCheckNodes_2$EN_b2c_0_put = CAN_FIRE_RL_rlConnect_2 ;
  assign vCheckNodes_2$EN_b2c_1_put = CAN_FIRE_RL_rlConnect_3 ;
  assign vCheckNodes_2$EN_b2c_2_put = CAN_FIRE_RL_rlConnect_5 ;
  assign vCheckNodes_2$EN_c2b_0_get = CAN_FIRE_RL_mkConnectionGetPut_6 ;
  assign vCheckNodes_2$EN_c2b_1_get = CAN_FIRE_RL_mkConnectionGetPut_7 ;
  assign vCheckNodes_2$EN_c2b_2_get = CAN_FIRE_RL_mkConnectionGetPut_8 ;

  // submodule vCheckNodes_3
  assign vCheckNodes_3$b2c_0_put = vBitNodes_3$b2c_get ;
  assign vCheckNodes_3$b2c_1_put = vBitNodes_4$b2c_get ;
  assign vCheckNodes_3$b2c_2_put = vBitNodes_6$b2c_get ;
  assign vCheckNodes_3$EN_b2c_0_put = CAN_FIRE_RL_rlConnect_3 ;
  assign vCheckNodes_3$EN_b2c_1_put = CAN_FIRE_RL_rlConnect_4 ;
  assign vCheckNodes_3$EN_b2c_2_put = CAN_FIRE_RL_rlConnect_6 ;
  assign vCheckNodes_3$EN_c2b_0_get = CAN_FIRE_RL_mkConnectionGetPut_9 ;
  assign vCheckNodes_3$EN_c2b_1_get = CAN_FIRE_RL_mkConnectionGetPut_10 ;
  assign vCheckNodes_3$EN_c2b_2_get = CAN_FIRE_RL_mkConnectionGetPut_11 ;

  // submodule vCheckNodes_4
  assign vCheckNodes_4$b2c_0_put = vBitNodes_0$b2c_get ;
  assign vCheckNodes_4$b2c_1_put = vBitNodes_4$b2c_get ;
  assign vCheckNodes_4$b2c_2_put = vBitNodes_5$b2c_get ;
  assign vCheckNodes_4$EN_b2c_0_put = CAN_FIRE_RL_rlConnect ;
  assign vCheckNodes_4$EN_b2c_1_put = CAN_FIRE_RL_rlConnect_4 ;
  assign vCheckNodes_4$EN_b2c_2_put = CAN_FIRE_RL_rlConnect_5 ;
  assign vCheckNodes_4$EN_c2b_0_get = CAN_FIRE_RL_mkConnectionGetPut_12 ;
  assign vCheckNodes_4$EN_c2b_1_get = CAN_FIRE_RL_mkConnectionGetPut_13 ;
  assign vCheckNodes_4$EN_c2b_2_get = CAN_FIRE_RL_mkConnectionGetPut_14 ;

  // submodule vCheckNodes_5
  assign vCheckNodes_5$b2c_0_put = vBitNodes_1$b2c_get ;
  assign vCheckNodes_5$b2c_1_put = vBitNodes_5$b2c_get ;
  assign vCheckNodes_5$b2c_2_put = vBitNodes_6$b2c_get ;
  assign vCheckNodes_5$EN_b2c_0_put = CAN_FIRE_RL_rlConnect_1 ;
  assign vCheckNodes_5$EN_b2c_1_put = CAN_FIRE_RL_rlConnect_5 ;
  assign vCheckNodes_5$EN_b2c_2_put = CAN_FIRE_RL_rlConnect_6 ;
  assign vCheckNodes_5$EN_c2b_0_get = CAN_FIRE_RL_mkConnectionGetPut_15 ;
  assign vCheckNodes_5$EN_c2b_1_get = CAN_FIRE_RL_mkConnectionGetPut_16 ;
  assign vCheckNodes_5$EN_c2b_2_get = CAN_FIRE_RL_mkConnectionGetPut_17 ;

  // submodule vCheckNodes_6
  assign vCheckNodes_6$b2c_0_put = vBitNodes_0$b2c_get ;
  assign vCheckNodes_6$b2c_1_put = vBitNodes_2$b2c_get ;
  assign vCheckNodes_6$b2c_2_put = vBitNodes_6$b2c_get ;
  assign vCheckNodes_6$EN_b2c_0_put = CAN_FIRE_RL_rlConnect ;
  assign vCheckNodes_6$EN_b2c_1_put = CAN_FIRE_RL_rlConnect_2 ;
  assign vCheckNodes_6$EN_b2c_2_put = CAN_FIRE_RL_rlConnect_6 ;
  assign vCheckNodes_6$EN_c2b_0_get = CAN_FIRE_RL_mkConnectionGetPut_18 ;
  assign vCheckNodes_6$EN_c2b_1_get = CAN_FIRE_RL_mkConnectionGetPut_19 ;
  assign vCheckNodes_6$EN_c2b_2_get = CAN_FIRE_RL_mkConnectionGetPut_20 ;

  // remaining internal signals
  module_fnCheckDecodedWord instance_fnCheckDecodedWord_0(.fnCheckDecodedWord_b({ { { vBitNodes_6$dataOut_get,
										      vBitNodes_5$dataOut_get,
										      vBitNodes_4$dataOut_get },
										    vBitNodes_3$dataOut_get,
										    vBitNodes_2$dataOut_get },
										  vBitNodes_1$dataOut_get,
										  vBitNodes_0$dataOut_get }),
							  .fnCheckDecodedWord(fnCheckDecodedWord___d200));
  assign vBitNodes_0_RDY_codeIn_put__41_AND_vBitNodes_1_ETC___d178 =
	     vBitNodes_0$RDY_codeIn_put && vBitNodes_1$RDY_codeIn_put &&
	     vBitNodes_2$RDY_codeIn_put &&
	     vBitNodes_3$RDY_codeIn_put &&
	     vBitNodes_4$RDY_codeIn_put &&
	     vBitNodes_5$RDY_codeIn_put &&
	     vBitNodes_6$RDY_codeIn_put ;
  assign vBitNodes_1_RDY_codeIn_put__42_AND_vBitNodes_2_ETC___d154 =
	     vBitNodes_1$RDY_codeIn_put && vBitNodes_2$RDY_codeIn_put &&
	     vBitNodes_3$RDY_codeIn_put &&
	     vBitNodes_4$RDY_codeIn_put &&
	     vBitNodes_5$RDY_codeIn_put &&
	     vBitNodes_6$RDY_codeIn_put &&
	     ffI$EMPTY_N ;
  assign vBitNodes_2_RDY_dataOut_get__68_AND_vBitNodes__ETC___d185 =
	     vBitNodes_2$RDY_dataOut_get && vBitNodes_3$RDY_dataOut_get &&
	     vBitNodes_4$RDY_dataOut_get &&
	     vBitNodes_5$RDY_dataOut_get &&
	     vBitNodes_6$RDY_dataOut_get &&
	     vBitNodes_0_RDY_codeIn_put__41_AND_vBitNodes_1_ETC___d178 &&
	     ffO$FULL_N ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rgIdle <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (rgIdle$EN) rgIdle <= `BSV_ASSIGNMENT_DELAY rgIdle$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rgIdle = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkLdpcCore

