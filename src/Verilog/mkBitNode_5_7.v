//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Fri Mar 22 16:10:17 IST 2019
//
//
// Ports:
// Name                         I/O  size props
// b2c                            O     7 reg
// nodeId                         I     8 unused
// CLK                            I     1 clock
// RST_N                          I     1 unused
// c2b_x                          I     5 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkBitNode_5_7(nodeId,
		     CLK,
		     RST_N,

		     c2b_x,

		     b2c);
  input  [7 : 0] nodeId;
  input  CLK;
  input  RST_N;

  // action method c2b
  input  [4 : 0] c2b_x;

  // value method b2c
  output [6 : 0] b2c;

  // signals for module outputs
  wire [6 : 0] b2c;

  // register rg_y
  reg [6 : 0] rg_y;
  wire [6 : 0] rg_y$D_IN;
  wire rg_y$EN;

  // rule scheduling signals
  wire CAN_FIRE_c2b, WILL_FIRE_c2b;

  // action method c2b
  assign CAN_FIRE_c2b = 1'd1 ;
  assign WILL_FIRE_c2b = 1'd1 ;

  // value method b2c
  assign b2c = rg_y ;

  // register rg_y
  assign rg_y$D_IN = { 2'd0, c2b_x } ;
  assign rg_y$EN = 1'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (rg_y$EN) rg_y <= `BSV_ASSIGNMENT_DELAY rg_y$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_y = 7'h2A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkBitNode_5_7

