/* Generated by Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os) */

(* src = "lib/FIFO2_1.v:51" *)
module FIFO2_1(CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR);
  (* src = "lib/FIFO2_1.v:133" *)
  wire ag_00;
  (* src = "lib/FIFO2_1.v:133" *)
  wire ag_01;
  (* src = "lib/FIFO2_1.v:104" *)
  wire ag_02;
  (* src = "lib/FIFO2_1.v:104" *)
  wire ag_03;
  wire ag_04;
  wire ag_05;
  wire ag_06;
  wire ag_07;
  wire ag_08;
  wire ag_09;
  wire ag_10;
  wire ag_11;
  wire ag_12;
  wire ag_13;
  wire ag_14;
  wire ag_15;
  wire ag_16;
  wire ag_17;
  wire ag_18;
  wire ag_19;
  wire ag_20;
  wire ag_21;
  wire ag_22;
  wire ag_23;
  wire ag_24;
  wire ag_25;
  wire ag_26;
  wire ag_27;
  wire ag_28;
  wire ag_29;
  wire ag_30;
  wire ag_31;
  (* src = "lib/FIFO2_1.v:64" *)
  input CLK;
  (* src = "lib/FIFO2_1.v:69" *)
  input CLR;
  (* src = "lib/FIFO2_1.v:68" *)
  input DEQ;
  (* src = "lib/FIFO2_1.v:66" *)
  input D_IN;
  (* src = "lib/FIFO2_1.v:73" *)
  output D_OUT;
  (* src = "lib/FIFO2_1.v:72" *)
  output EMPTY_N;
  (* src = "lib/FIFO2_1.v:67" *)
  input ENQ;
  (* src = "lib/FIFO2_1.v:71" *)
  output FULL_N;
  (* src = "lib/FIFO2_1.v:65" *)
  input RST;
  (* src = "lib/FIFO2_1.v:77" *)
  wire data0_reg;
  (* src = "lib/FIFO2_1.v:78" *)
  wire data1_reg;
  (* src = "lib/FIFO2_1.v:76" *)
  wire empty_reg;
  (* src = "lib/FIFO2_1.v:75" *)
  wire full_reg;
  std_inv ag_32 (
    .a(data1_reg),
    .y(ag_04)
  );
  std_nand2 ag_33 (
    .a(ENQ),
    .b(empty_reg),
    .y(ag_05)
  );
  std_nor2 ag_34 (
    .a(ag_05),
    .b(D_IN),
    .y(ag_06)
  );
  std_aoi ag_35 (
    .a(ag_05),
    .b(ag_04),
    .c(ag_06),
    .y(ag_01)
  );
  std_inv ag_36 (
    .a(ENQ),
    .y(ag_07)
  );
  std_nand2 ag_37 (
    .a(DEQ),
    .b(ag_07),
    .y(ag_08)
  );
  std_inv ag_38 (
    .a(DEQ),
    .y(ag_09)
  );
  std_nand2 ag_39 (
    .a(ag_09),
    .b(ENQ),
    .y(ag_10)
  );
  std_nand2 ag_40 (
    .a(ag_10),
    .b(ag_08),
    .y(ag_11)
  );
  std_nor2 ag_41 (
    .a(ag_11),
    .b(empty_reg),
    .y(ag_12)
  );
  std_inv ag_42 (
    .a(RST),
    .y(ag_13)
  );
  std_nor2 ag_43 (
    .a(ag_13),
    .b(CLR),
    .y(ag_14)
  );
  std_nor2 ag_44 (
    .a(ag_09),
    .b(ENQ),
    .y(ag_15)
  );
  std_nand2 ag_45 (
    .a(ag_15),
    .b(full_reg),
    .y(ag_16)
  );
  std_nand2 ag_46 (
    .a(ag_16),
    .b(ag_14),
    .y(ag_17)
  );
  std_nor2 ag_47 (
    .a(ag_17),
    .b(ag_12),
    .y(ag_02)
  );
  std_inv ag_48 (
    .a(full_reg),
    .y(ag_18)
  );
  std_nand3 ag_49 (
    .a(ag_10),
    .b(ag_08),
    .c(ag_18),
    .y(ag_19)
  );
  std_nor2 ag_50 (
    .a(DEQ),
    .b(ag_07),
    .y(ag_20)
  );
  std_nand2 ag_51 (
    .a(ag_20),
    .b(empty_reg),
    .y(ag_21)
  );
  std_nand2 ag_52 (
    .a(ag_21),
    .b(ag_19),
    .y(ag_22)
  );
  std_nand2 ag_53 (
    .a(ag_22),
    .b(ag_14),
    .y(ag_03)
  );
  std_nand2 ag_54 (
    .a(DEQ),
    .b(ag_18),
    .y(ag_23)
  );
  std_inv ag_55 (
    .a(data0_reg),
    .y(ag_24)
  );
  std_aoi ag_56 (
    .a(ag_09),
    .b(empty_reg),
    .c(ag_07),
    .y(ag_25)
  );
  std_nor2 ag_57 (
    .a(ag_25),
    .b(ag_24),
    .y(ag_26)
  );
  std_nand2 ag_58 (
    .a(ag_26),
    .b(ag_23),
    .y(ag_27)
  );
  std_nor2 ag_59 (
    .a(ag_09),
    .b(full_reg),
    .y(ag_28)
  );
  std_nand2 ag_60 (
    .a(ag_28),
    .b(data1_reg),
    .y(ag_29)
  );
  std_nand2 ag_61 (
    .a(ag_18),
    .b(empty_reg),
    .y(ag_30)
  );
  std_nand3 ag_62 (
    .a(ag_30),
    .b(ag_25),
    .c(D_IN),
    .y(ag_31)
  );
  std_nand3 ag_63 (
    .a(ag_31),
    .b(ag_29),
    .c(ag_27),
    .y(ag_00)
  );
  d_ff ag_64 (
    .clk(CLK),
    .d(ag_00),
    .q(data0_reg)
  );
  d_ff ag_65 (
    .clk(CLK),
    .d(ag_01),
    .q(data1_reg)
  );
  d_ff ag_66 (
    .clk(CLK),
    .d(ag_03),
    .q(full_reg)
  );
  d_ff ag_67 (
    .clk(CLK),
    .d(ag_02),
    .q(empty_reg)
  );
  assign D_OUT = data0_reg;
  assign EMPTY_N = empty_reg;
  assign FULL_N = full_reg;
endmodule

(* top =  1  *)
(* src = "rtl/mkBitNode.v:47" *)
module mkBitNode(CLK, RST_N, c2b_0_put, EN_c2b_0_put, RDY_c2b_0_put, c2b_1_put, EN_c2b_1_put, RDY_c2b_1_put, c2b_2_put, EN_c2b_2_put, RDY_c2b_2_put, EN_b2c_get, b2c_get, RDY_b2c_get, codeIn_put, EN_codeIn_put, RDY_codeIn_put, EN_dataOut_get, dataOut_get, RDY_dataOut_get);
  wire ag_0;
  wire ag_1;
  wire ag_2;
  wire ag_3;
  (* src = "rtl/mkBitNode.v:171" *)
  wire CAN_FIRE_RL_rlProcessChkNodeResult;
  (* src = "rtl/mkBitNode.v:171" *)
  wire CAN_FIRE_RL_rlProcessNewData;
  (* src = "rtl/mkBitNode.v:171" *)
  wire CAN_FIRE_b2c_get;
  (* src = "rtl/mkBitNode.v:171" *)
  wire CAN_FIRE_c2b_0_put;
  (* src = "rtl/mkBitNode.v:171" *)
  wire CAN_FIRE_c2b_1_put;
  (* src = "rtl/mkBitNode.v:171" *)
  wire CAN_FIRE_c2b_2_put;
  (* src = "rtl/mkBitNode.v:171" *)
  wire CAN_FIRE_codeIn_put;
  (* src = "rtl/mkBitNode.v:171" *)
  wire CAN_FIRE_dataOut_get;
  (* src = "rtl/mkBitNode.v:73" *)
  input CLK;
  (* src = "rtl/mkBitNode.v:92" *)
  input EN_b2c_get;
  (* src = "rtl/mkBitNode.v:78" *)
  input EN_c2b_0_put;
  (* src = "rtl/mkBitNode.v:83" *)
  input EN_c2b_1_put;
  (* src = "rtl/mkBitNode.v:88" *)
  input EN_c2b_2_put;
  (* src = "rtl/mkBitNode.v:98" *)
  input EN_codeIn_put;
  (* src = "rtl/mkBitNode.v:102" *)
  input EN_dataOut_get;
  (* src = "rtl/mkBitNode.v:94" *)
  output RDY_b2c_get;
  (* src = "rtl/mkBitNode.v:79" *)
  output RDY_c2b_0_put;
  (* src = "rtl/mkBitNode.v:84" *)
  output RDY_c2b_1_put;
  (* src = "rtl/mkBitNode.v:89" *)
  output RDY_c2b_2_put;
  (* src = "rtl/mkBitNode.v:99" *)
  output RDY_codeIn_put;
  (* src = "rtl/mkBitNode.v:104" *)
  output RDY_dataOut_get;
  (* src = "rtl/mkBitNode.v:74" *)
  input RST_N;
  (* src = "rtl/mkBitNode.v:171" *)
  wire WILL_FIRE_RL_rlProcessChkNodeResult;
  (* src = "rtl/mkBitNode.v:171" *)
  wire WILL_FIRE_RL_rlProcessNewData;
  (* src = "rtl/mkBitNode.v:171" *)
  wire WILL_FIRE_b2c_get;
  (* src = "rtl/mkBitNode.v:171" *)
  wire WILL_FIRE_c2b_0_put;
  (* src = "rtl/mkBitNode.v:171" *)
  wire WILL_FIRE_c2b_1_put;
  (* src = "rtl/mkBitNode.v:171" *)
  wire WILL_FIRE_c2b_2_put;
  (* src = "rtl/mkBitNode.v:171" *)
  wire WILL_FIRE_codeIn_put;
  (* src = "rtl/mkBitNode.v:171" *)
  wire WILL_FIRE_dataOut_get;
  (* src = "rtl/mkBitNode.v:93" *)
  output b2c_get;
  (* src = "rtl/mkBitNode.v:77" *)
  input c2b_0_put;
  (* src = "rtl/mkBitNode.v:82" *)
  input c2b_1_put;
  (* src = "rtl/mkBitNode.v:87" *)
  input c2b_2_put;
  (* src = "rtl/mkBitNode.v:97" *)
  input codeIn_put;
  (* src = "rtl/mkBitNode.v:103" *)
  output dataOut_get;
  (* src = "rtl/mkBitNode.v:117" *)
  wire sffB2C_DEQ ;
  (* src = "rtl/mkBitNode.v:117" *)
  wire sffB2C_D_IN ;
  (* src = "rtl/mkBitNode.v:117" *)
  wire sffB2C_D_OUT ;
  (* src = "rtl/mkBitNode.v:117" *)
  wire sffB2C_EMPTY_N ;
  (* src = "rtl/mkBitNode.v:117" *)
  wire sffB2C_ENQ ;
  (* src = "rtl/mkBitNode.v:117" *)
  wire sffB2C_FULL_N ;
  (* src = "rtl/mkBitNode.v:126" *)
  wire sffCodeIn_DEQ ;
  (* src = "rtl/mkBitNode.v:126" *)
  wire sffCodeIn_D_IN ;
  (* src = "rtl/mkBitNode.v:126" *)
  wire sffCodeIn_D_OUT ;
  (* src = "rtl/mkBitNode.v:126" *)
  wire sffCodeIn_EMPTY_N ;
  (* src = "rtl/mkBitNode.v:126" *)
  wire sffCodeIn_ENQ ;
  (* src = "rtl/mkBitNode.v:126" *)
  wire sffCodeIn_FULL_N ;
  (* src = "rtl/mkBitNode.v:135" *)
  wire sffDataOut_DEQ ;
  (* src = "rtl/mkBitNode.v:135" *)
  wire sffDataOut_D_IN ;
  (* src = "rtl/mkBitNode.v:135" *)
  wire sffDataOut_D_OUT ;
  (* src = "rtl/mkBitNode.v:135" *)
  wire sffDataOut_EMPTY_N ;
  (* src = "rtl/mkBitNode.v:135" *)
  wire sffDataOut_ENQ ;
  (* src = "rtl/mkBitNode.v:135" *)
  wire sffDataOut_FULL_N ;
  (* src = "rtl/mkBitNode.v:144" *)
  wire svffC2B_0_DEQ ;
  (* src = "rtl/mkBitNode.v:144" *)
  wire svffC2B_0_D_IN ;
  (* src = "rtl/mkBitNode.v:144" *)
  wire svffC2B_0_D_OUT ;
  (* src = "rtl/mkBitNode.v:144" *)
  wire svffC2B_0_EMPTY_N ;
  (* src = "rtl/mkBitNode.v:144" *)
  wire svffC2B_0_ENQ ;
  (* src = "rtl/mkBitNode.v:144" *)
  wire svffC2B_0_FULL_N ;
  (* src = "rtl/mkBitNode.v:153" *)
  wire svffC2B_1_DEQ ;
  (* src = "rtl/mkBitNode.v:153" *)
  wire svffC2B_1_D_IN ;
  (* src = "rtl/mkBitNode.v:153" *)
  wire svffC2B_1_D_OUT ;
  (* src = "rtl/mkBitNode.v:153" *)
  wire svffC2B_1_EMPTY_N ;
  (* src = "rtl/mkBitNode.v:153" *)
  wire svffC2B_1_ENQ ;
  (* src = "rtl/mkBitNode.v:153" *)
  wire svffC2B_1_FULL_N ;
  (* src = "rtl/mkBitNode.v:162" *)
  wire svffC2B_2_DEQ ;
  (* src = "rtl/mkBitNode.v:162" *)
  wire svffC2B_2_D_IN ;
  (* src = "rtl/mkBitNode.v:162" *)
  wire svffC2B_2_D_OUT ;
  (* src = "rtl/mkBitNode.v:162" *)
  wire svffC2B_2_EMPTY_N ;
  (* src = "rtl/mkBitNode.v:162" *)
  wire svffC2B_2_ENQ ;
  (* src = "rtl/mkBitNode.v:162" *)
  wire svffC2B_2_FULL_N ;
  std_inv ag_4 (
    .a(sffCodeIn_EMPTY_N ),
    .y(ag_3)
  );
  std_inv ag_5 (
    .a(sffB2C_FULL_N ),
    .y(ag_0)
  );
  std_nor2 ag_6 (
    .a(ag_0),
    .b(ag_3),
    .y(sffB2C_ENQ )
  );
  std_nand2 ag_7 (
    .a(svffC2B_1_EMPTY_N ),
    .b(svffC2B_0_EMPTY_N ),
    .y(ag_1)
  );
  std_nand2 ag_8 (
    .a(sffDataOut_FULL_N ),
    .b(svffC2B_2_EMPTY_N ),
    .y(ag_2)
  );
  std_nor2 ag_9 (
    .a(ag_2),
    .b(ag_1),
    .y(sffDataOut_ENQ )
  );
  (* src = "rtl/mkBitNode.v:223" *)
  FIFO2_1 ffB2C (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(EN_b2c_get),
    .D_IN(sffB2C_D_IN ),
    .D_OUT(sffB2C_D_OUT ),
    .EMPTY_N(sffB2C_EMPTY_N ),
    .ENQ(sffB2C_ENQ ),
    .FULL_N(sffB2C_FULL_N ),
    .RST(RST_N)
  );
  (* src = "rtl/mkBitNode.v:234" *)
  FIFO2_1 ffCodeIn (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(sffB2C_ENQ ),
    .D_IN(codeIn_put),
    .D_OUT(sffB2C_D_IN ),
    .EMPTY_N(sffCodeIn_EMPTY_N ),
    .ENQ(EN_codeIn_put),
    .FULL_N(sffCodeIn_FULL_N ),
    .RST(RST_N)
  );
  (* src = "rtl/mkBitNode.v:245" *)
  FIFO2_1 ffDataOut (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(EN_dataOut_get),
    .D_IN(sffDataOut_D_IN ),
    .D_OUT(sffDataOut_D_OUT ),
    .EMPTY_N(sffDataOut_EMPTY_N ),
    .ENQ(sffDataOut_ENQ ),
    .FULL_N(sffDataOut_FULL_N ),
    .RST(RST_N)
  );
  (* src = "rtl/mkBitNode.v:316" *)
  module_fnBitNodeCore instance_fnBitNodeCore_0 (
    .fnBitNodeCore(sffDataOut_D_IN ),
    .sfnBitNodeCore_i_0 (svffC2B_0_D_OUT ),
    .sfnBitNodeCore_i_1 (svffC2B_1_D_OUT ),
    .sfnBitNodeCore_i_2 (svffC2B_2_D_OUT )
  );
  (* src = "rtl/mkBitNode.v:256" *)
  FIFO2_1 vffC2B_0 (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(sffDataOut_ENQ ),
    .D_IN(c2b_0_put),
    .D_OUT(svffC2B_0_D_OUT ),
    .EMPTY_N(svffC2B_0_EMPTY_N ),
    .ENQ(EN_c2b_0_put),
    .FULL_N(svffC2B_0_FULL_N ),
    .RST(RST_N)
  );
  (* src = "rtl/mkBitNode.v:267" *)
  FIFO2_1 vffC2B_1 (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(sffDataOut_ENQ ),
    .D_IN(c2b_1_put),
    .D_OUT(svffC2B_1_D_OUT ),
    .EMPTY_N(svffC2B_1_EMPTY_N ),
    .ENQ(EN_c2b_1_put),
    .FULL_N(svffC2B_1_FULL_N ),
    .RST(RST_N)
  );
  (* src = "rtl/mkBitNode.v:278" *)
  FIFO2_1 vffC2B_2 (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(sffDataOut_ENQ ),
    .D_IN(c2b_2_put),
    .D_OUT(svffC2B_2_D_OUT ),
    .EMPTY_N(svffC2B_2_EMPTY_N ),
    .ENQ(EN_c2b_2_put),
    .FULL_N(svffC2B_2_FULL_N ),
    .RST(RST_N)
  );
  assign CAN_FIRE_RL_rlProcessChkNodeResult = sffDataOut_ENQ ;
  assign CAN_FIRE_RL_rlProcessNewData = sffB2C_ENQ ;
  assign CAN_FIRE_b2c_get = sffB2C_EMPTY_N ;
  assign CAN_FIRE_c2b_0_put = svffC2B_0_FULL_N ;
  assign CAN_FIRE_c2b_1_put = svffC2B_1_FULL_N ;
  assign CAN_FIRE_c2b_2_put = svffC2B_2_FULL_N ;
  assign CAN_FIRE_codeIn_put = sffCodeIn_FULL_N ;
  assign CAN_FIRE_dataOut_get = sffDataOut_EMPTY_N ;
  assign RDY_b2c_get = sffB2C_EMPTY_N ;
  assign RDY_c2b_0_put = svffC2B_0_FULL_N ;
  assign RDY_c2b_1_put = svffC2B_1_FULL_N ;
  assign RDY_c2b_2_put = svffC2B_2_FULL_N ;
  assign RDY_codeIn_put = sffCodeIn_FULL_N ;
  assign RDY_dataOut_get = sffDataOut_EMPTY_N ;
  assign WILL_FIRE_RL_rlProcessChkNodeResult = sffDataOut_ENQ ;
  assign WILL_FIRE_RL_rlProcessNewData = sffB2C_ENQ ;
  assign WILL_FIRE_b2c_get = EN_b2c_get;
  assign WILL_FIRE_c2b_0_put = EN_c2b_0_put;
  assign WILL_FIRE_c2b_1_put = EN_c2b_1_put;
  assign WILL_FIRE_c2b_2_put = EN_c2b_2_put;
  assign WILL_FIRE_codeIn_put = EN_codeIn_put;
  assign WILL_FIRE_dataOut_get = EN_dataOut_get;
  assign b2c_get = sffB2C_D_OUT ;
  assign dataOut_get = sffDataOut_D_OUT ;
  assign sffB2C_DEQ  = EN_b2c_get;
  assign sffCodeIn_DEQ  = sffB2C_ENQ ;
  assign sffCodeIn_D_IN  = codeIn_put;
  assign sffCodeIn_D_OUT  = sffB2C_D_IN ;
  assign sffCodeIn_ENQ  = EN_codeIn_put;
  assign sffDataOut_DEQ  = EN_dataOut_get;
  assign svffC2B_0_DEQ  = sffDataOut_ENQ ;
  assign svffC2B_0_D_IN  = c2b_0_put;
  assign svffC2B_0_ENQ  = EN_c2b_0_put;
  assign svffC2B_1_DEQ  = sffDataOut_ENQ ;
  assign svffC2B_1_D_IN  = c2b_1_put;
  assign svffC2B_1_ENQ  = EN_c2b_1_put;
  assign svffC2B_2_DEQ  = sffDataOut_ENQ ;
  assign svffC2B_2_D_IN  = c2b_2_put;
  assign svffC2B_2_ENQ  = EN_c2b_2_put;
endmodule

(* src = "rtl/module_fnBitNodeCore.v:30" *)
module module_fnBitNodeCore(sfnBitNodeCore_i_0 , sfnBitNodeCore_i_1 , sfnBitNodeCore_i_2 , fnBitNodeCore);
  wire ag_0;
  wire ag_1;
  (* src = "rtl/module_fnBitNodeCore.v:34" *)
  output fnBitNodeCore;
  (* src = "rtl/module_fnBitNodeCore.v:33" *)
  input sfnBitNodeCore_i_0 ;
  (* src = "rtl/module_fnBitNodeCore.v:33" *)
  input sfnBitNodeCore_i_1 ;
  (* src = "rtl/module_fnBitNodeCore.v:33" *)
  input sfnBitNodeCore_i_2 ;
  std_nor2 ag_2 (
    .a(sfnBitNodeCore_i_0 ),
    .b(sfnBitNodeCore_i_1 ),
    .y(ag_0)
  );
  std_aoi ag_3 (
    .a(sfnBitNodeCore_i_0 ),
    .b(sfnBitNodeCore_i_1 ),
    .c(sfnBitNodeCore_i_2 ),
    .y(ag_1)
  );
  std_nor2 ag_4 (
    .a(ag_1),
    .b(ag_0),
    .y(fnBitNodeCore)
  );
endmodule
