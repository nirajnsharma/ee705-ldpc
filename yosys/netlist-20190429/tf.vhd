--------------------------------------------------------------
--------------------------------------------------------------
--                                                          --
-- This VHDL file has been generated by the verilog2vhdl    --
-- tool.                                                    --
-- Contact help@edautils.com  for support/info.--
--                                                          --
--                                                          --
--------------------------------------------------------------
--------------------------------------------------------------
--
--
-- Assumptions: 
--         (1) All the parameters are of type INTEGER, and hence the translated generics are of this type
--
--
-- Generated by : singh on 30/4/19 12:43 PM
--
--
library ieee;
use ieee.std_logic_1164.all;
package vl2vh_common_pack is 
    type vl2vh_memory_type is      array  ( natural range <> , natural range <>  )  of std_logic ;
    function vl2vh_ternary_func(  constant cond : Boolean;  constant trueval : std_logic;  constant falseval : std_logic)  return std_logic; 
    function vl2vh_ternary_func(  constant cond : Boolean;  constant trueval : std_logic_vector;  constant falseval : std_logic_vector)  return std_logic_vector; 
end package; 




package body vl2vh_common_pack is 
    function vl2vh_ternary_func(  constant cond : Boolean;  constant trueval : std_logic;  constant falseval : std_logic)  return std_logic is 
    begin
        if ( cond ) then 
             return trueval;
        else 
             return falseval;
        end if;
    end;
    function vl2vh_ternary_func(  constant cond : Boolean;  constant trueval : std_logic_vector;  constant falseval : std_logic_vector)  return std_logic_vector is 
    begin
        if ( cond ) then 
             return trueval;
        else 
             return falseval;
        end if;
    end;
end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity std_nand2 is 
     port (
        a :  inout std_logic;
        b :  inout std_logic;
        y :  inout std_logic
    );
end entity; 


architecture rtl of std_nand2 is 
    begin 
    end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity std_nor2 is 
     port (
        a :  inout std_logic;
        b :  inout std_logic;
        y :  inout std_logic
    );
end entity; 


architecture rtl of std_nor2 is 
    begin 
    end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity std_inv is 
     port (
        a :  inout std_logic;
        y :  inout std_logic
    );
end entity; 


architecture rtl of std_inv is 
    begin 
    end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity std_nor3 is 
     port (
        a :  inout std_logic;
        b :  inout std_logic;
        c :  inout std_logic;
        y :  inout std_logic
    );
end entity; 


architecture rtl of std_nor3 is 
    begin 
    end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity std_nand3 is 
     port (
        a :  inout std_logic;
        b :  inout std_logic;
        c :  in std_logic;
        y :  inout std_logic
    );
end entity; 


architecture rtl of std_nand3 is 
    begin 
    end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity std_aoi is 
     port (
        a :  inout std_logic;
        b :  inout std_logic;
        c :  inout std_logic;
        y :  inout std_logic
    );
end entity; 


architecture rtl of std_aoi is 
    begin 
    end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity d_ff is 
     port (
        clk :  in std_logic;
        d :  inout std_logic;
        q :  inout std_logic
    );
end entity; 


architecture rtl of d_ff is 
    begin 
    end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity FIFO2_7 is 
     port (
        CLK :  in std_logic;
        CLR :  in std_logic;
        DEQ :  in std_logic;
        SD_IN_0 :  in std_logic;
        SD_IN_1 :  in std_logic;
        SD_IN_2 :  in std_logic;
        SD_IN_3 :  in std_logic;
        SD_IN_4 :  in std_logic;
        SD_IN_5 :  in std_logic;
        SD_IN_6 :  in std_logic;
        SD_OUT_0 :  out std_logic;
        SD_OUT_1 :  out std_logic;
        SD_OUT_2 :  out std_logic;
        SD_OUT_3 :  out std_logic;
        SD_OUT_4 :  out std_logic;
        SD_OUT_5 :  out std_logic;
        SD_OUT_6 :  out std_logic;
        EMPTY_N :  out std_logic;
        ENQ :  in std_logic;
        FULL_N :  out std_logic;
        RST :  in std_logic
    );
end entity; 


architecture rtl of FIFO2_7 is 
    signal ag_000 : std_logic;
    signal ag_001 : std_logic;
    signal ag_002 : std_logic;
    signal ag_003 : std_logic;
    signal ag_004 : std_logic;
    signal ag_005 : std_logic;
    signal ag_006 : std_logic;
    signal ag_007 : std_logic;
    signal ag_008 : std_logic;
    signal ag_009 : std_logic;
    signal ag_010 : std_logic;
    signal ag_011 : std_logic;
    signal ag_012 : std_logic;
    signal ag_013 : std_logic;
    signal ag_014 : std_logic;
    signal ag_015 : std_logic;
    signal ag_016 : std_logic;
    signal ag_017 : std_logic;
    signal ag_018 : std_logic;
    signal ag_019 : std_logic;
    signal ag_020 : std_logic;
    signal ag_021 : std_logic;
    signal ag_022 : std_logic;
    signal ag_023 : std_logic;
    signal ag_024 : std_logic;
    signal ag_025 : std_logic;
    signal ag_026 : std_logic;
    signal ag_027 : std_logic;
    signal ag_028 : std_logic;
    signal ag_029 : std_logic;
    signal ag_030 : std_logic;
    signal ag_031 : std_logic;
    signal ag_032 : std_logic;
    signal ag_033 : std_logic;
    signal ag_034 : std_logic;
    signal ag_035 : std_logic;
    signal ag_036 : std_logic;
    signal ag_037 : std_logic;
    signal ag_038 : std_logic;
    signal ag_039 : std_logic;
    signal ag_040 : std_logic;
    signal ag_041 : std_logic;
    signal ag_042 : std_logic;
    signal ag_043 : std_logic;
    signal ag_044 : std_logic;
    signal ag_045 : std_logic;
    signal ag_046 : std_logic;
    signal ag_047 : std_logic;
    signal ag_048 : std_logic;
    signal ag_049 : std_logic;
    signal ag_050 : std_logic;
    signal ag_051 : std_logic;
    signal ag_052 : std_logic;
    signal ag_053 : std_logic;
    signal ag_054 : std_logic;
    signal ag_055 : std_logic;
    signal ag_056 : std_logic;
    signal ag_057 : std_logic;
    signal ag_058 : std_logic;
    signal ag_059 : std_logic;
    signal ag_060 : std_logic;
    signal ag_061 : std_logic;
    signal ag_062 : std_logic;
    signal ag_063 : std_logic;
    signal ag_064 : std_logic;
    signal ag_065 : std_logic;
    signal ag_066 : std_logic;
    signal ag_067 : std_logic;
    signal ag_068 : std_logic;
    signal ag_069 : std_logic;
    signal ag_070 : std_logic;
    signal ag_071 : std_logic;
    signal sdata0_reg_0 : std_logic;
    signal sdata0_reg_1 : std_logic;
    signal sdata0_reg_2 : std_logic;
    signal sdata0_reg_3 : std_logic;
    signal sdata0_reg_4 : std_logic;
    signal sdata0_reg_5 : std_logic;
    signal sdata0_reg_6 : std_logic;
    signal sdata1_reg_0 : std_logic;
    signal sdata1_reg_1 : std_logic;
    signal sdata1_reg_2 : std_logic;
    signal sdata1_reg_3 : std_logic;
    signal sdata1_reg_4 : std_logic;
    signal sdata1_reg_5 : std_logic;
    signal sdata1_reg_6 : std_logic;
    signal empty_reg : std_logic;
    signal full_reg : std_logic;
    component std_inv is 
         port (
            a :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_nand2 is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_nor2 is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_aoi is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            c :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_nand3 is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            c :  in std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_nor3 is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            c :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component d_ff is 
         port (
            clk :  in std_logic;
            d :  inout std_logic;
            q :  inout std_logic
        );
    end component; 
    begin 
        ag_072 : std_inv
            port map (
                a => sdata1_reg_0,
                y => ag_028
                );
        ag_073 : std_nand2
            port map (
                a => ENQ,
                b => empty_reg,
                y => ag_029
                );
        ag_074 : std_nor2
            port map (
                a => ag_029,
                b => SD_IN_0,
                y => ag_030
                );
        ag_075 : std_aoi
            port map (
                a => ag_029,
                b => ag_028,
                c => ag_030,
                y => ag_007
                );
        ag_076 : std_inv
            port map (
                a => sdata1_reg_1,
                y => ag_031
                );
        ag_077 : std_nor2
            port map (
                a => ag_029,
                b => SD_IN_1,
                y => ag_032
                );
        ag_078 : std_aoi
            port map (
                a => ag_029,
                b => ag_031,
                c => ag_032,
                y => ag_008
                );
        ag_079 : std_inv
            port map (
                a => sdata1_reg_2,
                y => ag_033
                );
        ag_080 : std_nor2
            port map (
                a => ag_029,
                b => SD_IN_2,
                y => ag_034
                );
        ag_081 : std_aoi
            port map (
                a => ag_029,
                b => ag_033,
                c => ag_034,
                y => ag_009
                );
        ag_082 : std_inv
            port map (
                a => sdata1_reg_3,
                y => ag_035
                );
        ag_083 : std_nor2
            port map (
                a => ag_029,
                b => SD_IN_3,
                y => ag_036
                );
        ag_084 : std_aoi
            port map (
                a => ag_029,
                b => ag_035,
                c => ag_036,
                y => ag_010
                );
        ag_085 : std_inv
            port map (
                a => sdata1_reg_4,
                y => ag_037
                );
        ag_086 : std_nor2
            port map (
                a => ag_029,
                b => SD_IN_4,
                y => ag_038
                );
        ag_087 : std_aoi
            port map (
                a => ag_029,
                b => ag_037,
                c => ag_038,
                y => ag_011
                );
        ag_088 : std_inv
            port map (
                a => sdata1_reg_5,
                y => ag_039
                );
        ag_089 : std_nor2
            port map (
                a => ag_029,
                b => SD_IN_5,
                y => ag_040
                );
        ag_090 : std_aoi
            port map (
                a => ag_029,
                b => ag_039,
                c => ag_040,
                y => ag_012
                );
        ag_091 : std_inv
            port map (
                a => sdata1_reg_6,
                y => ag_041
                );
        ag_092 : std_nor2
            port map (
                a => ag_029,
                b => SD_IN_6,
                y => ag_042
                );
        ag_093 : std_aoi
            port map (
                a => ag_029,
                b => ag_041,
                c => ag_042,
                y => ag_013
                );
        ag_094 : std_inv
            port map (
                a => full_reg,
                y => ag_043
                );
        ag_095 : std_inv
            port map (
                a => ENQ,
                y => ag_044
                );
        ag_096 : std_nand2
            port map (
                a => DEQ,
                b => ag_044,
                y => ag_045
                );
        ag_097 : std_nor2
            port map (
                a => ag_045,
                b => ag_043,
                y => ag_046
                );
        ag_098 : std_inv
            port map (
                a => empty_reg,
                y => ag_047
                );
        ag_099 : std_inv
            port map (
                a => DEQ,
                y => ag_048
                );
        ag_100 : std_nand2
            port map (
                a => ag_048,
                b => ENQ,
                y => ag_049
                );
        ag_101 : std_nand3
            port map (
                a => ag_049,
                b => ag_045,
                c => ag_047,
                y => ag_050
                );
        ag_102 : std_inv
            port map (
                a => RST,
                y => ag_051
                );
        ag_103 : std_nor2
            port map (
                a => ag_051,
                b => CLR,
                y => ag_052
                );
        ag_104 : std_nand2
            port map (
                a => ag_052,
                b => ag_050,
                y => ag_053
                );
        ag_105 : std_nor2
            port map (
                a => ag_053,
                b => ag_046,
                y => ag_014
                );
        ag_106 : std_nand3
            port map (
                a => ag_049,
                b => ag_045,
                c => ag_043,
                y => ag_054
                );
        ag_107 : std_nor2
            port map (
                a => DEQ,
                b => ag_047,
                y => ag_055
                );
        ag_108 : std_nand2
            port map (
                a => ag_055,
                b => ENQ,
                y => ag_056
                );
        ag_109 : std_nand2
            port map (
                a => ag_056,
                b => ag_054,
                y => ag_057
                );
        ag_110 : std_nand2
            port map (
                a => ag_057,
                b => ag_052,
                y => ag_015
                );
        ag_111 : std_nor2
            port map (
                a => full_reg,
                b => ag_047,
                y => ag_058
                );
        ag_112 : std_nor3
            port map (
                a => ag_058,
                b => ag_055,
                c => ag_044,
                y => ag_059
                );
        ag_113 : std_nand2
            port map (
                a => ag_059,
                b => SD_IN_0,
                y => ag_060
                );
        ag_114 : std_nor2
            port map (
                a => ag_048,
                b => full_reg,
                y => ag_061
                );
        ag_115 : std_nand2
            port map (
                a => ag_061,
                b => sdata1_reg_0,
                y => ag_062
                );
        ag_116 : std_aoi
            port map (
                a => ag_048,
                b => empty_reg,
                c => ag_044,
                y => ag_063
                );
        ag_117 : std_nor2
            port map (
                a => ag_063,
                b => ag_061,
                y => ag_064
                );
        ag_118 : std_nand2
            port map (
                a => ag_064,
                b => sdata0_reg_0,
                y => ag_065
                );
        ag_119 : std_nand3
            port map (
                a => ag_065,
                b => ag_062,
                c => ag_060,
                y => ag_000
                );
        ag_120 : std_nand2
            port map (
                a => ag_059,
                b => SD_IN_1,
                y => ag_066
                );
        ag_121 : std_nand2
            port map (
                a => ag_061,
                b => sdata1_reg_1,
                y => ag_067
                );
        ag_122 : std_nand2
            port map (
                a => ag_064,
                b => sdata0_reg_1,
                y => ag_068
                );
        ag_123 : std_nand3
            port map (
                a => ag_068,
                b => ag_067,
                c => ag_066,
                y => ag_001
                );
        ag_124 : std_nand2
            port map (
                a => ag_064,
                b => sdata0_reg_2,
                y => ag_069
                );
        ag_125 : std_nand2
            port map (
                a => ag_061,
                b => sdata1_reg_2,
                y => ag_070
                );
        ag_126 : std_nand2
            port map (
                a => ag_059,
                b => SD_IN_2,
                y => ag_071
                );
        ag_127 : std_nand3
            port map (
                a => ag_071,
                b => ag_070,
                c => ag_069,
                y => ag_002
                );
        ag_128 : std_nand2
            port map (
                a => ag_059,
                b => SD_IN_3,
                y => ag_016
                );
        ag_129 : std_nand2
            port map (
                a => ag_061,
                b => sdata1_reg_3,
                y => ag_017
                );
        ag_130 : std_nand2
            port map (
                a => ag_064,
                b => sdata0_reg_3,
                y => ag_018
                );
        ag_131 : std_nand3
            port map (
                a => ag_018,
                b => ag_017,
                c => ag_016,
                y => ag_003
                );
        ag_132 : std_nand2
            port map (
                a => ag_059,
                b => SD_IN_4,
                y => ag_019
                );
        ag_133 : std_nand2
            port map (
                a => ag_061,
                b => sdata1_reg_4,
                y => ag_020
                );
        ag_134 : std_nand2
            port map (
                a => ag_064,
                b => sdata0_reg_4,
                y => ag_021
                );
        ag_135 : std_nand3
            port map (
                a => ag_021,
                b => ag_020,
                c => ag_019,
                y => ag_004
                );
        ag_136 : std_nand2
            port map (
                a => ag_059,
                b => SD_IN_5,
                y => ag_022
                );
        ag_137 : std_nand2
            port map (
                a => ag_061,
                b => sdata1_reg_5,
                y => ag_023
                );
        ag_138 : std_nand2
            port map (
                a => ag_064,
                b => sdata0_reg_5,
                y => ag_024
                );
        ag_139 : std_nand3
            port map (
                a => ag_024,
                b => ag_023,
                c => ag_022,
                y => ag_005
                );
        ag_140 : std_nand2
            port map (
                a => ag_059,
                b => SD_IN_6,
                y => ag_025
                );
        ag_141 : std_nand2
            port map (
                a => ag_061,
                b => sdata1_reg_6,
                y => ag_026
                );
        ag_142 : std_nand2
            port map (
                a => ag_064,
                b => sdata0_reg_6,
                y => ag_027
                );
        ag_143 : std_nand3
            port map (
                a => ag_027,
                b => ag_026,
                c => ag_025,
                y => ag_006
                );
        ag_144 : d_ff
            port map (
                clk => CLK,
                d => ag_000,
                q => sdata0_reg_0
                );
        ag_145 : d_ff
            port map (
                clk => CLK,
                d => ag_001,
                q => sdata0_reg_1
                );
        ag_146 : d_ff
            port map (
                clk => CLK,
                d => ag_002,
                q => sdata0_reg_2
                );
        ag_147 : d_ff
            port map (
                clk => CLK,
                d => ag_003,
                q => sdata0_reg_3
                );
        ag_148 : d_ff
            port map (
                clk => CLK,
                d => ag_004,
                q => sdata0_reg_4
                );
        ag_149 : d_ff
            port map (
                clk => CLK,
                d => ag_005,
                q => sdata0_reg_5
                );
        ag_150 : d_ff
            port map (
                clk => CLK,
                d => ag_006,
                q => sdata0_reg_6
                );
        ag_151 : d_ff
            port map (
                clk => CLK,
                d => ag_007,
                q => sdata1_reg_0
                );
        ag_152 : d_ff
            port map (
                clk => CLK,
                d => ag_008,
                q => sdata1_reg_1
                );
        ag_153 : d_ff
            port map (
                clk => CLK,
                d => ag_009,
                q => sdata1_reg_2
                );
        ag_154 : d_ff
            port map (
                clk => CLK,
                d => ag_010,
                q => sdata1_reg_3
                );
        ag_155 : d_ff
            port map (
                clk => CLK,
                d => ag_011,
                q => sdata1_reg_4
                );
        ag_156 : d_ff
            port map (
                clk => CLK,
                d => ag_012,
                q => sdata1_reg_5
                );
        ag_157 : d_ff
            port map (
                clk => CLK,
                d => ag_013,
                q => sdata1_reg_6
                );
        ag_158 : d_ff
            port map (
                clk => CLK,
                d => ag_015,
                q => full_reg
                );
        ag_159 : d_ff
            port map (
                clk => CLK,
                d => ag_014,
                q => empty_reg
                );
        SD_OUT_6 <= sdata0_reg_6;
        SD_OUT_5 <= sdata0_reg_5;
        SD_OUT_4 <= sdata0_reg_4;
        SD_OUT_3 <= sdata0_reg_3;
        SD_OUT_2 <= sdata0_reg_2;
        SD_OUT_1 <= sdata0_reg_1;
        SD_OUT_0 <= sdata0_reg_0;
        EMPTY_N <= empty_reg;
        FULL_N <= full_reg;
    end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity module_fnCheckDecodedWord is 
     port (
        fnCheckDecodedWord :  out std_logic;
        sfnCheckDecodedWord_b_0 :  in std_logic;
        sfnCheckDecodedWord_b_1 :  in std_logic;
        sfnCheckDecodedWord_b_2 :  in std_logic;
        sfnCheckDecodedWord_b_3 :  in std_logic;
        sfnCheckDecodedWord_b_4 :  in std_logic;
        sfnCheckDecodedWord_b_5 :  in std_logic;
        sfnCheckDecodedWord_b_6 :  in std_logic
    );
end entity; 


architecture rtl of module_fnCheckDecodedWord is 
    signal ag_00 : std_logic;
    signal ag_01 : std_logic;
    signal ag_02 : std_logic;
    signal ag_03 : std_logic;
    signal ag_04 : std_logic;
    signal ag_05 : std_logic;
    signal ag_06 : std_logic;
    signal ag_07 : std_logic;
    signal ag_08 : std_logic;
    signal ag_09 : std_logic;
    signal ag_10 : std_logic;
    signal ag_11 : std_logic;
    signal ag_12 : std_logic;
    signal ag_13 : std_logic;
    signal ag_14 : std_logic;
    signal ag_15 : std_logic;
    signal ag_16 : std_logic;
    signal ag_17 : std_logic;
    signal ag_18 : std_logic;
    signal ag_19 : std_logic;
    signal ag_20 : std_logic;
    signal ag_21 : std_logic;
    signal ag_22 : std_logic;
    signal ag_23 : std_logic;
    signal ag_24 : std_logic;
    signal ag_25 : std_logic;
    signal ag_26 : std_logic;
    signal ag_27 : std_logic;
    signal ag_28 : std_logic;
    signal ag_29 : std_logic;
    signal ag_30 : std_logic;
    signal ag_31 : std_logic;
    component std_inv is 
         port (
            a :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_nand2 is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_nand3 is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            c :  in std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_nor2 is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_nor3 is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            c :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    begin 
        ag_32 : std_inv
            port map (
                a => sfnCheckDecodedWord_b_3,
                y => ag_31
                );
        ag_33 : std_nand2
            port map (
                a => ag_31,
                b => sfnCheckDecodedWord_b_1,
                y => ag_00
                );
        ag_34 : std_inv
            port map (
                a => sfnCheckDecodedWord_b_1,
                y => ag_01
                );
        ag_35 : std_nand2
            port map (
                a => sfnCheckDecodedWord_b_3,
                b => ag_01,
                y => ag_02
                );
        ag_36 : std_nand2
            port map (
                a => ag_02,
                b => ag_00,
                y => ag_03
                );
        ag_37 : std_inv
            port map (
                a => sfnCheckDecodedWord_b_5,
                y => ag_04
                );
        ag_38 : std_nand2
            port map (
                a => ag_04,
                b => sfnCheckDecodedWord_b_4,
                y => ag_05
                );
        ag_39 : std_inv
            port map (
                a => sfnCheckDecodedWord_b_4,
                y => ag_06
                );
        ag_40 : std_nand2
            port map (
                a => sfnCheckDecodedWord_b_5,
                b => ag_06,
                y => ag_07
                );
        ag_41 : std_nand2
            port map (
                a => ag_07,
                b => ag_05,
                y => ag_08
                );
        ag_42 : std_nand3
            port map (
                a => ag_08,
                b => ag_03,
                c => sfnCheckDecodedWord_b_0,
                y => ag_09
                );
        ag_43 : std_inv
            port map (
                a => sfnCheckDecodedWord_b_0,
                y => ag_10
                );
        ag_44 : std_nor2
            port map (
                a => sfnCheckDecodedWord_b_3,
                b => ag_01,
                y => ag_11
                );
        ag_45 : std_nor2
            port map (
                a => ag_31,
                b => sfnCheckDecodedWord_b_1,
                y => ag_12
                );
        ag_46 : std_nor2
            port map (
                a => ag_12,
                b => ag_11,
                y => ag_13
                );
        ag_47 : std_nor2
            port map (
                a => sfnCheckDecodedWord_b_5,
                b => ag_06,
                y => ag_14
                );
        ag_48 : std_nor2
            port map (
                a => ag_04,
                b => sfnCheckDecodedWord_b_4,
                y => ag_15
                );
        ag_49 : std_nor2
            port map (
                a => ag_15,
                b => ag_14,
                y => ag_16
                );
        ag_50 : std_nand3
            port map (
                a => ag_16,
                b => ag_13,
                c => ag_10,
                y => ag_17
                );
        ag_51 : std_nand2
            port map (
                a => ag_17,
                b => ag_09,
                y => ag_18
                );
        ag_52 : std_nor2
            port map (
                a => sfnCheckDecodedWord_b_2,
                b => ag_01,
                y => ag_19
                );
        ag_53 : std_inv
            port map (
                a => sfnCheckDecodedWord_b_2,
                y => ag_20
                );
        ag_54 : std_nor2
            port map (
                a => ag_20,
                b => sfnCheckDecodedWord_b_1,
                y => ag_21
                );
        ag_55 : std_nor2
            port map (
                a => ag_21,
                b => ag_19,
                y => ag_22
                );
        ag_56 : std_nand2
            port map (
                a => ag_22,
                b => sfnCheckDecodedWord_b_4,
                y => ag_23
                );
        ag_57 : std_nor2
            port map (
                a => sfnCheckDecodedWord_b_6,
                b => ag_31,
                y => ag_24
                );
        ag_58 : std_inv
            port map (
                a => sfnCheckDecodedWord_b_6,
                y => ag_25
                );
        ag_59 : std_nor2
            port map (
                a => ag_25,
                b => sfnCheckDecodedWord_b_3,
                y => ag_26
                );
        ag_60 : std_nor3
            port map (
                a => ag_26,
                b => ag_24,
                c => ag_22,
                y => ag_27
                );
        ag_61 : std_nor2
            port map (
                a => ag_26,
                b => ag_24,
                y => ag_28
                );
        ag_62 : std_nor2
            port map (
                a => ag_28,
                b => sfnCheckDecodedWord_b_4,
                y => ag_29
                );
        ag_63 : std_nor2
            port map (
                a => ag_29,
                b => ag_27,
                y => ag_30
                );
        ag_64 : std_nand3
            port map (
                a => ag_30,
                b => ag_23,
                c => ag_18,
                y => fnCheckDecodedWord
                );
    end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity FIFO2_1 is 
     port (
        CLK :  in std_logic;
        CLR :  in std_logic;
        DEQ :  in std_logic;
        D_IN :  in std_logic;
        D_OUT :  out std_logic;
        EMPTY_N :  out std_logic;
        ENQ :  in std_logic;
        FULL_N :  out std_logic;
        RST :  in std_logic
    );
end entity; 


architecture rtl of FIFO2_1 is 
    signal ag_00 : std_logic;
    signal ag_01 : std_logic;
    signal ag_02 : std_logic;
    signal ag_03 : std_logic;
    signal ag_04 : std_logic;
    signal ag_05 : std_logic;
    signal ag_06 : std_logic;
    signal ag_07 : std_logic;
    signal ag_08 : std_logic;
    signal ag_09 : std_logic;
    signal ag_10 : std_logic;
    signal ag_11 : std_logic;
    signal ag_12 : std_logic;
    signal ag_13 : std_logic;
    signal ag_14 : std_logic;
    signal ag_15 : std_logic;
    signal ag_16 : std_logic;
    signal ag_17 : std_logic;
    signal ag_18 : std_logic;
    signal ag_19 : std_logic;
    signal ag_20 : std_logic;
    signal ag_21 : std_logic;
    signal ag_22 : std_logic;
    signal ag_23 : std_logic;
    signal ag_24 : std_logic;
    signal ag_25 : std_logic;
    signal ag_26 : std_logic;
    signal ag_27 : std_logic;
    signal ag_28 : std_logic;
    signal ag_29 : std_logic;
    signal ag_30 : std_logic;
    signal ag_31 : std_logic;
    signal data0_reg : std_logic;
    signal data1_reg : std_logic;
    signal empty_reg : std_logic;
    signal full_reg : std_logic;
    component std_inv is 
         port (
            a :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_nand2 is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_nor2 is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_aoi is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            c :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_nand3 is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            c :  in std_logic;
            y :  inout std_logic
        );
    end component; 
    component d_ff is 
         port (
            clk :  in std_logic;
            d :  inout std_logic;
            q :  inout std_logic
        );
    end component; 
    begin 
        ag_32 : std_inv
            port map (
                a => data1_reg,
                y => ag_04
                );
        ag_33 : std_nand2
            port map (
                a => ENQ,
                b => empty_reg,
                y => ag_05
                );
        ag_34 : std_nor2
            port map (
                a => ag_05,
                b => D_IN,
                y => ag_06
                );
        ag_35 : std_aoi
            port map (
                a => ag_05,
                b => ag_04,
                c => ag_06,
                y => ag_01
                );
        ag_36 : std_inv
            port map (
                a => ENQ,
                y => ag_07
                );
        ag_37 : std_nand2
            port map (
                a => DEQ,
                b => ag_07,
                y => ag_08
                );
        ag_38 : std_inv
            port map (
                a => DEQ,
                y => ag_09
                );
        ag_39 : std_nand2
            port map (
                a => ag_09,
                b => ENQ,
                y => ag_10
                );
        ag_40 : std_nand2
            port map (
                a => ag_10,
                b => ag_08,
                y => ag_11
                );
        ag_41 : std_nor2
            port map (
                a => ag_11,
                b => empty_reg,
                y => ag_12
                );
        ag_42 : std_inv
            port map (
                a => RST,
                y => ag_13
                );
        ag_43 : std_nor2
            port map (
                a => ag_13,
                b => CLR,
                y => ag_14
                );
        ag_44 : std_nor2
            port map (
                a => ag_09,
                b => ENQ,
                y => ag_15
                );
        ag_45 : std_nand2
            port map (
                a => ag_15,
                b => full_reg,
                y => ag_16
                );
        ag_46 : std_nand2
            port map (
                a => ag_16,
                b => ag_14,
                y => ag_17
                );
        ag_47 : std_nor2
            port map (
                a => ag_17,
                b => ag_12,
                y => ag_02
                );
        ag_48 : std_inv
            port map (
                a => full_reg,
                y => ag_18
                );
        ag_49 : std_nand3
            port map (
                a => ag_10,
                b => ag_08,
                c => ag_18,
                y => ag_19
                );
        ag_50 : std_nor2
            port map (
                a => DEQ,
                b => ag_07,
                y => ag_20
                );
        ag_51 : std_nand2
            port map (
                a => ag_20,
                b => empty_reg,
                y => ag_21
                );
        ag_52 : std_nand2
            port map (
                a => ag_21,
                b => ag_19,
                y => ag_22
                );
        ag_53 : std_nand2
            port map (
                a => ag_22,
                b => ag_14,
                y => ag_03
                );
        ag_54 : std_nand2
            port map (
                a => DEQ,
                b => ag_18,
                y => ag_23
                );
        ag_55 : std_inv
            port map (
                a => data0_reg,
                y => ag_24
                );
        ag_56 : std_aoi
            port map (
                a => ag_09,
                b => empty_reg,
                c => ag_07,
                y => ag_25
                );
        ag_57 : std_nor2
            port map (
                a => ag_25,
                b => ag_24,
                y => ag_26
                );
        ag_58 : std_nand2
            port map (
                a => ag_26,
                b => ag_23,
                y => ag_27
                );
        ag_59 : std_nor2
            port map (
                a => ag_09,
                b => full_reg,
                y => ag_28
                );
        ag_60 : std_nand2
            port map (
                a => ag_28,
                b => data1_reg,
                y => ag_29
                );
        ag_61 : std_nand2
            port map (
                a => ag_18,
                b => empty_reg,
                y => ag_30
                );
        ag_62 : std_nand3
            port map (
                a => ag_30,
                b => ag_25,
                c => D_IN,
                y => ag_31
                );
        ag_63 : std_nand3
            port map (
                a => ag_31,
                b => ag_29,
                c => ag_27,
                y => ag_00
                );
        ag_64 : d_ff
            port map (
                clk => CLK,
                d => ag_00,
                q => data0_reg
                );
        ag_65 : d_ff
            port map (
                clk => CLK,
                d => ag_01,
                q => data1_reg
                );
        ag_66 : d_ff
            port map (
                clk => CLK,
                d => ag_03,
                q => full_reg
                );
        ag_67 : d_ff
            port map (
                clk => CLK,
                d => ag_02,
                q => empty_reg
                );
        D_OUT <= data0_reg;
        EMPTY_N <= empty_reg;
        FULL_N <= full_reg;
    end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity module_fnBitNodeCore is 
     port (
        fnBitNodeCore :  out std_logic;
        sfnBitNodeCore_i_0 :  in std_logic;
        sfnBitNodeCore_i_1 :  in std_logic;
        sfnBitNodeCore_i_2 :  in std_logic
    );
end entity; 


architecture rtl of module_fnBitNodeCore is 
    signal ag_0 : std_logic;
    signal ag_1 : std_logic;
    component std_nor2 is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_aoi is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            c :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    begin 
        ag_2 : std_nor2
            port map (
                a => sfnBitNodeCore_i_0,
                b => sfnBitNodeCore_i_1,
                y => ag_0
                );
        ag_3 : std_aoi
            port map (
                a => sfnBitNodeCore_i_0,
                b => sfnBitNodeCore_i_1,
                c => sfnBitNodeCore_i_2,
                y => ag_1
                );
        ag_4 : std_nor2
            port map (
                a => ag_1,
                b => ag_0,
                y => fnBitNodeCore
                );
    end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity mkBitNode is 
     port (
        CLK :  in std_logic;
        EN_b2c_get :  in std_logic;
        EN_c2b_0_put :  in std_logic;
        EN_c2b_1_put :  in std_logic;
        EN_c2b_2_put :  in std_logic;
        EN_codeIn_put :  in std_logic;
        EN_dataOut_get :  in std_logic;
        RDY_b2c_get :  out std_logic;
        RDY_c2b_0_put :  out std_logic;
        RDY_c2b_1_put :  out std_logic;
        RDY_c2b_2_put :  out std_logic;
        RDY_codeIn_put :  out std_logic;
        RDY_dataOut_get :  out std_logic;
        RST_N :  in std_logic;
        b2c_get :  out std_logic;
        c2b_0_put :  in std_logic;
        c2b_1_put :  in std_logic;
        c2b_2_put :  in std_logic;
        codeIn_put :  in std_logic;
        dataOut_get :  out std_logic
    );
end entity; 


architecture rtl of mkBitNode is 
    signal ag_0 : std_logic;
    signal ag_1 : std_logic;
    signal ag_2 : std_logic;
    signal ag_3 : std_logic;
    signal CAN_FIRE_RL_rlProcessChkNodeResult : std_logic;
    signal CAN_FIRE_RL_rlProcessNewData : std_logic;
    signal CAN_FIRE_b2c_get : std_logic;
    signal CAN_FIRE_c2b_0_put : std_logic;
    signal CAN_FIRE_c2b_1_put : std_logic;
    signal CAN_FIRE_c2b_2_put : std_logic;
    signal CAN_FIRE_codeIn_put : std_logic;
    signal CAN_FIRE_dataOut_get : std_logic;
    signal WILL_FIRE_RL_rlProcessChkNodeResult : std_logic;
    signal WILL_FIRE_RL_rlProcessNewData : std_logic;
    signal WILL_FIRE_b2c_get : std_logic;
    signal WILL_FIRE_c2b_0_put : std_logic;
    signal WILL_FIRE_c2b_1_put : std_logic;
    signal WILL_FIRE_c2b_2_put : std_logic;
    signal WILL_FIRE_codeIn_put : std_logic;
    signal WILL_FIRE_dataOut_get : std_logic;
    signal sffB2C_DEQ : std_logic;
    signal sffB2C_D_IN : std_logic;
    signal sffB2C_D_OUT : std_logic;
    signal sffB2C_EMPTY_N : std_logic;
    signal sffB2C_ENQ : std_logic;
    signal sffB2C_FULL_N : std_logic;
    signal sffCodeIn_DEQ : std_logic;
    signal sffCodeIn_D_IN : std_logic;
    signal sffCodeIn_D_OUT : std_logic;
    signal sffCodeIn_EMPTY_N : std_logic;
    signal sffCodeIn_ENQ : std_logic;
    signal sffCodeIn_FULL_N : std_logic;
    signal sffDataOut_DEQ : std_logic;
    signal sffDataOut_D_IN : std_logic;
    signal sffDataOut_D_OUT : std_logic;
    signal sffDataOut_EMPTY_N : std_logic;
    signal sffDataOut_ENQ : std_logic;
    signal sffDataOut_FULL_N : std_logic;
    signal svffC2B_0_DEQ : std_logic;
    signal svffC2B_0_D_IN : std_logic;
    signal svffC2B_0_D_OUT : std_logic;
    signal svffC2B_0_EMPTY_N : std_logic;
    signal svffC2B_0_ENQ : std_logic;
    signal svffC2B_0_FULL_N : std_logic;
    signal svffC2B_1_DEQ : std_logic;
    signal svffC2B_1_D_IN : std_logic;
    signal svffC2B_1_D_OUT : std_logic;
    signal svffC2B_1_EMPTY_N : std_logic;
    signal svffC2B_1_ENQ : std_logic;
    signal svffC2B_1_FULL_N : std_logic;
    signal svffC2B_2_DEQ : std_logic;
    signal svffC2B_2_D_IN : std_logic;
    signal svffC2B_2_D_OUT : std_logic;
    signal svffC2B_2_EMPTY_N : std_logic;
    signal svffC2B_2_ENQ : std_logic;
    signal svffC2B_2_FULL_N : std_logic;
    component std_inv is 
         port (
            a :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_nor2 is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_nand2 is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component FIFO2_1 is 
         port (
            CLK :  in std_logic;
            CLR :  in std_logic;
            DEQ :  in std_logic;
            D_IN :  in std_logic;
            D_OUT :  out std_logic;
            EMPTY_N :  out std_logic;
            ENQ :  in std_logic;
            FULL_N :  out std_logic;
            RST :  in std_logic
        );
    end component; 
    component module_fnBitNodeCore is 
         port (
            fnBitNodeCore :  out std_logic;
            sfnBitNodeCore_i_0 :  in std_logic;
            sfnBitNodeCore_i_1 :  in std_logic;
            sfnBitNodeCore_i_2 :  in std_logic
        );
    end component; 
    begin 
        ag_4 : std_inv
            port map (
                a => sffCodeIn_EMPTY_N,
                y => ag_3
                );
        ag_5 : std_inv
            port map (
                a => sffB2C_FULL_N,
                y => ag_0
                );
        ag_6 : std_nor2
            port map (
                a => ag_0,
                b => ag_3,
                y => sffB2C_ENQ
                );
        ag_7 : std_nand2
            port map (
                a => svffC2B_1_EMPTY_N,
                b => svffC2B_0_EMPTY_N,
                y => ag_1
                );
        ag_8 : std_nand2
            port map (
                a => sffDataOut_FULL_N,
                b => svffC2B_2_EMPTY_N,
                y => ag_2
                );
        ag_9 : std_nor2
            port map (
                a => ag_2,
                b => ag_1,
                y => sffDataOut_ENQ
                );
        ffB2C : FIFO2_1
            port map (
                CLK => CLK,
                CLR => '0',
                DEQ => EN_b2c_get,
                D_IN => sffB2C_D_IN,
                D_OUT => sffB2C_D_OUT,
                EMPTY_N => sffB2C_EMPTY_N,
                ENQ => sffB2C_ENQ,
                FULL_N => sffB2C_FULL_N,
                RST => RST_N
                );
        ffCodeIn : FIFO2_1
            port map (
                CLK => CLK,
                CLR => '0',
                DEQ => sffB2C_ENQ,
                D_IN => codeIn_put,
                D_OUT => sffB2C_D_IN,
                EMPTY_N => sffCodeIn_EMPTY_N,
                ENQ => EN_codeIn_put,
                FULL_N => sffCodeIn_FULL_N,
                RST => RST_N
                );
        ffDataOut : FIFO2_1
            port map (
                CLK => CLK,
                CLR => '0',
                DEQ => EN_dataOut_get,
                D_IN => sffDataOut_D_IN,
                D_OUT => sffDataOut_D_OUT,
                EMPTY_N => sffDataOut_EMPTY_N,
                ENQ => sffDataOut_ENQ,
                FULL_N => sffDataOut_FULL_N,
                RST => RST_N
                );
        instance_fnBitNodeCore_0 : module_fnBitNodeCore
            port map (
                fnBitNodeCore => sffDataOut_D_IN,
                sfnBitNodeCore_i_0 => svffC2B_0_D_OUT,
                sfnBitNodeCore_i_1 => svffC2B_1_D_OUT,
                sfnBitNodeCore_i_2 => svffC2B_2_D_OUT
                );
        vffC2B_0 : FIFO2_1
            port map (
                CLK => CLK,
                CLR => '0',
                DEQ => sffDataOut_ENQ,
                D_IN => c2b_0_put,
                D_OUT => svffC2B_0_D_OUT,
                EMPTY_N => svffC2B_0_EMPTY_N,
                ENQ => EN_c2b_0_put,
                FULL_N => svffC2B_0_FULL_N,
                RST => RST_N
                );
        vffC2B_1 : FIFO2_1
            port map (
                CLK => CLK,
                CLR => '0',
                DEQ => sffDataOut_ENQ,
                D_IN => c2b_1_put,
                D_OUT => svffC2B_1_D_OUT,
                EMPTY_N => svffC2B_1_EMPTY_N,
                ENQ => EN_c2b_1_put,
                FULL_N => svffC2B_1_FULL_N,
                RST => RST_N
                );
        vffC2B_2 : FIFO2_1
            port map (
                CLK => CLK,
                CLR => '0',
                DEQ => sffDataOut_ENQ,
                D_IN => c2b_2_put,
                D_OUT => svffC2B_2_D_OUT,
                EMPTY_N => svffC2B_2_EMPTY_N,
                ENQ => EN_c2b_2_put,
                FULL_N => svffC2B_2_FULL_N,
                RST => RST_N
                );
        CAN_FIRE_RL_rlProcessChkNodeResult <= sffDataOut_ENQ;
        CAN_FIRE_RL_rlProcessNewData <= sffB2C_ENQ;
        CAN_FIRE_b2c_get <= sffB2C_EMPTY_N;
        CAN_FIRE_c2b_0_put <= svffC2B_0_FULL_N;
        CAN_FIRE_c2b_1_put <= svffC2B_1_FULL_N;
        CAN_FIRE_c2b_2_put <= svffC2B_2_FULL_N;
        CAN_FIRE_codeIn_put <= sffCodeIn_FULL_N;
        CAN_FIRE_dataOut_get <= sffDataOut_EMPTY_N;
        RDY_b2c_get <= sffB2C_EMPTY_N;
        RDY_c2b_0_put <= svffC2B_0_FULL_N;
        RDY_c2b_1_put <= svffC2B_1_FULL_N;
        RDY_c2b_2_put <= svffC2B_2_FULL_N;
        RDY_codeIn_put <= sffCodeIn_FULL_N;
        RDY_dataOut_get <= sffDataOut_EMPTY_N;
        WILL_FIRE_RL_rlProcessChkNodeResult <= sffDataOut_ENQ;
        WILL_FIRE_RL_rlProcessNewData <= sffB2C_ENQ;
        WILL_FIRE_b2c_get <= EN_b2c_get;
        WILL_FIRE_c2b_0_put <= EN_c2b_0_put;
        WILL_FIRE_c2b_1_put <= EN_c2b_1_put;
        WILL_FIRE_c2b_2_put <= EN_c2b_2_put;
        WILL_FIRE_codeIn_put <= EN_codeIn_put;
        WILL_FIRE_dataOut_get <= EN_dataOut_get;
        b2c_get <= sffB2C_D_OUT;
        dataOut_get <= sffDataOut_D_OUT;
        sffB2C_DEQ <= EN_b2c_get;
        sffCodeIn_DEQ <= sffB2C_ENQ;
        sffCodeIn_D_IN <= codeIn_put;
        sffCodeIn_D_OUT <= sffB2C_D_IN;
        sffCodeIn_ENQ <= EN_codeIn_put;
        sffDataOut_DEQ <= EN_dataOut_get;
        svffC2B_0_DEQ <= sffDataOut_ENQ;
        svffC2B_0_D_IN <= c2b_0_put;
        svffC2B_0_ENQ <= EN_c2b_0_put;
        svffC2B_1_DEQ <= sffDataOut_ENQ;
        svffC2B_1_D_IN <= c2b_1_put;
        svffC2B_1_ENQ <= EN_c2b_1_put;
        svffC2B_2_DEQ <= sffDataOut_ENQ;
        svffC2B_2_D_IN <= c2b_2_put;
        svffC2B_2_ENQ <= EN_c2b_2_put;
    end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity mkChkNodeCtrl is 
     port (
        B2C_0_DEQ :  out std_logic;
        B2C_0_EMPTY_N :  in std_logic;
        B2C_0_FULL_N :  in std_logic;
        B2C_1_DEQ :  out std_logic;
        B2C_1_EMPTY_N :  in std_logic;
        B2C_1_FULL_N :  in std_logic;
        B2C_2_DEQ :  out std_logic;
        B2C_2_EMPTY_N :  in std_logic;
        B2C_2_FULL_N :  in std_logic;
        C2B_0_EMPTY_N :  in std_logic;
        C2B_0_ENQ :  out std_logic;
        C2B_0_FULL_N :  in std_logic;
        C2B_1_EMPTY_N :  in std_logic;
        C2B_1_ENQ :  out std_logic;
        C2B_1_FULL_N :  in std_logic;
        C2B_2_EMPTY_N :  in std_logic;
        C2B_2_ENQ :  out std_logic;
        C2B_2_FULL_N :  in std_logic
    );
end entity; 


architecture rtl of mkChkNodeCtrl is 
    signal ag_0 : std_logic;
    signal ag_1 : std_logic;
    signal ag_2 : std_logic;
    signal CAN_FIRE_RL_rlProcessIteration : std_logic;
    component std_nand2 is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_nor3 is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            c :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    begin 
        ag_3 : std_nand2
            port map (
                a => C2B_0_FULL_N,
                b => B2C_2_EMPTY_N,
                y => ag_1
                );
        ag_4 : std_nand2
            port map (
                a => B2C_0_EMPTY_N,
                b => C2B_2_FULL_N,
                y => ag_2
                );
        ag_5 : std_nand2
            port map (
                a => B2C_1_EMPTY_N,
                b => C2B_1_FULL_N,
                y => ag_0
                );
        ag_6 : std_nor3
            port map (
                a => ag_0,
                b => ag_2,
                c => ag_1,
                y => B2C_0_DEQ
                );
        B2C_1_DEQ <= B2C_0_DEQ;
        B2C_2_DEQ <= B2C_0_DEQ;
        C2B_0_ENQ <= B2C_0_DEQ;
        C2B_1_ENQ <= B2C_0_DEQ;
        C2B_2_ENQ <= B2C_0_DEQ;
        CAN_FIRE_RL_rlProcessIteration <= B2C_0_DEQ;
    end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity module_fnChkNodeCore is 
     port (
        sfnChkNodeCore_0 :  out std_logic;
        sfnChkNodeCore_1 :  out std_logic;
        sfnChkNodeCore_2 :  out std_logic;
        sfnChkNodeCore_i_0 :  in std_logic;
        sfnChkNodeCore_i_1 :  in std_logic;
        sfnChkNodeCore_i_2 :  in std_logic
    );
end entity; 


architecture rtl of module_fnChkNodeCore is 
    signal ag_00 : std_logic;
    signal ag_01 : std_logic;
    signal ag_02 : std_logic;
    signal ag_03 : std_logic;
    signal ag_04 : std_logic;
    signal ag_05 : std_logic;
    signal ag_06 : std_logic;
    signal ag_07 : std_logic;
    signal ag_08 : std_logic;
    component std_inv is 
         port (
            a :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_nand2 is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    begin 
        ag_09 : std_inv
            port map (
                a => sfnChkNodeCore_i_2,
                y => ag_06
                );
        ag_10 : std_nand2
            port map (
                a => ag_06,
                b => sfnChkNodeCore_i_1,
                y => ag_07
                );
        ag_11 : std_inv
            port map (
                a => sfnChkNodeCore_i_1,
                y => ag_08
                );
        ag_12 : std_nand2
            port map (
                a => sfnChkNodeCore_i_2,
                b => ag_08,
                y => ag_00
                );
        ag_13 : std_nand2
            port map (
                a => ag_00,
                b => ag_07,
                y => sfnChkNodeCore_0
                );
        ag_14 : std_inv
            port map (
                a => sfnChkNodeCore_i_0,
                y => ag_01
                );
        ag_15 : std_nand2
            port map (
                a => ag_01,
                b => sfnChkNodeCore_i_2,
                y => ag_02
                );
        ag_16 : std_nand2
            port map (
                a => sfnChkNodeCore_i_0,
                b => ag_06,
                y => ag_03
                );
        ag_17 : std_nand2
            port map (
                a => ag_03,
                b => ag_02,
                y => sfnChkNodeCore_1
                );
        ag_18 : std_nand2
            port map (
                a => ag_01,
                b => sfnChkNodeCore_i_1,
                y => ag_04
                );
        ag_19 : std_nand2
            port map (
                a => sfnChkNodeCore_i_0,
                b => ag_08,
                y => ag_05
                );
        ag_20 : std_nand2
            port map (
                a => ag_05,
                b => ag_04,
                y => sfnChkNodeCore_2
                );
    end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity mkChkNode is 
     port (
        CLK :  in std_logic;
        EN_b2c_0_put :  in std_logic;
        EN_b2c_1_put :  in std_logic;
        EN_b2c_2_put :  in std_logic;
        EN_c2b_0_get :  in std_logic;
        EN_c2b_1_get :  in std_logic;
        EN_c2b_2_get :  in std_logic;
        RDY_b2c_0_put :  out std_logic;
        RDY_b2c_1_put :  out std_logic;
        RDY_b2c_2_put :  out std_logic;
        RDY_c2b_0_get :  out std_logic;
        RDY_c2b_1_get :  out std_logic;
        RDY_c2b_2_get :  out std_logic;
        RST_N :  in std_logic;
        b2c_0_put :  in std_logic;
        b2c_1_put :  in std_logic;
        b2c_2_put :  in std_logic;
        c2b_0_get :  out std_logic;
        c2b_1_get :  out std_logic;
        c2b_2_get :  out std_logic
    );
end entity; 


architecture rtl of mkChkNode is 
    signal sfnChkNodeCore_d16_0 : std_logic;
    signal sfnChkNodeCore_d16_1 : std_logic;
    signal sfnChkNodeCore_d16_2 : std_logic;
    signal svffB2C_0_DEQ : std_logic;
    signal svffB2C_0_D_OUT : std_logic;
    signal svffB2C_0_EMPTY_N : std_logic;
    signal svffB2C_0_FULL_N : std_logic;
    signal svffB2C_1_DEQ : std_logic;
    signal svffB2C_1_D_OUT : std_logic;
    signal svffB2C_1_EMPTY_N : std_logic;
    signal svffB2C_1_FULL_N : std_logic;
    signal svffB2C_2_DEQ : std_logic;
    signal svffB2C_2_D_OUT : std_logic;
    signal svffB2C_2_EMPTY_N : std_logic;
    signal svffB2C_2_FULL_N : std_logic;
    signal svffC2B_0_D_OUT : std_logic;
    signal svffC2B_0_EMPTY_N : std_logic;
    signal svffC2B_0_ENQ : std_logic;
    signal svffC2B_0_FULL_N : std_logic;
    signal svffC2B_1_D_OUT : std_logic;
    signal svffC2B_1_EMPTY_N : std_logic;
    signal svffC2B_1_ENQ : std_logic;
    signal svffC2B_1_FULL_N : std_logic;
    signal svffC2B_2_D_OUT : std_logic;
    signal svffC2B_2_EMPTY_N : std_logic;
    signal svffC2B_2_ENQ : std_logic;
    signal svffC2B_2_FULL_N : std_logic;
    component mkChkNodeCtrl is 
         port (
            B2C_0_DEQ :  out std_logic;
            B2C_0_EMPTY_N :  in std_logic;
            B2C_0_FULL_N :  in std_logic;
            B2C_1_DEQ :  out std_logic;
            B2C_1_EMPTY_N :  in std_logic;
            B2C_1_FULL_N :  in std_logic;
            B2C_2_DEQ :  out std_logic;
            B2C_2_EMPTY_N :  in std_logic;
            B2C_2_FULL_N :  in std_logic;
            C2B_0_EMPTY_N :  in std_logic;
            C2B_0_ENQ :  out std_logic;
            C2B_0_FULL_N :  in std_logic;
            C2B_1_EMPTY_N :  in std_logic;
            C2B_1_ENQ :  out std_logic;
            C2B_1_FULL_N :  in std_logic;
            C2B_2_EMPTY_N :  in std_logic;
            C2B_2_ENQ :  out std_logic;
            C2B_2_FULL_N :  in std_logic
        );
    end component; 
    component module_fnChkNodeCore is 
         port (
            sfnChkNodeCore_0 :  out std_logic;
            sfnChkNodeCore_1 :  out std_logic;
            sfnChkNodeCore_2 :  out std_logic;
            sfnChkNodeCore_i_0 :  in std_logic;
            sfnChkNodeCore_i_1 :  in std_logic;
            sfnChkNodeCore_i_2 :  in std_logic
        );
    end component; 
    component FIFO2_1 is 
         port (
            CLK :  in std_logic;
            CLR :  in std_logic;
            DEQ :  in std_logic;
            D_IN :  in std_logic;
            D_OUT :  out std_logic;
            EMPTY_N :  out std_logic;
            ENQ :  in std_logic;
            FULL_N :  out std_logic;
            RST :  in std_logic
        );
    end component; 
    begin 
        ctrl : mkChkNodeCtrl
            port map (
                B2C_0_DEQ => svffB2C_0_DEQ,
                B2C_0_EMPTY_N => svffB2C_0_EMPTY_N,
                B2C_0_FULL_N => svffB2C_0_FULL_N,
                B2C_1_DEQ => svffB2C_1_DEQ,
                B2C_1_EMPTY_N => svffB2C_1_EMPTY_N,
                B2C_1_FULL_N => svffB2C_1_FULL_N,
                B2C_2_DEQ => svffB2C_2_DEQ,
                B2C_2_EMPTY_N => svffB2C_2_EMPTY_N,
                B2C_2_FULL_N => svffB2C_2_FULL_N,
                C2B_0_EMPTY_N => svffC2B_0_EMPTY_N,
                C2B_0_ENQ => svffC2B_0_ENQ,
                C2B_0_FULL_N => svffC2B_0_FULL_N,
                C2B_1_EMPTY_N => svffC2B_1_EMPTY_N,
                C2B_1_ENQ => svffC2B_1_ENQ,
                C2B_1_FULL_N => svffC2B_1_FULL_N,
                C2B_2_EMPTY_N => svffC2B_2_EMPTY_N,
                C2B_2_ENQ => svffC2B_2_ENQ,
                C2B_2_FULL_N => svffC2B_2_FULL_N
                );
        instance_fnChkNodeCore_0 : module_fnChkNodeCore
            port map (
                sfnChkNodeCore_0 => sfnChkNodeCore_d16_0,
                sfnChkNodeCore_1 => sfnChkNodeCore_d16_1,
                sfnChkNodeCore_2 => sfnChkNodeCore_d16_2,
                sfnChkNodeCore_i_0 => svffB2C_0_D_OUT,
                sfnChkNodeCore_i_1 => svffB2C_1_D_OUT,
                sfnChkNodeCore_i_2 => svffB2C_2_D_OUT
                );
        vffB2C_0 : FIFO2_1
            port map (
                CLK => CLK,
                CLR => '0',
                DEQ => svffB2C_0_DEQ,
                D_IN => b2c_0_put,
                D_OUT => svffB2C_0_D_OUT,
                EMPTY_N => svffB2C_0_EMPTY_N,
                ENQ => EN_b2c_0_put,
                FULL_N => svffB2C_0_FULL_N,
                RST => RST_N
                );
        vffB2C_1 : FIFO2_1
            port map (
                CLK => CLK,
                CLR => '0',
                DEQ => svffB2C_1_DEQ,
                D_IN => b2c_1_put,
                D_OUT => svffB2C_1_D_OUT,
                EMPTY_N => svffB2C_1_EMPTY_N,
                ENQ => EN_b2c_1_put,
                FULL_N => svffB2C_1_FULL_N,
                RST => RST_N
                );
        vffB2C_2 : FIFO2_1
            port map (
                CLK => CLK,
                CLR => '0',
                DEQ => svffB2C_2_DEQ,
                D_IN => b2c_2_put,
                D_OUT => svffB2C_2_D_OUT,
                EMPTY_N => svffB2C_2_EMPTY_N,
                ENQ => EN_b2c_2_put,
                FULL_N => svffB2C_2_FULL_N,
                RST => RST_N
                );
        vffC2B_0 : FIFO2_1
            port map (
                CLK => CLK,
                CLR => '0',
                DEQ => EN_c2b_0_get,
                D_IN => sfnChkNodeCore_d16_0,
                D_OUT => svffC2B_0_D_OUT,
                EMPTY_N => svffC2B_0_EMPTY_N,
                ENQ => svffC2B_0_ENQ,
                FULL_N => svffC2B_0_FULL_N,
                RST => RST_N
                );
        vffC2B_1 : FIFO2_1
            port map (
                CLK => CLK,
                CLR => '0',
                DEQ => EN_c2b_1_get,
                D_IN => sfnChkNodeCore_d16_1,
                D_OUT => svffC2B_1_D_OUT,
                EMPTY_N => svffC2B_1_EMPTY_N,
                ENQ => svffC2B_1_ENQ,
                FULL_N => svffC2B_1_FULL_N,
                RST => RST_N
                );
        vffC2B_2 : FIFO2_1
            port map (
                CLK => CLK,
                CLR => '0',
                DEQ => EN_c2b_2_get,
                D_IN => sfnChkNodeCore_d16_2,
                D_OUT => svffC2B_2_D_OUT,
                EMPTY_N => svffC2B_2_EMPTY_N,
                ENQ => svffC2B_2_ENQ,
                FULL_N => svffC2B_2_FULL_N,
                RST => RST_N
                );
        RDY_b2c_0_put <= svffB2C_0_FULL_N;
        RDY_b2c_1_put <= svffB2C_1_FULL_N;
        RDY_b2c_2_put <= svffB2C_2_FULL_N;
        RDY_c2b_0_get <= svffC2B_0_EMPTY_N;
        RDY_c2b_1_get <= svffC2B_1_EMPTY_N;
        RDY_c2b_2_get <= svffC2B_2_EMPTY_N;
        c2b_0_get <= svffC2B_0_D_OUT;
        c2b_1_get <= svffC2B_1_D_OUT;
        c2b_2_get <= svffC2B_2_D_OUT;
    end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity mkLdpcCore is 
     port (
        CLK :  in std_logic;
        EN_request_put :  in std_logic;
        EN_response_get :  in std_logic;
        RDY_request_put :  out std_logic;
        RDY_response_get :  out std_logic;
        RST_N :  in std_logic;
        \request_put_0  :  in std_logic;
        \request_put_1  :  in std_logic;
        \request_put_2  :  in std_logic;
        \request_put_3  :  in std_logic;
        \request_put_4  :  in std_logic;
        \request_put_5  :  in std_logic;
        \request_put_6  :  in std_logic;
        \response_get_0  :  out std_logic;
        \response_get_1  :  out std_logic;
        \response_get_2  :  out std_logic;
        \response_get_3  :  out std_logic;
        \response_get_4  :  out std_logic;
        \response_get_5  :  out std_logic;
        \response_get_6  :  out std_logic
    );
end entity; 


architecture rtl of mkLdpcCore is 
    signal ag_000 : std_logic;
    signal ag_001 : std_logic;
    signal ag_002 : std_logic;
    signal ag_003 : std_logic;
    signal ag_004 : std_logic;
    signal ag_005 : std_logic;
    signal ag_006 : std_logic;
    signal ag_007 : std_logic;
    signal ag_008 : std_logic;
    signal ag_009 : std_logic;
    signal ag_010 : std_logic;
    signal ag_011 : std_logic;
    signal ag_012 : std_logic;
    signal ag_013 : std_logic;
    signal ag_014 : std_logic;
    signal ag_015 : std_logic;
    signal ag_016 : std_logic;
    signal ag_017 : std_logic;
    signal ag_018 : std_logic;
    signal ag_019 : std_logic;
    signal ag_020 : std_logic;
    signal ag_021 : std_logic;
    signal ag_022 : std_logic;
    signal ag_023 : std_logic;
    signal ag_024 : std_logic;
    signal ag_025 : std_logic;
    signal ag_026 : std_logic;
    signal ag_027 : std_logic;
    signal ag_028 : std_logic;
    signal ag_029 : std_logic;
    signal ag_030 : std_logic;
    signal ag_031 : std_logic;
    signal ag_032 : std_logic;
    signal ag_033 : std_logic;
    signal ag_034 : std_logic;
    signal ag_035 : std_logic;
    signal ag_036 : std_logic;
    signal ag_037 : std_logic;
    signal ag_038 : std_logic;
    signal ag_039 : std_logic;
    signal ag_040 : std_logic;
    signal ag_041 : std_logic;
    signal ag_042 : std_logic;
    signal ag_043 : std_logic;
    signal ag_044 : std_logic;
    signal ag_045 : std_logic;
    signal ag_046 : std_logic;
    signal ag_047 : std_logic;
    signal ag_048 : std_logic;
    signal ag_049 : std_logic;
    signal ag_050 : std_logic;
    signal ag_051 : std_logic;
    signal ag_052 : std_logic;
    signal ag_053 : std_logic;
    signal ag_054 : std_logic;
    signal ag_055 : std_logic;
    signal ag_056 : std_logic;
    signal ag_057 : std_logic;
    signal ag_058 : std_logic;
    signal ag_059 : std_logic;
    signal ag_060 : std_logic;
    signal ag_061 : std_logic;
    signal ag_062 : std_logic;
    signal ag_063 : std_logic;
    signal ag_064 : std_logic;
    signal ag_065 : std_logic;
    signal ag_066 : std_logic;
    signal ag_067 : std_logic;
    signal ag_068 : std_logic;
    signal ag_069 : std_logic;
    signal ag_070 : std_logic;
    signal ag_071 : std_logic;
    signal ag_072 : std_logic;
    signal ag_073 : std_logic;
    signal ag_074 : std_logic;
    signal ag_075 : std_logic;
    signal ag_076 : std_logic;
    signal ag_077 : std_logic;
    signal ag_078 : std_logic;
    signal ag_079 : std_logic;
    signal ag_080 : std_logic;
    signal ag_081 : std_logic;
    signal ag_082 : std_logic;
    signal ag_083 : std_logic;
    signal ag_084 : std_logic;
    signal ag_085 : std_logic;
    signal ag_086 : std_logic;
    signal ag_087 : std_logic;
    signal ag_088 : std_logic;
    signal ag_089 : std_logic;
    signal ag_090 : std_logic;
    signal ag_091 : std_logic;
    signal ag_092 : std_logic;
    signal ag_093 : std_logic;
    signal ag_094 : std_logic;
    signal ag_095 : std_logic;
    signal ag_096 : std_logic;
    signal ag_097 : std_logic;
    signal ag_098 : std_logic;
    signal ag_099 : std_logic;
    signal ag_100 : std_logic;
    signal ag_101 : std_logic;
    signal ag_102 : std_logic;
    signal ag_103 : std_logic;
    signal CAN_FIRE_RL_mkConnectionGetPut : std_logic;
    signal CAN_FIRE_RL_mkConnectionGetPut_1 : std_logic;
    signal CAN_FIRE_RL_mkConnectionGetPut_10 : std_logic;
    signal CAN_FIRE_RL_mkConnectionGetPut_11 : std_logic;
    signal CAN_FIRE_RL_mkConnectionGetPut_12 : std_logic;
    signal CAN_FIRE_RL_mkConnectionGetPut_13 : std_logic;
    signal CAN_FIRE_RL_mkConnectionGetPut_14 : std_logic;
    signal CAN_FIRE_RL_mkConnectionGetPut_15 : std_logic;
    signal CAN_FIRE_RL_mkConnectionGetPut_16 : std_logic;
    signal CAN_FIRE_RL_mkConnectionGetPut_17 : std_logic;
    signal CAN_FIRE_RL_mkConnectionGetPut_18 : std_logic;
    signal CAN_FIRE_RL_mkConnectionGetPut_19 : std_logic;
    signal CAN_FIRE_RL_mkConnectionGetPut_2 : std_logic;
    signal CAN_FIRE_RL_mkConnectionGetPut_20 : std_logic;
    signal CAN_FIRE_RL_mkConnectionGetPut_3 : std_logic;
    signal CAN_FIRE_RL_mkConnectionGetPut_4 : std_logic;
    signal CAN_FIRE_RL_mkConnectionGetPut_5 : std_logic;
    signal CAN_FIRE_RL_mkConnectionGetPut_6 : std_logic;
    signal CAN_FIRE_RL_mkConnectionGetPut_7 : std_logic;
    signal CAN_FIRE_RL_mkConnectionGetPut_8 : std_logic;
    signal CAN_FIRE_RL_mkConnectionGetPut_9 : std_logic;
    signal CAN_FIRE_RL_rlConnect : std_logic;
    signal CAN_FIRE_RL_rlConnect_1 : std_logic;
    signal CAN_FIRE_RL_rlConnect_2 : std_logic;
    signal CAN_FIRE_RL_rlConnect_3 : std_logic;
    signal CAN_FIRE_RL_rlConnect_4 : std_logic;
    signal CAN_FIRE_RL_rlConnect_5 : std_logic;
    signal CAN_FIRE_RL_rlConnect_6 : std_logic;
    signal CAN_FIRE_RL_rlEvaluateOutput : std_logic;
    signal CAN_FIRE_RL_rlPutCodeWordIn : std_logic;
    signal CAN_FIRE_request_put : std_logic;
    signal CAN_FIRE_response_get : std_logic;
    signal \MUX_rgIdle_write_1__SEL_1  : std_logic;
    signal WILL_FIRE_RL_mkConnectionGetPut : std_logic;
    signal WILL_FIRE_RL_mkConnectionGetPut_1 : std_logic;
    signal WILL_FIRE_RL_mkConnectionGetPut_10 : std_logic;
    signal WILL_FIRE_RL_mkConnectionGetPut_11 : std_logic;
    signal WILL_FIRE_RL_mkConnectionGetPut_12 : std_logic;
    signal WILL_FIRE_RL_mkConnectionGetPut_13 : std_logic;
    signal WILL_FIRE_RL_mkConnectionGetPut_14 : std_logic;
    signal WILL_FIRE_RL_mkConnectionGetPut_15 : std_logic;
    signal WILL_FIRE_RL_mkConnectionGetPut_16 : std_logic;
    signal WILL_FIRE_RL_mkConnectionGetPut_17 : std_logic;
    signal WILL_FIRE_RL_mkConnectionGetPut_18 : std_logic;
    signal WILL_FIRE_RL_mkConnectionGetPut_19 : std_logic;
    signal WILL_FIRE_RL_mkConnectionGetPut_2 : std_logic;
    signal WILL_FIRE_RL_mkConnectionGetPut_20 : std_logic;
    signal WILL_FIRE_RL_mkConnectionGetPut_3 : std_logic;
    signal WILL_FIRE_RL_mkConnectionGetPut_4 : std_logic;
    signal WILL_FIRE_RL_mkConnectionGetPut_5 : std_logic;
    signal WILL_FIRE_RL_mkConnectionGetPut_6 : std_logic;
    signal WILL_FIRE_RL_mkConnectionGetPut_7 : std_logic;
    signal WILL_FIRE_RL_mkConnectionGetPut_8 : std_logic;
    signal WILL_FIRE_RL_mkConnectionGetPut_9 : std_logic;
    signal WILL_FIRE_RL_rlConnect : std_logic;
    signal WILL_FIRE_RL_rlConnect_1 : std_logic;
    signal WILL_FIRE_RL_rlConnect_2 : std_logic;
    signal WILL_FIRE_RL_rlConnect_3 : std_logic;
    signal WILL_FIRE_RL_rlConnect_4 : std_logic;
    signal WILL_FIRE_RL_rlConnect_5 : std_logic;
    signal WILL_FIRE_RL_rlConnect_6 : std_logic;
    signal WILL_FIRE_RL_rlEvaluateOutput : std_logic;
    signal WILL_FIRE_RL_rlPutCodeWordIn : std_logic;
    signal WILL_FIRE_request_put : std_logic;
    signal WILL_FIRE_response_get : std_logic;
    signal sffI_DEQ : std_logic;
    signal sffI_D_IN_0 : std_logic;
    signal sffI_D_IN_1 : std_logic;
    signal sffI_D_IN_2 : std_logic;
    signal sffI_D_IN_3 : std_logic;
    signal sffI_D_IN_4 : std_logic;
    signal sffI_D_IN_5 : std_logic;
    signal sffI_D_IN_6 : std_logic;
    signal sffI_D_OUT_0 : std_logic;
    signal sffI_D_OUT_1 : std_logic;
    signal sffI_D_OUT_2 : std_logic;
    signal sffI_D_OUT_3 : std_logic;
    signal sffI_D_OUT_4 : std_logic;
    signal sffI_D_OUT_5 : std_logic;
    signal sffI_D_OUT_6 : std_logic;
    signal sffI_EMPTY_N : std_logic;
    signal sffI_ENQ : std_logic;
    signal sffI_FULL_N : std_logic;
    signal sffO_DEQ : std_logic;
    signal sffO_D_IN_0 : std_logic;
    signal sffO_D_IN_1 : std_logic;
    signal sffO_D_IN_2 : std_logic;
    signal sffO_D_IN_3 : std_logic;
    signal sffO_D_IN_4 : std_logic;
    signal sffO_D_IN_5 : std_logic;
    signal sffO_D_IN_6 : std_logic;
    signal sffO_D_OUT_0 : std_logic;
    signal sffO_D_OUT_1 : std_logic;
    signal sffO_D_OUT_2 : std_logic;
    signal sffO_D_OUT_3 : std_logic;
    signal sffO_D_OUT_4 : std_logic;
    signal sffO_D_OUT_5 : std_logic;
    signal sffO_D_OUT_6 : std_logic;
    signal sffO_EMPTY_N : std_logic;
    signal sffO_ENQ : std_logic;
    signal sffO_FULL_N : std_logic;
    signal fnCheckDecodedWord_d200 : std_logic;
    signal rgIdle : std_logic;
    signal \rgIdle_D_IN  : std_logic;
    signal svBitNodes_0_EN_b2c_get : std_logic;
    signal svBitNodes_0_EN_c2b_0_put : std_logic;
    signal svBitNodes_0_EN_c2b_1_put : std_logic;
    signal svBitNodes_0_EN_c2b_2_put : std_logic;
    signal svBitNodes_0_EN_codeIn_put : std_logic;
    signal svBitNodes_0_EN_dataOut_get : std_logic;
    signal svBitNodes_0_RDY_b2c_get : std_logic;
    signal svBitNodes_0_RDY_c2b_0_put : std_logic;
    signal svBitNodes_0_RDY_c2b_1_put : std_logic;
    signal svBitNodes_0_RDY_c2b_2_put : std_logic;
    signal svBitNodes_0_RDY_codeIn_put : std_logic;
    signal svBitNodes_0_RDY_dataOut_get : std_logic;
    signal svBitNodes_0_b2c_get : std_logic;
    signal svBitNodes_0_c2b_0_put : std_logic;
    signal svBitNodes_0_c2b_1_put : std_logic;
    signal svBitNodes_0_c2b_2_put : std_logic;
    signal svBitNodes_0_codeIn_put : std_logic;
    signal svBitNodes_0_dataOut_get : std_logic;
    signal svBitNodes_1_EN_b2c_get : std_logic;
    signal svBitNodes_1_EN_c2b_0_put : std_logic;
    signal svBitNodes_1_EN_c2b_1_put : std_logic;
    signal svBitNodes_1_EN_c2b_2_put : std_logic;
    signal svBitNodes_1_EN_codeIn_put : std_logic;
    signal svBitNodes_1_EN_dataOut_get : std_logic;
    signal svBitNodes_1_RDY_b2c_get : std_logic;
    signal svBitNodes_1_RDY_c2b_0_put : std_logic;
    signal svBitNodes_1_RDY_c2b_1_put : std_logic;
    signal svBitNodes_1_RDY_c2b_2_put : std_logic;
    signal svBitNodes_1_RDY_codeIn_put : std_logic;
    signal svBitNodes_1_RDY_dataOut_get : std_logic;
    signal svBitNodes_1_b2c_get : std_logic;
    signal svBitNodes_1_c2b_0_put : std_logic;
    signal svBitNodes_1_c2b_1_put : std_logic;
    signal svBitNodes_1_c2b_2_put : std_logic;
    signal svBitNodes_1_codeIn_put : std_logic;
    signal svBitNodes_1_dataOut_get : std_logic;
    signal svBitNodes_2_EN_b2c_get : std_logic;
    signal svBitNodes_2_EN_c2b_0_put : std_logic;
    signal svBitNodes_2_EN_c2b_1_put : std_logic;
    signal svBitNodes_2_EN_c2b_2_put : std_logic;
    signal svBitNodes_2_EN_codeIn_put : std_logic;
    signal svBitNodes_2_EN_dataOut_get : std_logic;
    signal svBitNodes_2_RDY_b2c_get : std_logic;
    signal svBitNodes_2_RDY_c2b_0_put : std_logic;
    signal svBitNodes_2_RDY_c2b_1_put : std_logic;
    signal svBitNodes_2_RDY_c2b_2_put : std_logic;
    signal svBitNodes_2_RDY_codeIn_put : std_logic;
    signal svBitNodes_2_RDY_dataOut_get : std_logic;
    signal svBitNodes_2_b2c_get : std_logic;
    signal svBitNodes_2_c2b_0_put : std_logic;
    signal svBitNodes_2_c2b_1_put : std_logic;
    signal svBitNodes_2_c2b_2_put : std_logic;
    signal svBitNodes_2_codeIn_put : std_logic;
    signal svBitNodes_2_dataOut_get : std_logic;
    signal svBitNodes_3_EN_b2c_get : std_logic;
    signal svBitNodes_3_EN_c2b_0_put : std_logic;
    signal svBitNodes_3_EN_c2b_1_put : std_logic;
    signal svBitNodes_3_EN_c2b_2_put : std_logic;
    signal svBitNodes_3_EN_codeIn_put : std_logic;
    signal svBitNodes_3_EN_dataOut_get : std_logic;
    signal svBitNodes_3_RDY_b2c_get : std_logic;
    signal svBitNodes_3_RDY_c2b_0_put : std_logic;
    signal svBitNodes_3_RDY_c2b_1_put : std_logic;
    signal svBitNodes_3_RDY_c2b_2_put : std_logic;
    signal svBitNodes_3_RDY_codeIn_put : std_logic;
    signal svBitNodes_3_RDY_dataOut_get : std_logic;
    signal svBitNodes_3_b2c_get : std_logic;
    signal svBitNodes_3_c2b_0_put : std_logic;
    signal svBitNodes_3_c2b_1_put : std_logic;
    signal svBitNodes_3_c2b_2_put : std_logic;
    signal svBitNodes_3_codeIn_put : std_logic;
    signal svBitNodes_3_dataOut_get : std_logic;
    signal svBitNodes_4_EN_b2c_get : std_logic;
    signal svBitNodes_4_EN_c2b_0_put : std_logic;
    signal svBitNodes_4_EN_c2b_1_put : std_logic;
    signal svBitNodes_4_EN_c2b_2_put : std_logic;
    signal svBitNodes_4_EN_codeIn_put : std_logic;
    signal svBitNodes_4_EN_dataOut_get : std_logic;
    signal svBitNodes_4_RDY_b2c_get : std_logic;
    signal svBitNodes_4_RDY_c2b_0_put : std_logic;
    signal svBitNodes_4_RDY_c2b_1_put : std_logic;
    signal svBitNodes_4_RDY_c2b_2_put : std_logic;
    signal svBitNodes_4_RDY_codeIn_put : std_logic;
    signal svBitNodes_4_RDY_dataOut_get : std_logic;
    signal svBitNodes_4_b2c_get : std_logic;
    signal svBitNodes_4_c2b_0_put : std_logic;
    signal svBitNodes_4_c2b_1_put : std_logic;
    signal svBitNodes_4_c2b_2_put : std_logic;
    signal svBitNodes_4_codeIn_put : std_logic;
    signal svBitNodes_4_dataOut_get : std_logic;
    signal svBitNodes_5_EN_b2c_get : std_logic;
    signal svBitNodes_5_EN_c2b_0_put : std_logic;
    signal svBitNodes_5_EN_c2b_1_put : std_logic;
    signal svBitNodes_5_EN_c2b_2_put : std_logic;
    signal svBitNodes_5_EN_codeIn_put : std_logic;
    signal svBitNodes_5_EN_dataOut_get : std_logic;
    signal svBitNodes_5_RDY_b2c_get : std_logic;
    signal svBitNodes_5_RDY_c2b_0_put : std_logic;
    signal svBitNodes_5_RDY_c2b_1_put : std_logic;
    signal svBitNodes_5_RDY_c2b_2_put : std_logic;
    signal svBitNodes_5_RDY_codeIn_put : std_logic;
    signal svBitNodes_5_RDY_dataOut_get : std_logic;
    signal svBitNodes_5_b2c_get : std_logic;
    signal svBitNodes_5_c2b_0_put : std_logic;
    signal svBitNodes_5_c2b_1_put : std_logic;
    signal svBitNodes_5_c2b_2_put : std_logic;
    signal svBitNodes_5_codeIn_put : std_logic;
    signal svBitNodes_5_dataOut_get : std_logic;
    signal svBitNodes_6_EN_b2c_get : std_logic;
    signal svBitNodes_6_EN_c2b_0_put : std_logic;
    signal svBitNodes_6_EN_c2b_1_put : std_logic;
    signal svBitNodes_6_EN_c2b_2_put : std_logic;
    signal svBitNodes_6_EN_codeIn_put : std_logic;
    signal svBitNodes_6_EN_dataOut_get : std_logic;
    signal svBitNodes_6_RDY_b2c_get : std_logic;
    signal svBitNodes_6_RDY_c2b_0_put : std_logic;
    signal svBitNodes_6_RDY_c2b_1_put : std_logic;
    signal svBitNodes_6_RDY_c2b_2_put : std_logic;
    signal svBitNodes_6_RDY_codeIn_put : std_logic;
    signal svBitNodes_6_RDY_dataOut_get : std_logic;
    signal svBitNodes_6_b2c_get : std_logic;
    signal svBitNodes_6_c2b_0_put : std_logic;
    signal svBitNodes_6_c2b_1_put : std_logic;
    signal svBitNodes_6_c2b_2_put : std_logic;
    signal svBitNodes_6_codeIn_put : std_logic;
    signal svBitNodes_6_dataOut_get : std_logic;
    signal svCheckNodes_0_EN_b2c_0_put : std_logic;
    signal svCheckNodes_0_EN_b2c_1_put : std_logic;
    signal svCheckNodes_0_EN_b2c_2_put : std_logic;
    signal svCheckNodes_0_EN_c2b_0_get : std_logic;
    signal svCheckNodes_0_EN_c2b_1_get : std_logic;
    signal svCheckNodes_0_EN_c2b_2_get : std_logic;
    signal svCheckNodes_0_RDY_b2c_0_put : std_logic;
    signal svCheckNodes_0_RDY_b2c_1_put : std_logic;
    signal svCheckNodes_0_RDY_b2c_2_put : std_logic;
    signal svCheckNodes_0_RDY_c2b_0_get : std_logic;
    signal svCheckNodes_0_RDY_c2b_1_get : std_logic;
    signal svCheckNodes_0_RDY_c2b_2_get : std_logic;
    signal svCheckNodes_0_b2c_0_put : std_logic;
    signal svCheckNodes_0_b2c_1_put : std_logic;
    signal svCheckNodes_0_b2c_2_put : std_logic;
    signal svCheckNodes_0_c2b_0_get : std_logic;
    signal svCheckNodes_0_c2b_1_get : std_logic;
    signal svCheckNodes_0_c2b_2_get : std_logic;
    signal svCheckNodes_1_EN_b2c_0_put : std_logic;
    signal svCheckNodes_1_EN_b2c_1_put : std_logic;
    signal svCheckNodes_1_EN_b2c_2_put : std_logic;
    signal svCheckNodes_1_EN_c2b_0_get : std_logic;
    signal svCheckNodes_1_EN_c2b_1_get : std_logic;
    signal svCheckNodes_1_EN_c2b_2_get : std_logic;
    signal svCheckNodes_1_RDY_b2c_0_put : std_logic;
    signal svCheckNodes_1_RDY_b2c_1_put : std_logic;
    signal svCheckNodes_1_RDY_b2c_2_put : std_logic;
    signal svCheckNodes_1_RDY_c2b_0_get : std_logic;
    signal svCheckNodes_1_RDY_c2b_1_get : std_logic;
    signal svCheckNodes_1_RDY_c2b_2_get : std_logic;
    signal svCheckNodes_1_b2c_0_put : std_logic;
    signal svCheckNodes_1_b2c_1_put : std_logic;
    signal svCheckNodes_1_b2c_2_put : std_logic;
    signal svCheckNodes_1_c2b_0_get : std_logic;
    signal svCheckNodes_1_c2b_1_get : std_logic;
    signal svCheckNodes_1_c2b_2_get : std_logic;
    signal svCheckNodes_2_EN_b2c_0_put : std_logic;
    signal svCheckNodes_2_EN_b2c_1_put : std_logic;
    signal svCheckNodes_2_EN_b2c_2_put : std_logic;
    signal svCheckNodes_2_EN_c2b_0_get : std_logic;
    signal svCheckNodes_2_EN_c2b_1_get : std_logic;
    signal svCheckNodes_2_EN_c2b_2_get : std_logic;
    signal svCheckNodes_2_RDY_b2c_0_put : std_logic;
    signal svCheckNodes_2_RDY_b2c_1_put : std_logic;
    signal svCheckNodes_2_RDY_b2c_2_put : std_logic;
    signal svCheckNodes_2_RDY_c2b_0_get : std_logic;
    signal svCheckNodes_2_RDY_c2b_1_get : std_logic;
    signal svCheckNodes_2_RDY_c2b_2_get : std_logic;
    signal svCheckNodes_2_b2c_0_put : std_logic;
    signal svCheckNodes_2_b2c_1_put : std_logic;
    signal svCheckNodes_2_b2c_2_put : std_logic;
    signal svCheckNodes_2_c2b_0_get : std_logic;
    signal svCheckNodes_2_c2b_1_get : std_logic;
    signal svCheckNodes_2_c2b_2_get : std_logic;
    signal svCheckNodes_3_EN_b2c_0_put : std_logic;
    signal svCheckNodes_3_EN_b2c_1_put : std_logic;
    signal svCheckNodes_3_EN_b2c_2_put : std_logic;
    signal svCheckNodes_3_EN_c2b_0_get : std_logic;
    signal svCheckNodes_3_EN_c2b_1_get : std_logic;
    signal svCheckNodes_3_EN_c2b_2_get : std_logic;
    signal svCheckNodes_3_RDY_b2c_0_put : std_logic;
    signal svCheckNodes_3_RDY_b2c_1_put : std_logic;
    signal svCheckNodes_3_RDY_b2c_2_put : std_logic;
    signal svCheckNodes_3_RDY_c2b_0_get : std_logic;
    signal svCheckNodes_3_RDY_c2b_1_get : std_logic;
    signal svCheckNodes_3_RDY_c2b_2_get : std_logic;
    signal svCheckNodes_3_b2c_0_put : std_logic;
    signal svCheckNodes_3_b2c_1_put : std_logic;
    signal svCheckNodes_3_b2c_2_put : std_logic;
    signal svCheckNodes_3_c2b_0_get : std_logic;
    signal svCheckNodes_3_c2b_1_get : std_logic;
    signal svCheckNodes_3_c2b_2_get : std_logic;
    signal svCheckNodes_4_EN_b2c_0_put : std_logic;
    signal svCheckNodes_4_EN_b2c_1_put : std_logic;
    signal svCheckNodes_4_EN_b2c_2_put : std_logic;
    signal svCheckNodes_4_EN_c2b_0_get : std_logic;
    signal svCheckNodes_4_EN_c2b_1_get : std_logic;
    signal svCheckNodes_4_EN_c2b_2_get : std_logic;
    signal svCheckNodes_4_RDY_b2c_0_put : std_logic;
    signal svCheckNodes_4_RDY_b2c_1_put : std_logic;
    signal svCheckNodes_4_RDY_b2c_2_put : std_logic;
    signal svCheckNodes_4_RDY_c2b_0_get : std_logic;
    signal svCheckNodes_4_RDY_c2b_1_get : std_logic;
    signal svCheckNodes_4_RDY_c2b_2_get : std_logic;
    signal svCheckNodes_4_b2c_0_put : std_logic;
    signal svCheckNodes_4_b2c_1_put : std_logic;
    signal svCheckNodes_4_b2c_2_put : std_logic;
    signal svCheckNodes_4_c2b_0_get : std_logic;
    signal svCheckNodes_4_c2b_1_get : std_logic;
    signal svCheckNodes_4_c2b_2_get : std_logic;
    signal svCheckNodes_5_EN_b2c_0_put : std_logic;
    signal svCheckNodes_5_EN_b2c_1_put : std_logic;
    signal svCheckNodes_5_EN_b2c_2_put : std_logic;
    signal svCheckNodes_5_EN_c2b_0_get : std_logic;
    signal svCheckNodes_5_EN_c2b_1_get : std_logic;
    signal svCheckNodes_5_EN_c2b_2_get : std_logic;
    signal svCheckNodes_5_RDY_b2c_0_put : std_logic;
    signal svCheckNodes_5_RDY_b2c_1_put : std_logic;
    signal svCheckNodes_5_RDY_b2c_2_put : std_logic;
    signal svCheckNodes_5_RDY_c2b_0_get : std_logic;
    signal svCheckNodes_5_RDY_c2b_1_get : std_logic;
    signal svCheckNodes_5_RDY_c2b_2_get : std_logic;
    signal svCheckNodes_5_b2c_0_put : std_logic;
    signal svCheckNodes_5_b2c_1_put : std_logic;
    signal svCheckNodes_5_b2c_2_put : std_logic;
    signal svCheckNodes_5_c2b_0_get : std_logic;
    signal svCheckNodes_5_c2b_1_get : std_logic;
    signal svCheckNodes_5_c2b_2_get : std_logic;
    signal svCheckNodes_6_EN_b2c_0_put : std_logic;
    signal svCheckNodes_6_EN_b2c_1_put : std_logic;
    signal svCheckNodes_6_EN_b2c_2_put : std_logic;
    signal svCheckNodes_6_EN_c2b_0_get : std_logic;
    signal svCheckNodes_6_EN_c2b_1_get : std_logic;
    signal svCheckNodes_6_EN_c2b_2_get : std_logic;
    signal svCheckNodes_6_RDY_b2c_0_put : std_logic;
    signal svCheckNodes_6_RDY_b2c_1_put : std_logic;
    signal svCheckNodes_6_RDY_b2c_2_put : std_logic;
    signal svCheckNodes_6_RDY_c2b_0_get : std_logic;
    signal svCheckNodes_6_RDY_c2b_1_get : std_logic;
    signal svCheckNodes_6_RDY_c2b_2_get : std_logic;
    signal svCheckNodes_6_b2c_0_put : std_logic;
    signal svCheckNodes_6_b2c_1_put : std_logic;
    signal svCheckNodes_6_b2c_2_put : std_logic;
    signal svCheckNodes_6_c2b_0_get : std_logic;
    signal svCheckNodes_6_c2b_1_get : std_logic;
    signal svCheckNodes_6_c2b_2_get : std_logic;
    component std_nand2 is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_nor2 is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_inv is 
         port (
            a :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_nor3 is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            c :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_nand3 is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            c :  in std_logic;
            y :  inout std_logic
        );
    end component; 
    component std_aoi is 
         port (
            a :  inout std_logic;
            b :  inout std_logic;
            c :  inout std_logic;
            y :  inout std_logic
        );
    end component; 
    component d_ff is 
         port (
            clk :  in std_logic;
            d :  inout std_logic;
            q :  inout std_logic
        );
    end component; 
    component FIFO2_7 is 
         port (
            CLK :  in std_logic;
            CLR :  in std_logic;
            DEQ :  in std_logic;
            SD_IN_0 :  in std_logic;
            SD_IN_1 :  in std_logic;
            SD_IN_2 :  in std_logic;
            SD_IN_3 :  in std_logic;
            SD_IN_4 :  in std_logic;
            SD_IN_5 :  in std_logic;
            SD_IN_6 :  in std_logic;
            SD_OUT_0 :  out std_logic;
            SD_OUT_1 :  out std_logic;
            SD_OUT_2 :  out std_logic;
            SD_OUT_3 :  out std_logic;
            SD_OUT_4 :  out std_logic;
            SD_OUT_5 :  out std_logic;
            SD_OUT_6 :  out std_logic;
            EMPTY_N :  out std_logic;
            ENQ :  in std_logic;
            FULL_N :  out std_logic;
            RST :  in std_logic
        );
    end component; 
    component module_fnCheckDecodedWord is 
         port (
            fnCheckDecodedWord :  out std_logic;
            sfnCheckDecodedWord_b_0 :  in std_logic;
            sfnCheckDecodedWord_b_1 :  in std_logic;
            sfnCheckDecodedWord_b_2 :  in std_logic;
            sfnCheckDecodedWord_b_3 :  in std_logic;
            sfnCheckDecodedWord_b_4 :  in std_logic;
            sfnCheckDecodedWord_b_5 :  in std_logic;
            sfnCheckDecodedWord_b_6 :  in std_logic
        );
    end component; 
    component mkBitNode is 
         port (
            CLK :  in std_logic;
            EN_b2c_get :  in std_logic;
            EN_c2b_0_put :  in std_logic;
            EN_c2b_1_put :  in std_logic;
            EN_c2b_2_put :  in std_logic;
            EN_codeIn_put :  in std_logic;
            EN_dataOut_get :  in std_logic;
            RDY_b2c_get :  out std_logic;
            RDY_c2b_0_put :  out std_logic;
            RDY_c2b_1_put :  out std_logic;
            RDY_c2b_2_put :  out std_logic;
            RDY_codeIn_put :  out std_logic;
            RDY_dataOut_get :  out std_logic;
            RST_N :  in std_logic;
            b2c_get :  out std_logic;
            c2b_0_put :  in std_logic;
            c2b_1_put :  in std_logic;
            c2b_2_put :  in std_logic;
            codeIn_put :  in std_logic;
            dataOut_get :  out std_logic
        );
    end component; 
    component mkChkNode is 
         port (
            CLK :  in std_logic;
            EN_b2c_0_put :  in std_logic;
            EN_b2c_1_put :  in std_logic;
            EN_b2c_2_put :  in std_logic;
            EN_c2b_0_get :  in std_logic;
            EN_c2b_1_get :  in std_logic;
            EN_c2b_2_get :  in std_logic;
            RDY_b2c_0_put :  out std_logic;
            RDY_b2c_1_put :  out std_logic;
            RDY_b2c_2_put :  out std_logic;
            RDY_c2b_0_get :  out std_logic;
            RDY_c2b_1_get :  out std_logic;
            RDY_c2b_2_get :  out std_logic;
            RST_N :  in std_logic;
            b2c_0_put :  in std_logic;
            b2c_1_put :  in std_logic;
            b2c_2_put :  in std_logic;
            c2b_0_get :  out std_logic;
            c2b_1_get :  out std_logic;
            c2b_2_get :  out std_logic
        );
    end component; 
    begin 
        ag_104 : std_nand2
            port map (
                a => svCheckNodes_0_RDY_b2c_0_put,
                b => svBitNodes_0_RDY_b2c_get,
                y => ag_001
                );
        ag_105 : std_nand2
            port map (
                a => svCheckNodes_6_RDY_b2c_0_put,
                b => svCheckNodes_4_RDY_b2c_0_put,
                y => ag_002
                );
        ag_106 : std_nor2
            port map (
                a => ag_002,
                b => ag_001,
                y => svBitNodes_0_EN_b2c_get
                );
        ag_107 : std_nand2
            port map (
                a => svCheckNodes_0_RDY_b2c_1_put,
                b => svBitNodes_1_RDY_b2c_get,
                y => ag_003
                );
        ag_108 : std_nand2
            port map (
                a => svCheckNodes_5_RDY_b2c_0_put,
                b => svCheckNodes_1_RDY_b2c_0_put,
                y => ag_004
                );
        ag_109 : std_nor2
            port map (
                a => ag_004,
                b => ag_003,
                y => svBitNodes_1_EN_b2c_get
                );
        ag_110 : std_nand2
            port map (
                a => svCheckNodes_1_RDY_b2c_1_put,
                b => svBitNodes_2_RDY_b2c_get,
                y => ag_005
                );
        ag_111 : std_nand2
            port map (
                a => svCheckNodes_2_RDY_b2c_0_put,
                b => svCheckNodes_6_RDY_b2c_1_put,
                y => ag_006
                );
        ag_112 : std_nor2
            port map (
                a => ag_006,
                b => ag_005,
                y => svBitNodes_2_EN_b2c_get
                );
        ag_113 : std_nand2
            port map (
                a => svCheckNodes_0_RDY_b2c_2_put,
                b => svBitNodes_3_RDY_b2c_get,
                y => ag_007
                );
        ag_114 : std_nand2
            port map (
                a => svCheckNodes_3_RDY_b2c_0_put,
                b => svCheckNodes_2_RDY_b2c_1_put,
                y => ag_008
                );
        ag_115 : std_nor2
            port map (
                a => ag_008,
                b => ag_007,
                y => svBitNodes_3_EN_b2c_get
                );
        ag_116 : std_nand2
            port map (
                a => svCheckNodes_1_RDY_b2c_2_put,
                b => svBitNodes_4_RDY_b2c_get,
                y => ag_009
                );
        ag_117 : std_nand2
            port map (
                a => svCheckNodes_4_RDY_b2c_1_put,
                b => svCheckNodes_3_RDY_b2c_1_put,
                y => ag_010
                );
        ag_118 : std_nor2
            port map (
                a => ag_010,
                b => ag_009,
                y => svBitNodes_4_EN_b2c_get
                );
        ag_119 : std_nand2
            port map (
                a => svCheckNodes_2_RDY_b2c_2_put,
                b => svBitNodes_5_RDY_b2c_get,
                y => ag_011
                );
        ag_120 : std_nand2
            port map (
                a => svCheckNodes_5_RDY_b2c_1_put,
                b => svCheckNodes_4_RDY_b2c_2_put,
                y => ag_012
                );
        ag_121 : std_nor2
            port map (
                a => ag_012,
                b => ag_011,
                y => svBitNodes_5_EN_b2c_get
                );
        ag_122 : std_nand2
            port map (
                a => svCheckNodes_3_RDY_b2c_2_put,
                b => svBitNodes_6_RDY_b2c_get,
                y => ag_013
                );
        ag_123 : std_nand2
            port map (
                a => svCheckNodes_6_RDY_b2c_2_put,
                b => svCheckNodes_5_RDY_b2c_2_put,
                y => ag_014
                );
        ag_124 : std_nor2
            port map (
                a => ag_014,
                b => ag_013,
                y => svBitNodes_6_EN_b2c_get
                );
        ag_125 : std_inv
            port map (
                a => svBitNodes_0_RDY_c2b_0_put,
                y => ag_015
                );
        ag_126 : std_inv
            port map (
                a => svCheckNodes_0_RDY_c2b_0_get,
                y => ag_016
                );
        ag_127 : std_nor2
            port map (
                a => ag_016,
                b => ag_015,
                y => svBitNodes_0_EN_c2b_0_put
                );
        ag_128 : std_inv
            port map (
                a => svBitNodes_1_RDY_c2b_0_put,
                y => ag_017
                );
        ag_129 : std_inv
            port map (
                a => svCheckNodes_0_RDY_c2b_1_get,
                y => ag_018
                );
        ag_130 : std_nor2
            port map (
                a => ag_018,
                b => ag_017,
                y => svBitNodes_1_EN_c2b_0_put
                );
        ag_131 : std_inv
            port map (
                a => svBitNodes_3_RDY_c2b_0_put,
                y => ag_019
                );
        ag_132 : std_inv
            port map (
                a => svCheckNodes_0_RDY_c2b_2_get,
                y => ag_020
                );
        ag_133 : std_nor2
            port map (
                a => ag_020,
                b => ag_019,
                y => svBitNodes_3_EN_c2b_0_put
                );
        ag_134 : std_inv
            port map (
                a => svBitNodes_1_RDY_c2b_1_put,
                y => ag_021
                );
        ag_135 : std_inv
            port map (
                a => svCheckNodes_1_RDY_c2b_0_get,
                y => ag_022
                );
        ag_136 : std_nor2
            port map (
                a => ag_022,
                b => ag_021,
                y => svBitNodes_1_EN_c2b_1_put
                );
        ag_137 : std_inv
            port map (
                a => svBitNodes_2_RDY_c2b_0_put,
                y => ag_023
                );
        ag_138 : std_inv
            port map (
                a => svCheckNodes_1_RDY_c2b_1_get,
                y => ag_024
                );
        ag_139 : std_nor2
            port map (
                a => ag_024,
                b => ag_023,
                y => svBitNodes_2_EN_c2b_0_put
                );
        ag_140 : std_inv
            port map (
                a => svBitNodes_4_RDY_c2b_0_put,
                y => ag_025
                );
        ag_141 : std_inv
            port map (
                a => svCheckNodes_1_RDY_c2b_2_get,
                y => ag_026
                );
        ag_142 : std_nor2
            port map (
                a => ag_026,
                b => ag_025,
                y => svBitNodes_4_EN_c2b_0_put
                );
        ag_143 : std_inv
            port map (
                a => svBitNodes_2_RDY_c2b_1_put,
                y => ag_027
                );
        ag_144 : std_inv
            port map (
                a => svCheckNodes_2_RDY_c2b_0_get,
                y => ag_028
                );
        ag_145 : std_nor2
            port map (
                a => ag_028,
                b => ag_027,
                y => svBitNodes_2_EN_c2b_1_put
                );
        ag_146 : std_inv
            port map (
                a => svBitNodes_3_RDY_c2b_1_put,
                y => ag_029
                );
        ag_147 : std_inv
            port map (
                a => svCheckNodes_2_RDY_c2b_1_get,
                y => ag_030
                );
        ag_148 : std_nor2
            port map (
                a => ag_030,
                b => ag_029,
                y => svBitNodes_3_EN_c2b_1_put
                );
        ag_149 : std_inv
            port map (
                a => svBitNodes_5_RDY_c2b_0_put,
                y => ag_031
                );
        ag_150 : std_inv
            port map (
                a => svCheckNodes_2_RDY_c2b_2_get,
                y => ag_032
                );
        ag_151 : std_nor2
            port map (
                a => ag_032,
                b => ag_031,
                y => svBitNodes_5_EN_c2b_0_put
                );
        ag_152 : std_inv
            port map (
                a => svBitNodes_3_RDY_c2b_2_put,
                y => ag_033
                );
        ag_153 : std_inv
            port map (
                a => svCheckNodes_3_RDY_c2b_0_get,
                y => ag_034
                );
        ag_154 : std_nor2
            port map (
                a => ag_034,
                b => ag_033,
                y => svBitNodes_3_EN_c2b_2_put
                );
        ag_155 : std_inv
            port map (
                a => svBitNodes_4_RDY_c2b_1_put,
                y => ag_035
                );
        ag_156 : std_inv
            port map (
                a => svCheckNodes_3_RDY_c2b_1_get,
                y => ag_036
                );
        ag_157 : std_nor2
            port map (
                a => ag_036,
                b => ag_035,
                y => svBitNodes_4_EN_c2b_1_put
                );
        ag_158 : std_inv
            port map (
                a => svBitNodes_6_RDY_c2b_0_put,
                y => ag_037
                );
        ag_159 : std_inv
            port map (
                a => svCheckNodes_3_RDY_c2b_2_get,
                y => ag_038
                );
        ag_160 : std_nor2
            port map (
                a => ag_038,
                b => ag_037,
                y => svBitNodes_6_EN_c2b_0_put
                );
        ag_161 : std_inv
            port map (
                a => svBitNodes_0_RDY_c2b_1_put,
                y => ag_039
                );
        ag_162 : std_inv
            port map (
                a => svCheckNodes_4_RDY_c2b_0_get,
                y => ag_040
                );
        ag_163 : std_nor2
            port map (
                a => ag_040,
                b => ag_039,
                y => svBitNodes_0_EN_c2b_1_put
                );
        ag_164 : std_inv
            port map (
                a => svBitNodes_4_RDY_c2b_2_put,
                y => ag_041
                );
        ag_165 : std_inv
            port map (
                a => svCheckNodes_4_RDY_c2b_1_get,
                y => ag_042
                );
        ag_166 : std_nor2
            port map (
                a => ag_042,
                b => ag_041,
                y => svBitNodes_4_EN_c2b_2_put
                );
        ag_167 : std_inv
            port map (
                a => svBitNodes_5_RDY_c2b_1_put,
                y => ag_043
                );
        ag_168 : std_inv
            port map (
                a => svCheckNodes_4_RDY_c2b_2_get,
                y => ag_044
                );
        ag_169 : std_nor2
            port map (
                a => ag_044,
                b => ag_043,
                y => svBitNodes_5_EN_c2b_1_put
                );
        ag_170 : std_inv
            port map (
                a => svBitNodes_1_RDY_c2b_2_put,
                y => ag_045
                );
        ag_171 : std_inv
            port map (
                a => svCheckNodes_5_RDY_c2b_0_get,
                y => ag_046
                );
        ag_172 : std_nor2
            port map (
                a => ag_046,
                b => ag_045,
                y => svBitNodes_1_EN_c2b_2_put
                );
        ag_173 : std_inv
            port map (
                a => svBitNodes_5_RDY_c2b_2_put,
                y => ag_047
                );
        ag_174 : std_inv
            port map (
                a => svCheckNodes_5_RDY_c2b_1_get,
                y => ag_048
                );
        ag_175 : std_nor2
            port map (
                a => ag_048,
                b => ag_047,
                y => svBitNodes_5_EN_c2b_2_put
                );
        ag_176 : std_inv
            port map (
                a => svBitNodes_6_RDY_c2b_1_put,
                y => ag_049
                );
        ag_177 : std_inv
            port map (
                a => svCheckNodes_5_RDY_c2b_2_get,
                y => ag_050
                );
        ag_178 : std_nor2
            port map (
                a => ag_050,
                b => ag_049,
                y => svBitNodes_6_EN_c2b_1_put
                );
        ag_179 : std_inv
            port map (
                a => svBitNodes_0_RDY_c2b_2_put,
                y => ag_051
                );
        ag_180 : std_inv
            port map (
                a => svCheckNodes_6_RDY_c2b_0_get,
                y => ag_052
                );
        ag_181 : std_nor2
            port map (
                a => ag_052,
                b => ag_051,
                y => svBitNodes_0_EN_c2b_2_put
                );
        ag_182 : std_inv
            port map (
                a => svBitNodes_2_RDY_c2b_2_put,
                y => ag_053
                );
        ag_183 : std_inv
            port map (
                a => svCheckNodes_6_RDY_c2b_1_get,
                y => ag_054
                );
        ag_184 : std_nor2
            port map (
                a => ag_054,
                b => ag_053,
                y => svBitNodes_2_EN_c2b_2_put
                );
        ag_185 : std_inv
            port map (
                a => svBitNodes_6_RDY_c2b_2_put,
                y => ag_055
                );
        ag_186 : std_inv
            port map (
                a => svCheckNodes_6_RDY_c2b_2_get,
                y => ag_056
                );
        ag_187 : std_nor2
            port map (
                a => ag_056,
                b => ag_055,
                y => svBitNodes_6_EN_c2b_2_put
                );
        ag_188 : std_nand2
            port map (
                a => svBitNodes_2_RDY_codeIn_put,
                b => svBitNodes_1_RDY_codeIn_put,
                y => ag_057
                );
        ag_189 : std_nand2
            port map (
                a => svBitNodes_5_RDY_codeIn_put,
                b => svBitNodes_4_RDY_codeIn_put,
                y => ag_058
                );
        ag_190 : std_nand2
            port map (
                a => svBitNodes_6_RDY_codeIn_put,
                b => svBitNodes_3_RDY_codeIn_put,
                y => ag_059
                );
        ag_191 : std_nor3
            port map (
                a => ag_059,
                b => ag_058,
                c => ag_057,
                y => ag_060
                );
        ag_192 : std_inv
            port map (
                a => svBitNodes_0_RDY_codeIn_put,
                y => ag_061
                );
        ag_193 : std_inv
            port map (
                a => rgIdle,
                y => ag_062
                );
        ag_194 : std_nor2
            port map (
                a => ag_062,
                b => ag_061,
                y => ag_063
                );
        ag_195 : std_nand3
            port map (
                a => ag_063,
                b => ag_060,
                c => sffI_EMPTY_N,
                y => ag_064
                );
        ag_196 : std_inv
            port map (
                a => ag_064,
                y => WILL_FIRE_RL_rlPutCodeWordIn
                );
        ag_197 : std_nor2
            port map (
                a => ag_059,
                b => ag_057,
                y => ag_065
                );
        ag_198 : std_nand3
            port map (
                a => ag_065,
                b => svBitNodes_5_RDY_codeIn_put,
                c => svBitNodes_4_RDY_codeIn_put,
                y => ag_066
                );
        ag_199 : std_nand2
            port map (
                a => svBitNodes_5_RDY_dataOut_get,
                b => svBitNodes_4_RDY_dataOut_get,
                y => ag_067
                );
        ag_200 : std_nand2
            port map (
                a => sffO_FULL_N,
                b => svBitNodes_6_RDY_dataOut_get,
                y => ag_068
                );
        ag_201 : std_nor2
            port map (
                a => ag_068,
                b => ag_067,
                y => ag_069
                );
        ag_202 : std_nor2
            port map (
                a => rgIdle,
                b => ag_061,
                y => ag_070
                );
        ag_203 : std_nand2
            port map (
                a => svBitNodes_1_RDY_dataOut_get,
                b => svBitNodes_0_RDY_dataOut_get,
                y => ag_071
                );
        ag_204 : std_nand2
            port map (
                a => svBitNodes_3_RDY_dataOut_get,
                b => svBitNodes_2_RDY_dataOut_get,
                y => ag_072
                );
        ag_205 : std_nor2
            port map (
                a => ag_072,
                b => ag_071,
                y => ag_073
                );
        ag_206 : std_nand3
            port map (
                a => ag_073,
                b => ag_070,
                c => ag_069,
                y => ag_074
                );
        ag_207 : std_nor2
            port map (
                a => ag_074,
                b => ag_066,
                y => WILL_FIRE_RL_rlEvaluateOutput
                );
        ag_208 : std_nor3
            port map (
                a => ag_074,
                b => ag_066,
                c => fnCheckDecodedWord_d200,
                y => sffO_ENQ
                );
        ag_209 : std_nand2
            port map (
                a => WILL_FIRE_RL_rlEvaluateOutput,
                b => fnCheckDecodedWord_d200,
                y => ag_075
                );
        ag_210 : std_nand2
            port map (
                a => ag_075,
                b => ag_064,
                y => svBitNodes_0_EN_codeIn_put
                );
        ag_211 : std_inv
            port map (
                a => svBitNodes_0_dataOut_get,
                y => ag_076
                );
        ag_212 : std_inv
            port map (
                a => fnCheckDecodedWord_d200,
                y => ag_077
                );
        ag_213 : std_nand2
            port map (
                a => svBitNodes_2_RDY_dataOut_get,
                b => svBitNodes_1_RDY_dataOut_get,
                y => ag_078
                );
        ag_214 : std_nor2
            port map (
                a => ag_078,
                b => ag_067,
                y => ag_079
                );
        ag_215 : std_nand2
            port map (
                a => ag_079,
                b => ag_060,
                y => ag_080
                );
        ag_216 : std_inv
            port map (
                a => svBitNodes_6_RDY_dataOut_get,
                y => ag_081
                );
        ag_217 : std_inv
            port map (
                a => sffO_FULL_N,
                y => ag_082
                );
        ag_218 : std_nor2
            port map (
                a => ag_082,
                b => ag_081,
                y => ag_083
                );
        ag_219 : std_inv
            port map (
                a => svBitNodes_0_RDY_dataOut_get,
                y => ag_084
                );
        ag_220 : std_inv
            port map (
                a => svBitNodes_3_RDY_dataOut_get,
                y => ag_085
                );
        ag_221 : std_nor3
            port map (
                a => ag_085,
                b => ag_084,
                c => rgIdle,
                y => ag_086
                );
        ag_222 : std_nand3
            port map (
                a => ag_086,
                b => ag_083,
                c => svBitNodes_0_RDY_codeIn_put,
                y => ag_087
                );
        ag_223 : std_nor3
            port map (
                a => ag_087,
                b => ag_080,
                c => ag_077,
                y => ag_088
                );
        ag_224 : std_nor2
            port map (
                a => ag_088,
                b => sffI_D_OUT_0,
                y => ag_089
                );
        ag_225 : std_aoi
            port map (
                a => ag_088,
                b => ag_076,
                c => ag_089,
                y => svBitNodes_0_codeIn_put
                );
        ag_226 : std_inv
            port map (
                a => svBitNodes_1_dataOut_get,
                y => ag_090
                );
        ag_227 : std_nor2
            port map (
                a => ag_088,
                b => sffI_D_OUT_1,
                y => ag_091
                );
        ag_228 : std_aoi
            port map (
                a => ag_088,
                b => ag_090,
                c => ag_091,
                y => svBitNodes_1_codeIn_put
                );
        ag_229 : std_inv
            port map (
                a => svBitNodes_2_dataOut_get,
                y => ag_092
                );
        ag_230 : std_nor2
            port map (
                a => ag_088,
                b => sffI_D_OUT_2,
                y => ag_093
                );
        ag_231 : std_aoi
            port map (
                a => ag_088,
                b => ag_092,
                c => ag_093,
                y => svBitNodes_2_codeIn_put
                );
        ag_232 : std_inv
            port map (
                a => svBitNodes_3_dataOut_get,
                y => ag_094
                );
        ag_233 : std_nor2
            port map (
                a => ag_088,
                b => sffI_D_OUT_3,
                y => ag_095
                );
        ag_234 : std_aoi
            port map (
                a => ag_088,
                b => ag_094,
                c => ag_095,
                y => svBitNodes_3_codeIn_put
                );
        ag_235 : std_inv
            port map (
                a => svBitNodes_4_dataOut_get,
                y => ag_096
                );
        ag_236 : std_nor2
            port map (
                a => ag_088,
                b => sffI_D_OUT_4,
                y => ag_097
                );
        ag_237 : std_aoi
            port map (
                a => ag_088,
                b => ag_096,
                c => ag_097,
                y => svBitNodes_4_codeIn_put
                );
        ag_238 : std_inv
            port map (
                a => svBitNodes_5_dataOut_get,
                y => ag_098
                );
        ag_239 : std_nor2
            port map (
                a => ag_088,
                b => sffI_D_OUT_5,
                y => ag_099
                );
        ag_240 : std_aoi
            port map (
                a => ag_088,
                b => ag_098,
                c => ag_099,
                y => svBitNodes_5_codeIn_put
                );
        ag_241 : std_inv
            port map (
                a => svBitNodes_6_dataOut_get,
                y => ag_100
                );
        ag_242 : std_nor2
            port map (
                a => ag_088,
                b => sffI_D_OUT_6,
                y => ag_101
                );
        ag_243 : std_aoi
            port map (
                a => ag_088,
                b => ag_100,
                c => ag_101,
                y => svBitNodes_6_codeIn_put
                );
        ag_244 : std_nand2
            port map (
                a => WILL_FIRE_RL_rlEvaluateOutput,
                b => ag_077,
                y => ag_102
                );
        ag_245 : std_nand2
            port map (
                a => ag_064,
                b => rgIdle,
                y => ag_103
                );
        ag_246 : std_nand3
            port map (
                a => ag_103,
                b => ag_102,
                c => RST_N,
                y => ag_000
                );
        ag_247 : d_ff
            port map (
                clk => CLK,
                d => ag_000,
                q => rgIdle
                );
        ffI : FIFO2_7
            port map (
                CLK => CLK,
                CLR => '0',
                DEQ => WILL_FIRE_RL_rlPutCodeWordIn,
                EMPTY_N => sffI_EMPTY_N,
                ENQ => EN_request_put,
                FULL_N => sffI_FULL_N,
                RST => RST_N,
                SD_IN_0 => \request_put_0 ,
                SD_IN_1 => \request_put_1 ,
                SD_IN_2 => \request_put_2 ,
                SD_IN_3 => \request_put_3 ,
                SD_IN_4 => \request_put_4 ,
                SD_IN_5 => \request_put_5 ,
                SD_IN_6 => \request_put_6 ,
                SD_OUT_0 => sffI_D_OUT_0,
                SD_OUT_1 => sffI_D_OUT_1,
                SD_OUT_2 => sffI_D_OUT_2,
                SD_OUT_3 => sffI_D_OUT_3,
                SD_OUT_4 => sffI_D_OUT_4,
                SD_OUT_5 => sffI_D_OUT_5,
                SD_OUT_6 => sffI_D_OUT_6
                );
        ffO : FIFO2_7
            port map (
                CLK => CLK,
                CLR => '0',
                DEQ => EN_response_get,
                EMPTY_N => sffO_EMPTY_N,
                ENQ => sffO_ENQ,
                FULL_N => sffO_FULL_N,
                RST => RST_N,
                SD_IN_0 => svBitNodes_0_dataOut_get,
                SD_IN_1 => svBitNodes_1_dataOut_get,
                SD_IN_2 => svBitNodes_2_dataOut_get,
                SD_IN_3 => svBitNodes_3_dataOut_get,
                SD_IN_4 => svBitNodes_4_dataOut_get,
                SD_IN_5 => svBitNodes_5_dataOut_get,
                SD_IN_6 => svBitNodes_6_dataOut_get,
                SD_OUT_0 => sffO_D_OUT_0,
                SD_OUT_1 => sffO_D_OUT_1,
                SD_OUT_2 => sffO_D_OUT_2,
                SD_OUT_3 => sffO_D_OUT_3,
                SD_OUT_4 => sffO_D_OUT_4,
                SD_OUT_5 => sffO_D_OUT_5,
                SD_OUT_6 => sffO_D_OUT_6
                );
        instance_fnCheckDecodedWord_0 : module_fnCheckDecodedWord
            port map (
                fnCheckDecodedWord => fnCheckDecodedWord_d200,
                sfnCheckDecodedWord_b_0 => svBitNodes_0_dataOut_get,
                sfnCheckDecodedWord_b_1 => svBitNodes_1_dataOut_get,
                sfnCheckDecodedWord_b_2 => svBitNodes_2_dataOut_get,
                sfnCheckDecodedWord_b_3 => svBitNodes_3_dataOut_get,
                sfnCheckDecodedWord_b_4 => svBitNodes_4_dataOut_get,
                sfnCheckDecodedWord_b_5 => svBitNodes_5_dataOut_get,
                sfnCheckDecodedWord_b_6 => svBitNodes_6_dataOut_get
                );
        vBitNodes_0 : mkBitNode
            port map (
                CLK => CLK,
                EN_b2c_get => svBitNodes_0_EN_b2c_get,
                EN_c2b_0_put => svBitNodes_0_EN_c2b_0_put,
                EN_c2b_1_put => svBitNodes_0_EN_c2b_1_put,
                EN_c2b_2_put => svBitNodes_0_EN_c2b_2_put,
                EN_codeIn_put => svBitNodes_0_EN_codeIn_put,
                EN_dataOut_get => WILL_FIRE_RL_rlEvaluateOutput,
                RDY_b2c_get => svBitNodes_0_RDY_b2c_get,
                RDY_c2b_0_put => svBitNodes_0_RDY_c2b_0_put,
                RDY_c2b_1_put => svBitNodes_0_RDY_c2b_1_put,
                RDY_c2b_2_put => svBitNodes_0_RDY_c2b_2_put,
                RDY_codeIn_put => svBitNodes_0_RDY_codeIn_put,
                RDY_dataOut_get => svBitNodes_0_RDY_dataOut_get,
                RST_N => RST_N,
                b2c_get => svBitNodes_0_b2c_get,
                c2b_0_put => svBitNodes_0_c2b_0_put,
                c2b_1_put => svBitNodes_0_c2b_1_put,
                c2b_2_put => svBitNodes_0_c2b_2_put,
                codeIn_put => svBitNodes_0_codeIn_put,
                dataOut_get => svBitNodes_0_dataOut_get
                );
        vBitNodes_1 : mkBitNode
            port map (
                CLK => CLK,
                EN_b2c_get => svBitNodes_1_EN_b2c_get,
                EN_c2b_0_put => svBitNodes_1_EN_c2b_0_put,
                EN_c2b_1_put => svBitNodes_1_EN_c2b_1_put,
                EN_c2b_2_put => svBitNodes_1_EN_c2b_2_put,
                EN_codeIn_put => svBitNodes_0_EN_codeIn_put,
                EN_dataOut_get => WILL_FIRE_RL_rlEvaluateOutput,
                RDY_b2c_get => svBitNodes_1_RDY_b2c_get,
                RDY_c2b_0_put => svBitNodes_1_RDY_c2b_0_put,
                RDY_c2b_1_put => svBitNodes_1_RDY_c2b_1_put,
                RDY_c2b_2_put => svBitNodes_1_RDY_c2b_2_put,
                RDY_codeIn_put => svBitNodes_1_RDY_codeIn_put,
                RDY_dataOut_get => svBitNodes_1_RDY_dataOut_get,
                RST_N => RST_N,
                b2c_get => svBitNodes_1_b2c_get,
                c2b_0_put => svBitNodes_1_c2b_0_put,
                c2b_1_put => svBitNodes_1_c2b_1_put,
                c2b_2_put => svBitNodes_1_c2b_2_put,
                codeIn_put => svBitNodes_1_codeIn_put,
                dataOut_get => svBitNodes_1_dataOut_get
                );
        vBitNodes_2 : mkBitNode
            port map (
                CLK => CLK,
                EN_b2c_get => svBitNodes_2_EN_b2c_get,
                EN_c2b_0_put => svBitNodes_2_EN_c2b_0_put,
                EN_c2b_1_put => svBitNodes_2_EN_c2b_1_put,
                EN_c2b_2_put => svBitNodes_2_EN_c2b_2_put,
                EN_codeIn_put => svBitNodes_0_EN_codeIn_put,
                EN_dataOut_get => WILL_FIRE_RL_rlEvaluateOutput,
                RDY_b2c_get => svBitNodes_2_RDY_b2c_get,
                RDY_c2b_0_put => svBitNodes_2_RDY_c2b_0_put,
                RDY_c2b_1_put => svBitNodes_2_RDY_c2b_1_put,
                RDY_c2b_2_put => svBitNodes_2_RDY_c2b_2_put,
                RDY_codeIn_put => svBitNodes_2_RDY_codeIn_put,
                RDY_dataOut_get => svBitNodes_2_RDY_dataOut_get,
                RST_N => RST_N,
                b2c_get => svBitNodes_2_b2c_get,
                c2b_0_put => svBitNodes_2_c2b_0_put,
                c2b_1_put => svBitNodes_2_c2b_1_put,
                c2b_2_put => svBitNodes_2_c2b_2_put,
                codeIn_put => svBitNodes_2_codeIn_put,
                dataOut_get => svBitNodes_2_dataOut_get
                );
        vBitNodes_3 : mkBitNode
            port map (
                CLK => CLK,
                EN_b2c_get => svBitNodes_3_EN_b2c_get,
                EN_c2b_0_put => svBitNodes_3_EN_c2b_0_put,
                EN_c2b_1_put => svBitNodes_3_EN_c2b_1_put,
                EN_c2b_2_put => svBitNodes_3_EN_c2b_2_put,
                EN_codeIn_put => svBitNodes_0_EN_codeIn_put,
                EN_dataOut_get => WILL_FIRE_RL_rlEvaluateOutput,
                RDY_b2c_get => svBitNodes_3_RDY_b2c_get,
                RDY_c2b_0_put => svBitNodes_3_RDY_c2b_0_put,
                RDY_c2b_1_put => svBitNodes_3_RDY_c2b_1_put,
                RDY_c2b_2_put => svBitNodes_3_RDY_c2b_2_put,
                RDY_codeIn_put => svBitNodes_3_RDY_codeIn_put,
                RDY_dataOut_get => svBitNodes_3_RDY_dataOut_get,
                RST_N => RST_N,
                b2c_get => svBitNodes_3_b2c_get,
                c2b_0_put => svBitNodes_3_c2b_0_put,
                c2b_1_put => svBitNodes_3_c2b_1_put,
                c2b_2_put => svBitNodes_3_c2b_2_put,
                codeIn_put => svBitNodes_3_codeIn_put,
                dataOut_get => svBitNodes_3_dataOut_get
                );
        vBitNodes_4 : mkBitNode
            port map (
                CLK => CLK,
                EN_b2c_get => svBitNodes_4_EN_b2c_get,
                EN_c2b_0_put => svBitNodes_4_EN_c2b_0_put,
                EN_c2b_1_put => svBitNodes_4_EN_c2b_1_put,
                EN_c2b_2_put => svBitNodes_4_EN_c2b_2_put,
                EN_codeIn_put => svBitNodes_0_EN_codeIn_put,
                EN_dataOut_get => WILL_FIRE_RL_rlEvaluateOutput,
                RDY_b2c_get => svBitNodes_4_RDY_b2c_get,
                RDY_c2b_0_put => svBitNodes_4_RDY_c2b_0_put,
                RDY_c2b_1_put => svBitNodes_4_RDY_c2b_1_put,
                RDY_c2b_2_put => svBitNodes_4_RDY_c2b_2_put,
                RDY_codeIn_put => svBitNodes_4_RDY_codeIn_put,
                RDY_dataOut_get => svBitNodes_4_RDY_dataOut_get,
                RST_N => RST_N,
                b2c_get => svBitNodes_4_b2c_get,
                c2b_0_put => svBitNodes_4_c2b_0_put,
                c2b_1_put => svBitNodes_4_c2b_1_put,
                c2b_2_put => svBitNodes_4_c2b_2_put,
                codeIn_put => svBitNodes_4_codeIn_put,
                dataOut_get => svBitNodes_4_dataOut_get
                );
        vBitNodes_5 : mkBitNode
            port map (
                CLK => CLK,
                EN_b2c_get => svBitNodes_5_EN_b2c_get,
                EN_c2b_0_put => svBitNodes_5_EN_c2b_0_put,
                EN_c2b_1_put => svBitNodes_5_EN_c2b_1_put,
                EN_c2b_2_put => svBitNodes_5_EN_c2b_2_put,
                EN_codeIn_put => svBitNodes_0_EN_codeIn_put,
                EN_dataOut_get => WILL_FIRE_RL_rlEvaluateOutput,
                RDY_b2c_get => svBitNodes_5_RDY_b2c_get,
                RDY_c2b_0_put => svBitNodes_5_RDY_c2b_0_put,
                RDY_c2b_1_put => svBitNodes_5_RDY_c2b_1_put,
                RDY_c2b_2_put => svBitNodes_5_RDY_c2b_2_put,
                RDY_codeIn_put => svBitNodes_5_RDY_codeIn_put,
                RDY_dataOut_get => svBitNodes_5_RDY_dataOut_get,
                RST_N => RST_N,
                b2c_get => svBitNodes_5_b2c_get,
                c2b_0_put => svBitNodes_5_c2b_0_put,
                c2b_1_put => svBitNodes_5_c2b_1_put,
                c2b_2_put => svBitNodes_5_c2b_2_put,
                codeIn_put => svBitNodes_5_codeIn_put,
                dataOut_get => svBitNodes_5_dataOut_get
                );
        vBitNodes_6 : mkBitNode
            port map (
                CLK => CLK,
                EN_b2c_get => svBitNodes_6_EN_b2c_get,
                EN_c2b_0_put => svBitNodes_6_EN_c2b_0_put,
                EN_c2b_1_put => svBitNodes_6_EN_c2b_1_put,
                EN_c2b_2_put => svBitNodes_6_EN_c2b_2_put,
                EN_codeIn_put => svBitNodes_0_EN_codeIn_put,
                EN_dataOut_get => WILL_FIRE_RL_rlEvaluateOutput,
                RDY_b2c_get => svBitNodes_6_RDY_b2c_get,
                RDY_c2b_0_put => svBitNodes_6_RDY_c2b_0_put,
                RDY_c2b_1_put => svBitNodes_6_RDY_c2b_1_put,
                RDY_c2b_2_put => svBitNodes_6_RDY_c2b_2_put,
                RDY_codeIn_put => svBitNodes_6_RDY_codeIn_put,
                RDY_dataOut_get => svBitNodes_6_RDY_dataOut_get,
                RST_N => RST_N,
                b2c_get => svBitNodes_6_b2c_get,
                c2b_0_put => svBitNodes_6_c2b_0_put,
                c2b_1_put => svBitNodes_6_c2b_1_put,
                c2b_2_put => svBitNodes_6_c2b_2_put,
                codeIn_put => svBitNodes_6_codeIn_put,
                dataOut_get => svBitNodes_6_dataOut_get
                );
        vCheckNodes_0 : mkChkNode
            port map (
                CLK => CLK,
                EN_b2c_0_put => svBitNodes_0_EN_b2c_get,
                EN_b2c_1_put => svBitNodes_1_EN_b2c_get,
                EN_b2c_2_put => svBitNodes_3_EN_b2c_get,
                EN_c2b_0_get => svBitNodes_0_EN_c2b_0_put,
                EN_c2b_1_get => svBitNodes_1_EN_c2b_0_put,
                EN_c2b_2_get => svBitNodes_3_EN_c2b_0_put,
                RDY_b2c_0_put => svCheckNodes_0_RDY_b2c_0_put,
                RDY_b2c_1_put => svCheckNodes_0_RDY_b2c_1_put,
                RDY_b2c_2_put => svCheckNodes_0_RDY_b2c_2_put,
                RDY_c2b_0_get => svCheckNodes_0_RDY_c2b_0_get,
                RDY_c2b_1_get => svCheckNodes_0_RDY_c2b_1_get,
                RDY_c2b_2_get => svCheckNodes_0_RDY_c2b_2_get,
                RST_N => RST_N,
                b2c_0_put => svBitNodes_0_b2c_get,
                b2c_1_put => svBitNodes_1_b2c_get,
                b2c_2_put => svBitNodes_3_b2c_get,
                c2b_0_get => svBitNodes_0_c2b_0_put,
                c2b_1_get => svBitNodes_1_c2b_0_put,
                c2b_2_get => svBitNodes_3_c2b_0_put
                );
        vCheckNodes_1 : mkChkNode
            port map (
                CLK => CLK,
                EN_b2c_0_put => svBitNodes_1_EN_b2c_get,
                EN_b2c_1_put => svBitNodes_2_EN_b2c_get,
                EN_b2c_2_put => svBitNodes_4_EN_b2c_get,
                EN_c2b_0_get => svBitNodes_1_EN_c2b_1_put,
                EN_c2b_1_get => svBitNodes_2_EN_c2b_0_put,
                EN_c2b_2_get => svBitNodes_4_EN_c2b_0_put,
                RDY_b2c_0_put => svCheckNodes_1_RDY_b2c_0_put,
                RDY_b2c_1_put => svCheckNodes_1_RDY_b2c_1_put,
                RDY_b2c_2_put => svCheckNodes_1_RDY_b2c_2_put,
                RDY_c2b_0_get => svCheckNodes_1_RDY_c2b_0_get,
                RDY_c2b_1_get => svCheckNodes_1_RDY_c2b_1_get,
                RDY_c2b_2_get => svCheckNodes_1_RDY_c2b_2_get,
                RST_N => RST_N,
                b2c_0_put => svBitNodes_1_b2c_get,
                b2c_1_put => svBitNodes_2_b2c_get,
                b2c_2_put => svBitNodes_4_b2c_get,
                c2b_0_get => svBitNodes_1_c2b_1_put,
                c2b_1_get => svBitNodes_2_c2b_0_put,
                c2b_2_get => svBitNodes_4_c2b_0_put
                );
        vCheckNodes_2 : mkChkNode
            port map (
                CLK => CLK,
                EN_b2c_0_put => svBitNodes_2_EN_b2c_get,
                EN_b2c_1_put => svBitNodes_3_EN_b2c_get,
                EN_b2c_2_put => svBitNodes_5_EN_b2c_get,
                EN_c2b_0_get => svBitNodes_2_EN_c2b_1_put,
                EN_c2b_1_get => svBitNodes_3_EN_c2b_1_put,
                EN_c2b_2_get => svBitNodes_5_EN_c2b_0_put,
                RDY_b2c_0_put => svCheckNodes_2_RDY_b2c_0_put,
                RDY_b2c_1_put => svCheckNodes_2_RDY_b2c_1_put,
                RDY_b2c_2_put => svCheckNodes_2_RDY_b2c_2_put,
                RDY_c2b_0_get => svCheckNodes_2_RDY_c2b_0_get,
                RDY_c2b_1_get => svCheckNodes_2_RDY_c2b_1_get,
                RDY_c2b_2_get => svCheckNodes_2_RDY_c2b_2_get,
                RST_N => RST_N,
                b2c_0_put => svBitNodes_2_b2c_get,
                b2c_1_put => svBitNodes_3_b2c_get,
                b2c_2_put => svBitNodes_5_b2c_get,
                c2b_0_get => svBitNodes_2_c2b_1_put,
                c2b_1_get => svBitNodes_3_c2b_1_put,
                c2b_2_get => svBitNodes_5_c2b_0_put
                );
        vCheckNodes_3 : mkChkNode
            port map (
                CLK => CLK,
                EN_b2c_0_put => svBitNodes_3_EN_b2c_get,
                EN_b2c_1_put => svBitNodes_4_EN_b2c_get,
                EN_b2c_2_put => svBitNodes_6_EN_b2c_get,
                EN_c2b_0_get => svBitNodes_3_EN_c2b_2_put,
                EN_c2b_1_get => svBitNodes_4_EN_c2b_1_put,
                EN_c2b_2_get => svBitNodes_6_EN_c2b_0_put,
                RDY_b2c_0_put => svCheckNodes_3_RDY_b2c_0_put,
                RDY_b2c_1_put => svCheckNodes_3_RDY_b2c_1_put,
                RDY_b2c_2_put => svCheckNodes_3_RDY_b2c_2_put,
                RDY_c2b_0_get => svCheckNodes_3_RDY_c2b_0_get,
                RDY_c2b_1_get => svCheckNodes_3_RDY_c2b_1_get,
                RDY_c2b_2_get => svCheckNodes_3_RDY_c2b_2_get,
                RST_N => RST_N,
                b2c_0_put => svBitNodes_3_b2c_get,
                b2c_1_put => svBitNodes_4_b2c_get,
                b2c_2_put => svBitNodes_6_b2c_get,
                c2b_0_get => svBitNodes_3_c2b_2_put,
                c2b_1_get => svBitNodes_4_c2b_1_put,
                c2b_2_get => svBitNodes_6_c2b_0_put
                );
        vCheckNodes_4 : mkChkNode
            port map (
                CLK => CLK,
                EN_b2c_0_put => svBitNodes_0_EN_b2c_get,
                EN_b2c_1_put => svBitNodes_4_EN_b2c_get,
                EN_b2c_2_put => svBitNodes_5_EN_b2c_get,
                EN_c2b_0_get => svBitNodes_0_EN_c2b_1_put,
                EN_c2b_1_get => svBitNodes_4_EN_c2b_2_put,
                EN_c2b_2_get => svBitNodes_5_EN_c2b_1_put,
                RDY_b2c_0_put => svCheckNodes_4_RDY_b2c_0_put,
                RDY_b2c_1_put => svCheckNodes_4_RDY_b2c_1_put,
                RDY_b2c_2_put => svCheckNodes_4_RDY_b2c_2_put,
                RDY_c2b_0_get => svCheckNodes_4_RDY_c2b_0_get,
                RDY_c2b_1_get => svCheckNodes_4_RDY_c2b_1_get,
                RDY_c2b_2_get => svCheckNodes_4_RDY_c2b_2_get,
                RST_N => RST_N,
                b2c_0_put => svBitNodes_0_b2c_get,
                b2c_1_put => svBitNodes_4_b2c_get,
                b2c_2_put => svBitNodes_5_b2c_get,
                c2b_0_get => svBitNodes_0_c2b_1_put,
                c2b_1_get => svBitNodes_4_c2b_2_put,
                c2b_2_get => svBitNodes_5_c2b_1_put
                );
        vCheckNodes_5 : mkChkNode
            port map (
                CLK => CLK,
                EN_b2c_0_put => svBitNodes_1_EN_b2c_get,
                EN_b2c_1_put => svBitNodes_5_EN_b2c_get,
                EN_b2c_2_put => svBitNodes_6_EN_b2c_get,
                EN_c2b_0_get => svBitNodes_1_EN_c2b_2_put,
                EN_c2b_1_get => svBitNodes_5_EN_c2b_2_put,
                EN_c2b_2_get => svBitNodes_6_EN_c2b_1_put,
                RDY_b2c_0_put => svCheckNodes_5_RDY_b2c_0_put,
                RDY_b2c_1_put => svCheckNodes_5_RDY_b2c_1_put,
                RDY_b2c_2_put => svCheckNodes_5_RDY_b2c_2_put,
                RDY_c2b_0_get => svCheckNodes_5_RDY_c2b_0_get,
                RDY_c2b_1_get => svCheckNodes_5_RDY_c2b_1_get,
                RDY_c2b_2_get => svCheckNodes_5_RDY_c2b_2_get,
                RST_N => RST_N,
                b2c_0_put => svBitNodes_1_b2c_get,
                b2c_1_put => svBitNodes_5_b2c_get,
                b2c_2_put => svBitNodes_6_b2c_get,
                c2b_0_get => svBitNodes_1_c2b_2_put,
                c2b_1_get => svBitNodes_5_c2b_2_put,
                c2b_2_get => svBitNodes_6_c2b_1_put
                );
        vCheckNodes_6 : mkChkNode
            port map (
                CLK => CLK,
                EN_b2c_0_put => svBitNodes_0_EN_b2c_get,
                EN_b2c_1_put => svBitNodes_2_EN_b2c_get,
                EN_b2c_2_put => svBitNodes_6_EN_b2c_get,
                EN_c2b_0_get => svBitNodes_0_EN_c2b_2_put,
                EN_c2b_1_get => svBitNodes_2_EN_c2b_2_put,
                EN_c2b_2_get => svBitNodes_6_EN_c2b_2_put,
                RDY_b2c_0_put => svCheckNodes_6_RDY_b2c_0_put,
                RDY_b2c_1_put => svCheckNodes_6_RDY_b2c_1_put,
                RDY_b2c_2_put => svCheckNodes_6_RDY_b2c_2_put,
                RDY_c2b_0_get => svCheckNodes_6_RDY_c2b_0_get,
                RDY_c2b_1_get => svCheckNodes_6_RDY_c2b_1_get,
                RDY_c2b_2_get => svCheckNodes_6_RDY_c2b_2_get,
                RST_N => RST_N,
                b2c_0_put => svBitNodes_0_b2c_get,
                b2c_1_put => svBitNodes_2_b2c_get,
                b2c_2_put => svBitNodes_6_b2c_get,
                c2b_0_get => svBitNodes_0_c2b_2_put,
                c2b_1_get => svBitNodes_2_c2b_2_put,
                c2b_2_get => svBitNodes_6_c2b_2_put
                );
        sffO_D_IN_6 <= svBitNodes_6_dataOut_get;
        sffO_D_IN_5 <= svBitNodes_5_dataOut_get;
        sffO_D_IN_4 <= svBitNodes_4_dataOut_get;
        sffO_D_IN_3 <= svBitNodes_3_dataOut_get;
        sffO_D_IN_2 <= svBitNodes_2_dataOut_get;
        sffO_D_IN_1 <= svBitNodes_1_dataOut_get;
        sffO_D_IN_0 <= svBitNodes_0_dataOut_get;
        sffI_D_IN_6 <= \request_put_6 ;
        sffI_D_IN_5 <= \request_put_5 ;
        sffI_D_IN_4 <= \request_put_4 ;
        sffI_D_IN_3 <= \request_put_3 ;
        sffI_D_IN_2 <= \request_put_2 ;
        sffI_D_IN_1 <= \request_put_1 ;
        sffI_D_IN_0 <= \request_put_0 ;
        \response_get_6  <= sffO_D_OUT_6;
        \response_get_5  <= sffO_D_OUT_5;
        \response_get_4  <= sffO_D_OUT_4;
        \response_get_3  <= sffO_D_OUT_3;
        \response_get_2  <= sffO_D_OUT_2;
        \response_get_1  <= sffO_D_OUT_1;
        \response_get_0  <= sffO_D_OUT_0;
        CAN_FIRE_RL_mkConnectionGetPut <= svBitNodes_0_EN_c2b_0_put;
        CAN_FIRE_RL_mkConnectionGetPut_1 <= svBitNodes_1_EN_c2b_0_put;
        CAN_FIRE_RL_mkConnectionGetPut_10 <= svBitNodes_4_EN_c2b_1_put;
        CAN_FIRE_RL_mkConnectionGetPut_11 <= svBitNodes_6_EN_c2b_0_put;
        CAN_FIRE_RL_mkConnectionGetPut_12 <= svBitNodes_0_EN_c2b_1_put;
        CAN_FIRE_RL_mkConnectionGetPut_13 <= svBitNodes_4_EN_c2b_2_put;
        CAN_FIRE_RL_mkConnectionGetPut_14 <= svBitNodes_5_EN_c2b_1_put;
        CAN_FIRE_RL_mkConnectionGetPut_15 <= svBitNodes_1_EN_c2b_2_put;
        CAN_FIRE_RL_mkConnectionGetPut_16 <= svBitNodes_5_EN_c2b_2_put;
        CAN_FIRE_RL_mkConnectionGetPut_17 <= svBitNodes_6_EN_c2b_1_put;
        CAN_FIRE_RL_mkConnectionGetPut_18 <= svBitNodes_0_EN_c2b_2_put;
        CAN_FIRE_RL_mkConnectionGetPut_19 <= svBitNodes_2_EN_c2b_2_put;
        CAN_FIRE_RL_mkConnectionGetPut_2 <= svBitNodes_3_EN_c2b_0_put;
        CAN_FIRE_RL_mkConnectionGetPut_20 <= svBitNodes_6_EN_c2b_2_put;
        CAN_FIRE_RL_mkConnectionGetPut_3 <= svBitNodes_1_EN_c2b_1_put;
        CAN_FIRE_RL_mkConnectionGetPut_4 <= svBitNodes_2_EN_c2b_0_put;
        CAN_FIRE_RL_mkConnectionGetPut_5 <= svBitNodes_4_EN_c2b_0_put;
        CAN_FIRE_RL_mkConnectionGetPut_6 <= svBitNodes_2_EN_c2b_1_put;
        CAN_FIRE_RL_mkConnectionGetPut_7 <= svBitNodes_3_EN_c2b_1_put;
        CAN_FIRE_RL_mkConnectionGetPut_8 <= svBitNodes_5_EN_c2b_0_put;
        CAN_FIRE_RL_mkConnectionGetPut_9 <= svBitNodes_3_EN_c2b_2_put;
        CAN_FIRE_RL_rlConnect <= svBitNodes_0_EN_b2c_get;
        CAN_FIRE_RL_rlConnect_1 <= svBitNodes_1_EN_b2c_get;
        CAN_FIRE_RL_rlConnect_2 <= svBitNodes_2_EN_b2c_get;
        CAN_FIRE_RL_rlConnect_3 <= svBitNodes_3_EN_b2c_get;
        CAN_FIRE_RL_rlConnect_4 <= svBitNodes_4_EN_b2c_get;
        CAN_FIRE_RL_rlConnect_5 <= svBitNodes_5_EN_b2c_get;
        CAN_FIRE_RL_rlConnect_6 <= svBitNodes_6_EN_b2c_get;
        CAN_FIRE_RL_rlEvaluateOutput <= WILL_FIRE_RL_rlEvaluateOutput;
        CAN_FIRE_RL_rlPutCodeWordIn <= WILL_FIRE_RL_rlPutCodeWordIn;
        CAN_FIRE_request_put <= sffI_FULL_N;
        CAN_FIRE_response_get <= sffO_EMPTY_N;
        \MUX_rgIdle_write_1__SEL_1  <= sffO_ENQ;
        RDY_request_put <= sffI_FULL_N;
        RDY_response_get <= sffO_EMPTY_N;
        WILL_FIRE_RL_mkConnectionGetPut <= svBitNodes_0_EN_c2b_0_put;
        WILL_FIRE_RL_mkConnectionGetPut_1 <= svBitNodes_1_EN_c2b_0_put;
        WILL_FIRE_RL_mkConnectionGetPut_10 <= svBitNodes_4_EN_c2b_1_put;
        WILL_FIRE_RL_mkConnectionGetPut_11 <= svBitNodes_6_EN_c2b_0_put;
        WILL_FIRE_RL_mkConnectionGetPut_12 <= svBitNodes_0_EN_c2b_1_put;
        WILL_FIRE_RL_mkConnectionGetPut_13 <= svBitNodes_4_EN_c2b_2_put;
        WILL_FIRE_RL_mkConnectionGetPut_14 <= svBitNodes_5_EN_c2b_1_put;
        WILL_FIRE_RL_mkConnectionGetPut_15 <= svBitNodes_1_EN_c2b_2_put;
        WILL_FIRE_RL_mkConnectionGetPut_16 <= svBitNodes_5_EN_c2b_2_put;
        WILL_FIRE_RL_mkConnectionGetPut_17 <= svBitNodes_6_EN_c2b_1_put;
        WILL_FIRE_RL_mkConnectionGetPut_18 <= svBitNodes_0_EN_c2b_2_put;
        WILL_FIRE_RL_mkConnectionGetPut_19 <= svBitNodes_2_EN_c2b_2_put;
        WILL_FIRE_RL_mkConnectionGetPut_2 <= svBitNodes_3_EN_c2b_0_put;
        WILL_FIRE_RL_mkConnectionGetPut_20 <= svBitNodes_6_EN_c2b_2_put;
        WILL_FIRE_RL_mkConnectionGetPut_3 <= svBitNodes_1_EN_c2b_1_put;
        WILL_FIRE_RL_mkConnectionGetPut_4 <= svBitNodes_2_EN_c2b_0_put;
        WILL_FIRE_RL_mkConnectionGetPut_5 <= svBitNodes_4_EN_c2b_0_put;
        WILL_FIRE_RL_mkConnectionGetPut_6 <= svBitNodes_2_EN_c2b_1_put;
        WILL_FIRE_RL_mkConnectionGetPut_7 <= svBitNodes_3_EN_c2b_1_put;
        WILL_FIRE_RL_mkConnectionGetPut_8 <= svBitNodes_5_EN_c2b_0_put;
        WILL_FIRE_RL_mkConnectionGetPut_9 <= svBitNodes_3_EN_c2b_2_put;
        WILL_FIRE_RL_rlConnect <= svBitNodes_0_EN_b2c_get;
        WILL_FIRE_RL_rlConnect_1 <= svBitNodes_1_EN_b2c_get;
        WILL_FIRE_RL_rlConnect_2 <= svBitNodes_2_EN_b2c_get;
        WILL_FIRE_RL_rlConnect_3 <= svBitNodes_3_EN_b2c_get;
        WILL_FIRE_RL_rlConnect_4 <= svBitNodes_4_EN_b2c_get;
        WILL_FIRE_RL_rlConnect_5 <= svBitNodes_5_EN_b2c_get;
        WILL_FIRE_RL_rlConnect_6 <= svBitNodes_6_EN_b2c_get;
        WILL_FIRE_request_put <= EN_request_put;
        WILL_FIRE_response_get <= EN_response_get;
        sffI_DEQ <= WILL_FIRE_RL_rlPutCodeWordIn;
        sffI_ENQ <= EN_request_put;
        sffO_DEQ <= EN_response_get;
        \rgIdle_D_IN  <= sffO_ENQ;
        svBitNodes_0_EN_dataOut_get <= WILL_FIRE_RL_rlEvaluateOutput;
        svBitNodes_1_EN_codeIn_put <= svBitNodes_0_EN_codeIn_put;
        svBitNodes_1_EN_dataOut_get <= WILL_FIRE_RL_rlEvaluateOutput;
        svBitNodes_2_EN_codeIn_put <= svBitNodes_0_EN_codeIn_put;
        svBitNodes_2_EN_dataOut_get <= WILL_FIRE_RL_rlEvaluateOutput;
        svBitNodes_3_EN_codeIn_put <= svBitNodes_0_EN_codeIn_put;
        svBitNodes_3_EN_dataOut_get <= WILL_FIRE_RL_rlEvaluateOutput;
        svBitNodes_4_EN_codeIn_put <= svBitNodes_0_EN_codeIn_put;
        svBitNodes_4_EN_dataOut_get <= WILL_FIRE_RL_rlEvaluateOutput;
        svBitNodes_5_EN_codeIn_put <= svBitNodes_0_EN_codeIn_put;
        svBitNodes_5_EN_dataOut_get <= WILL_FIRE_RL_rlEvaluateOutput;
        svBitNodes_6_EN_codeIn_put <= svBitNodes_0_EN_codeIn_put;
        svBitNodes_6_EN_dataOut_get <= WILL_FIRE_RL_rlEvaluateOutput;
        svCheckNodes_0_EN_b2c_0_put <= svBitNodes_0_EN_b2c_get;
        svCheckNodes_0_EN_b2c_1_put <= svBitNodes_1_EN_b2c_get;
        svCheckNodes_0_EN_b2c_2_put <= svBitNodes_3_EN_b2c_get;
        svCheckNodes_0_EN_c2b_0_get <= svBitNodes_0_EN_c2b_0_put;
        svCheckNodes_0_EN_c2b_1_get <= svBitNodes_1_EN_c2b_0_put;
        svCheckNodes_0_EN_c2b_2_get <= svBitNodes_3_EN_c2b_0_put;
        svCheckNodes_0_b2c_0_put <= svBitNodes_0_b2c_get;
        svCheckNodes_0_b2c_1_put <= svBitNodes_1_b2c_get;
        svCheckNodes_0_b2c_2_put <= svBitNodes_3_b2c_get;
        svCheckNodes_0_c2b_0_get <= svBitNodes_0_c2b_0_put;
        svCheckNodes_0_c2b_1_get <= svBitNodes_1_c2b_0_put;
        svCheckNodes_0_c2b_2_get <= svBitNodes_3_c2b_0_put;
        svCheckNodes_1_EN_b2c_0_put <= svBitNodes_1_EN_b2c_get;
        svCheckNodes_1_EN_b2c_1_put <= svBitNodes_2_EN_b2c_get;
        svCheckNodes_1_EN_b2c_2_put <= svBitNodes_4_EN_b2c_get;
        svCheckNodes_1_EN_c2b_0_get <= svBitNodes_1_EN_c2b_1_put;
        svCheckNodes_1_EN_c2b_1_get <= svBitNodes_2_EN_c2b_0_put;
        svCheckNodes_1_EN_c2b_2_get <= svBitNodes_4_EN_c2b_0_put;
        svCheckNodes_1_b2c_0_put <= svBitNodes_1_b2c_get;
        svCheckNodes_1_b2c_1_put <= svBitNodes_2_b2c_get;
        svCheckNodes_1_b2c_2_put <= svBitNodes_4_b2c_get;
        svCheckNodes_1_c2b_0_get <= svBitNodes_1_c2b_1_put;
        svCheckNodes_1_c2b_1_get <= svBitNodes_2_c2b_0_put;
        svCheckNodes_1_c2b_2_get <= svBitNodes_4_c2b_0_put;
        svCheckNodes_2_EN_b2c_0_put <= svBitNodes_2_EN_b2c_get;
        svCheckNodes_2_EN_b2c_1_put <= svBitNodes_3_EN_b2c_get;
        svCheckNodes_2_EN_b2c_2_put <= svBitNodes_5_EN_b2c_get;
        svCheckNodes_2_EN_c2b_0_get <= svBitNodes_2_EN_c2b_1_put;
        svCheckNodes_2_EN_c2b_1_get <= svBitNodes_3_EN_c2b_1_put;
        svCheckNodes_2_EN_c2b_2_get <= svBitNodes_5_EN_c2b_0_put;
        svCheckNodes_2_b2c_0_put <= svBitNodes_2_b2c_get;
        svCheckNodes_2_b2c_1_put <= svBitNodes_3_b2c_get;
        svCheckNodes_2_b2c_2_put <= svBitNodes_5_b2c_get;
        svCheckNodes_2_c2b_0_get <= svBitNodes_2_c2b_1_put;
        svCheckNodes_2_c2b_1_get <= svBitNodes_3_c2b_1_put;
        svCheckNodes_2_c2b_2_get <= svBitNodes_5_c2b_0_put;
        svCheckNodes_3_EN_b2c_0_put <= svBitNodes_3_EN_b2c_get;
        svCheckNodes_3_EN_b2c_1_put <= svBitNodes_4_EN_b2c_get;
        svCheckNodes_3_EN_b2c_2_put <= svBitNodes_6_EN_b2c_get;
        svCheckNodes_3_EN_c2b_0_get <= svBitNodes_3_EN_c2b_2_put;
        svCheckNodes_3_EN_c2b_1_get <= svBitNodes_4_EN_c2b_1_put;
        svCheckNodes_3_EN_c2b_2_get <= svBitNodes_6_EN_c2b_0_put;
        svCheckNodes_3_b2c_0_put <= svBitNodes_3_b2c_get;
        svCheckNodes_3_b2c_1_put <= svBitNodes_4_b2c_get;
        svCheckNodes_3_b2c_2_put <= svBitNodes_6_b2c_get;
        svCheckNodes_3_c2b_0_get <= svBitNodes_3_c2b_2_put;
        svCheckNodes_3_c2b_1_get <= svBitNodes_4_c2b_1_put;
        svCheckNodes_3_c2b_2_get <= svBitNodes_6_c2b_0_put;
        svCheckNodes_4_EN_b2c_0_put <= svBitNodes_0_EN_b2c_get;
        svCheckNodes_4_EN_b2c_1_put <= svBitNodes_4_EN_b2c_get;
        svCheckNodes_4_EN_b2c_2_put <= svBitNodes_5_EN_b2c_get;
        svCheckNodes_4_EN_c2b_0_get <= svBitNodes_0_EN_c2b_1_put;
        svCheckNodes_4_EN_c2b_1_get <= svBitNodes_4_EN_c2b_2_put;
        svCheckNodes_4_EN_c2b_2_get <= svBitNodes_5_EN_c2b_1_put;
        svCheckNodes_4_b2c_0_put <= svBitNodes_0_b2c_get;
        svCheckNodes_4_b2c_1_put <= svBitNodes_4_b2c_get;
        svCheckNodes_4_b2c_2_put <= svBitNodes_5_b2c_get;
        svCheckNodes_4_c2b_0_get <= svBitNodes_0_c2b_1_put;
        svCheckNodes_4_c2b_1_get <= svBitNodes_4_c2b_2_put;
        svCheckNodes_4_c2b_2_get <= svBitNodes_5_c2b_1_put;
        svCheckNodes_5_EN_b2c_0_put <= svBitNodes_1_EN_b2c_get;
        svCheckNodes_5_EN_b2c_1_put <= svBitNodes_5_EN_b2c_get;
        svCheckNodes_5_EN_b2c_2_put <= svBitNodes_6_EN_b2c_get;
        svCheckNodes_5_EN_c2b_0_get <= svBitNodes_1_EN_c2b_2_put;
        svCheckNodes_5_EN_c2b_1_get <= svBitNodes_5_EN_c2b_2_put;
        svCheckNodes_5_EN_c2b_2_get <= svBitNodes_6_EN_c2b_1_put;
        svCheckNodes_5_b2c_0_put <= svBitNodes_1_b2c_get;
        svCheckNodes_5_b2c_1_put <= svBitNodes_5_b2c_get;
        svCheckNodes_5_b2c_2_put <= svBitNodes_6_b2c_get;
        svCheckNodes_5_c2b_0_get <= svBitNodes_1_c2b_2_put;
        svCheckNodes_5_c2b_1_get <= svBitNodes_5_c2b_2_put;
        svCheckNodes_5_c2b_2_get <= svBitNodes_6_c2b_1_put;
        svCheckNodes_6_EN_b2c_0_put <= svBitNodes_0_EN_b2c_get;
        svCheckNodes_6_EN_b2c_1_put <= svBitNodes_2_EN_b2c_get;
        svCheckNodes_6_EN_b2c_2_put <= svBitNodes_6_EN_b2c_get;
        svCheckNodes_6_EN_c2b_0_get <= svBitNodes_0_EN_c2b_2_put;
        svCheckNodes_6_EN_c2b_1_get <= svBitNodes_2_EN_c2b_2_put;
        svCheckNodes_6_EN_c2b_2_get <= svBitNodes_6_EN_c2b_2_put;
        svCheckNodes_6_b2c_0_put <= svBitNodes_0_b2c_get;
        svCheckNodes_6_b2c_1_put <= svBitNodes_2_b2c_get;
        svCheckNodes_6_b2c_2_put <= svBitNodes_6_b2c_get;
        svCheckNodes_6_c2b_0_get <= svBitNodes_0_c2b_2_put;
        svCheckNodes_6_c2b_1_get <= svBitNodes_2_c2b_2_put;
        svCheckNodes_6_c2b_2_get <= svBitNodes_6_c2b_2_put;
    end; 


