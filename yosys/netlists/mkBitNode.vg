module FIFO2_1 (CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR);
  wire ag_00;
  wire ag_01;
  wire ag_02;
  wire ag_03;
  wire ag_04;
  wire ag_05;
  wire ag_06;
  wire ag_07;
  wire ag_08;
  wire ag_09;
  wire ag_10;
  wire ag_11;
  wire ag_12;
  wire ag_13;
  wire ag_14;
  wire ag_15;
  wire ag_16;
  wire ag_17;
  wire ag_18;
  wire ag_19;
  wire ag_20;
  wire ag_21;
  wire ag_22;
  wire ag_23;
  wire ag_24;
  wire ag_25;
  wire ag_26;
  wire ag_27;
  wire ag_28;
  wire ag_29;
  wire ag_30;
  wire ag_31;
  wire ag_32;
  wire ag_33;
  wire ag_34;
  wire ag_35;
  wire ag_36;
  wire ag_37;
  input CLK;
  input CLR;
  input DEQ;
  input D_IN;
  output D_OUT;
  output EMPTY_N;
  input ENQ;
  output FULL_N;
  input RST;
  wire data0_reg;
  wire data1_reg;
  wire empty_reg;
  wire full_reg;
  std_inv ag_38 (
    .a(RST),
    .y(ag_04)
  );
  std_nor2 ag_39 (
    .a(CLR),
    .b(ag_04),
    .y(ag_05)
  );
  std_inv ag_40 (
    .a(full_reg),
    .y(ag_06)
  );
  std_inv ag_41 (
    .a(ENQ),
    .y(ag_07)
  );
  std_nor2 ag_42 (
    .a(DEQ),
    .b(ag_07),
    .y(ag_08)
  );
  std_inv ag_43 (
    .a(DEQ),
    .y(ag_09)
  );
  std_nor2 ag_44 (
    .a(ag_09),
    .b(ENQ),
    .y(ag_10)
  );
  std_nor2 ag_45 (
    .a(ag_10),
    .b(ag_08),
    .y(ag_11)
  );
  std_nand2 ag_46 (
    .a(ag_11),
    .b(ag_06),
    .y(ag_12)
  );
  std_nand2 ag_47 (
    .a(ag_08),
    .b(empty_reg),
    .y(ag_13)
  );
  std_nand2 ag_48 (
    .a(ag_13),
    .b(ag_12),
    .y(ag_14)
  );
  std_nand2 ag_49 (
    .a(ag_14),
    .b(ag_05),
    .y(ag_03)
  );
  std_nand2 ag_50 (
    .a(ag_09),
    .b(ENQ),
    .y(ag_15)
  );
  std_nand2 ag_51 (
    .a(DEQ),
    .b(ag_07),
    .y(ag_16)
  );
  std_nand2 ag_52 (
    .a(ag_16),
    .b(ag_15),
    .y(ag_17)
  );
  std_nor2 ag_53 (
    .a(ag_17),
    .b(empty_reg),
    .y(ag_18)
  );
  std_nand2 ag_54 (
    .a(ag_10),
    .b(full_reg),
    .y(ag_19)
  );
  std_nand2 ag_55 (
    .a(ag_19),
    .b(ag_05),
    .y(ag_20)
  );
  std_nor2 ag_56 (
    .a(ag_20),
    .b(ag_18),
    .y(ag_02)
  );
  std_nand2 ag_57 (
    .a(ENQ),
    .b(empty_reg),
    .y(ag_21)
  );
  std_inv ag_58 (
    .a(ag_21),
    .y(ag_22)
  );
  std_nor2 ag_59 (
    .a(ag_22),
    .b(data1_reg),
    .y(ag_23)
  );
  std_nor2 ag_60 (
    .a(ag_21),
    .b(D_IN),
    .y(ag_24)
  );
  std_nor2 ag_61 (
    .a(ag_24),
    .b(ag_23),
    .y(ag_01)
  );
  std_nand2 ag_62 (
    .a(ag_09),
    .b(empty_reg),
    .y(ag_25)
  );
  std_nand2 ag_63 (
    .a(ag_25),
    .b(ENQ),
    .y(ag_26)
  );
  std_inv ag_64 (
    .a(data0_reg),
    .y(ag_27)
  );
  std_nor2 ag_65 (
    .a(ag_09),
    .b(full_reg),
    .y(ag_28)
  );
  std_nor2 ag_66 (
    .a(ag_28),
    .b(ag_27),
    .y(ag_29)
  );
  std_nand2 ag_67 (
    .a(ag_29),
    .b(ag_26),
    .y(ag_30)
  );
  std_inv ag_68 (
    .a(data1_reg),
    .y(ag_31)
  );
  std_nand2 ag_69 (
    .a(DEQ),
    .b(ag_06),
    .y(ag_32)
  );
  std_nor2 ag_70 (
    .a(ag_32),
    .b(ag_31),
    .y(ag_33)
  );
  std_nand2 ag_71 (
    .a(ag_06),
    .b(empty_reg),
    .y(ag_34)
  );
  std_nand2 ag_72 (
    .a(ag_34),
    .b(D_IN),
    .y(ag_35)
  );
  std_nor2 ag_73 (
    .a(ag_35),
    .b(ag_26),
    .y(ag_36)
  );
  std_nor2 ag_74 (
    .a(ag_36),
    .b(ag_33),
    .y(ag_37)
  );
  std_nand2 ag_75 (
    .a(ag_37),
    .b(ag_30),
    .y(ag_00)
  );
  d_ff ag_76 (
    .clk(CLK),
    .d(ag_02),
    .q(empty_reg)
  );
  d_ff ag_77 (
    .clk(CLK),
    .d(ag_03),
    .q(full_reg)
  );
  d_ff ag_78 (
    .clk(CLK),
    .d(ag_01),
    .q(data1_reg)
  );
  d_ff ag_79 (
    .clk(CLK),
    .d(ag_00),
    .q(data0_reg)
  );
  assign D_OUT = data0_reg;
  assign EMPTY_N = empty_reg;
  assign FULL_N = full_reg;
endmodule

(* top =  1  *)
(* src = "mkBitNode.v:47" *)
module mkBitNode(CLK, RST_N, c2b_0_put, EN_c2b_0_put, RDY_c2b_0_put, c2b_1_put, EN_c2b_1_put, RDY_c2b_1_put, c2b_2_put, EN_c2b_2_put, RDY_c2b_2_put, EN_b2c_get, b2c_get, RDY_b2c_get, codeIn_put, EN_codeIn_put, RDY_codeIn_put, EN_dataOut_get, dataOut_get, RDY_dataOut_get);
  wire ag_0;
  wire ag_1;
  wire ag_2;
  wire ag_3;
  (* src = "mkBitNode.v:171" *)
  wire CAN_FIRE_RL_rlProcessChkNodeResult;
  (* src = "mkBitNode.v:171" *)
  wire CAN_FIRE_RL_rlProcessNewData;
  (* src = "mkBitNode.v:171" *)
  wire CAN_FIRE_b2c_get;
  (* src = "mkBitNode.v:171" *)
  wire CAN_FIRE_c2b_0_put;
  (* src = "mkBitNode.v:171" *)
  wire CAN_FIRE_c2b_1_put;
  (* src = "mkBitNode.v:171" *)
  wire CAN_FIRE_c2b_2_put;
  (* src = "mkBitNode.v:171" *)
  wire CAN_FIRE_codeIn_put;
  (* src = "mkBitNode.v:171" *)
  wire CAN_FIRE_dataOut_get;
  (* src = "mkBitNode.v:73" *)
  input CLK;
  (* src = "mkBitNode.v:92" *)
  input EN_b2c_get;
  (* src = "mkBitNode.v:78" *)
  input EN_c2b_0_put;
  (* src = "mkBitNode.v:83" *)
  input EN_c2b_1_put;
  (* src = "mkBitNode.v:88" *)
  input EN_c2b_2_put;
  (* src = "mkBitNode.v:98" *)
  input EN_codeIn_put;
  (* src = "mkBitNode.v:102" *)
  input EN_dataOut_get;
  (* src = "mkBitNode.v:94" *)
  output RDY_b2c_get;
  (* src = "mkBitNode.v:79" *)
  output RDY_c2b_0_put;
  (* src = "mkBitNode.v:84" *)
  output RDY_c2b_1_put;
  (* src = "mkBitNode.v:89" *)
  output RDY_c2b_2_put;
  (* src = "mkBitNode.v:99" *)
  output RDY_codeIn_put;
  (* src = "mkBitNode.v:104" *)
  output RDY_dataOut_get;
  (* src = "mkBitNode.v:74" *)
  input RST_N;
  (* src = "mkBitNode.v:171" *)
  wire WILL_FIRE_RL_rlProcessChkNodeResult;
  (* src = "mkBitNode.v:171" *)
  wire WILL_FIRE_RL_rlProcessNewData;
  (* src = "mkBitNode.v:171" *)
  wire WILL_FIRE_b2c_get;
  (* src = "mkBitNode.v:171" *)
  wire WILL_FIRE_c2b_0_put;
  (* src = "mkBitNode.v:171" *)
  wire WILL_FIRE_c2b_1_put;
  (* src = "mkBitNode.v:171" *)
  wire WILL_FIRE_c2b_2_put;
  (* src = "mkBitNode.v:171" *)
  wire WILL_FIRE_codeIn_put;
  (* src = "mkBitNode.v:171" *)
  wire WILL_FIRE_dataOut_get;
  (* src = "mkBitNode.v:93" *)
  output b2c_get;
  (* src = "mkBitNode.v:77" *)
  input c2b_0_put;
  (* src = "mkBitNode.v:82" *)
  input c2b_1_put;
  (* src = "mkBitNode.v:87" *)
  input c2b_2_put;
  (* src = "mkBitNode.v:97" *)
  input codeIn_put;
  (* src = "mkBitNode.v:103" *)
  output dataOut_get;
  (* src = "mkBitNode.v:117" *)
  wire \ffB2C$DEQ ;
  (* src = "mkBitNode.v:117" *)
  wire \ffB2C$D_IN ;
  (* src = "mkBitNode.v:117" *)
  wire \ffB2C$D_OUT ;
  (* src = "mkBitNode.v:117" *)
  wire \ffB2C$EMPTY_N ;
  (* src = "mkBitNode.v:117" *)
  wire \ffB2C$ENQ ;
  (* src = "mkBitNode.v:117" *)
  wire \ffB2C$FULL_N ;
  (* src = "mkBitNode.v:126" *)
  wire \ffCodeIn$DEQ ;
  (* src = "mkBitNode.v:126" *)
  wire \ffCodeIn$D_IN ;
  (* src = "mkBitNode.v:126" *)
  wire \ffCodeIn$D_OUT ;
  (* src = "mkBitNode.v:126" *)
  wire \ffCodeIn$EMPTY_N ;
  (* src = "mkBitNode.v:126" *)
  wire \ffCodeIn$ENQ ;
  (* src = "mkBitNode.v:126" *)
  wire \ffCodeIn$FULL_N ;
  (* src = "mkBitNode.v:135" *)
  wire \ffDataOut$DEQ ;
  (* src = "mkBitNode.v:135" *)
  wire \ffDataOut$D_IN ;
  (* src = "mkBitNode.v:135" *)
  wire \ffDataOut$D_OUT ;
  (* src = "mkBitNode.v:135" *)
  wire \ffDataOut$EMPTY_N ;
  (* src = "mkBitNode.v:135" *)
  wire \ffDataOut$ENQ ;
  (* src = "mkBitNode.v:135" *)
  wire \ffDataOut$FULL_N ;
  (* src = "mkBitNode.v:144" *)
  wire \vffC2B_0$DEQ ;
  (* src = "mkBitNode.v:144" *)
  wire \vffC2B_0$D_IN ;
  (* src = "mkBitNode.v:144" *)
  wire \vffC2B_0$D_OUT ;
  (* src = "mkBitNode.v:144" *)
  wire \vffC2B_0$EMPTY_N ;
  (* src = "mkBitNode.v:144" *)
  wire \vffC2B_0$ENQ ;
  (* src = "mkBitNode.v:144" *)
  wire \vffC2B_0$FULL_N ;
  (* src = "mkBitNode.v:153" *)
  wire \vffC2B_1$DEQ ;
  (* src = "mkBitNode.v:153" *)
  wire \vffC2B_1$D_IN ;
  (* src = "mkBitNode.v:153" *)
  wire \vffC2B_1$D_OUT ;
  (* src = "mkBitNode.v:153" *)
  wire \vffC2B_1$EMPTY_N ;
  (* src = "mkBitNode.v:153" *)
  wire \vffC2B_1$ENQ ;
  (* src = "mkBitNode.v:153" *)
  wire \vffC2B_1$FULL_N ;
  (* src = "mkBitNode.v:162" *)
  wire \vffC2B_2$DEQ ;
  (* src = "mkBitNode.v:162" *)
  wire \vffC2B_2$D_IN ;
  (* src = "mkBitNode.v:162" *)
  wire \vffC2B_2$D_OUT ;
  (* src = "mkBitNode.v:162" *)
  wire \vffC2B_2$EMPTY_N ;
  (* src = "mkBitNode.v:162" *)
  wire \vffC2B_2$ENQ ;
  (* src = "mkBitNode.v:162" *)
  wire \vffC2B_2$FULL_N ;
  std_inv ag_4 (
    .a(\ffCodeIn$EMPTY_N ),
    .y(ag_3)
  );
  std_inv ag_5 (
    .a(\ffB2C$FULL_N ),
    .y(ag_0)
  );
  std_nor2 ag_6 (
    .a(ag_0),
    .b(ag_3),
    .y(\ffB2C$ENQ )
  );
  std_nand2 ag_7 (
    .a(\vffC2B_1$EMPTY_N ),
    .b(\vffC2B_0$EMPTY_N ),
    .y(ag_1)
  );
  std_nand2 ag_8 (
    .a(\ffDataOut$FULL_N ),
    .b(\vffC2B_2$EMPTY_N ),
    .y(ag_2)
  );
  std_nor2 ag_9 (
    .a(ag_2),
    .b(ag_1),
    .y(\ffDataOut$ENQ )
  );
  (* src = "mkBitNode.v:223" *)
  \$paramod\FIFO2\width=1\guarded=1  ffB2C (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(EN_b2c_get),
    .D_IN(\ffB2C$D_IN ),
    .D_OUT(\ffB2C$D_OUT ),
    .EMPTY_N(\ffB2C$EMPTY_N ),
    .ENQ(\ffB2C$ENQ ),
    .FULL_N(\ffB2C$FULL_N ),
    .RST(RST_N)
  );
  (* src = "mkBitNode.v:234" *)
  \$paramod\FIFO2\width=1\guarded=1  ffCodeIn (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(\ffB2C$ENQ ),
    .D_IN(codeIn_put),
    .D_OUT(\ffB2C$D_IN ),
    .EMPTY_N(\ffCodeIn$EMPTY_N ),
    .ENQ(EN_codeIn_put),
    .FULL_N(\ffCodeIn$FULL_N ),
    .RST(RST_N)
  );
  (* src = "mkBitNode.v:245" *)
  \$paramod\FIFO2\width=1\guarded=1  ffDataOut (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(EN_dataOut_get),
    .D_IN(\ffDataOut$D_IN ),
    .D_OUT(\ffDataOut$D_OUT ),
    .EMPTY_N(\ffDataOut$EMPTY_N ),
    .ENQ(\ffDataOut$ENQ ),
    .FULL_N(\ffDataOut$FULL_N ),
    .RST(RST_N)
  );
  (* src = "mkBitNode.v:316" *)
  module_fnBitNodeCore instance_fnBitNodeCore_0 (
    .fnBitNodeCore(\ffDataOut$D_IN ),
    .\fnBitNodeCore_i[0] (\vffC2B_0$D_OUT ),
    .\fnBitNodeCore_i[1] (\vffC2B_1$D_OUT ),
    .\fnBitNodeCore_i[2] (\vffC2B_2$D_OUT )
  );
  (* src = "mkBitNode.v:256" *)
  \$paramod\FIFO2\width=1\guarded=1  vffC2B_0 (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(\ffDataOut$ENQ ),
    .D_IN(c2b_0_put),
    .D_OUT(\vffC2B_0$D_OUT ),
    .EMPTY_N(\vffC2B_0$EMPTY_N ),
    .ENQ(EN_c2b_0_put),
    .FULL_N(\vffC2B_0$FULL_N ),
    .RST(RST_N)
  );
  (* src = "mkBitNode.v:267" *)
  \$paramod\FIFO2\width=1\guarded=1  vffC2B_1 (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(\ffDataOut$ENQ ),
    .D_IN(c2b_1_put),
    .D_OUT(\vffC2B_1$D_OUT ),
    .EMPTY_N(\vffC2B_1$EMPTY_N ),
    .ENQ(EN_c2b_1_put),
    .FULL_N(\vffC2B_1$FULL_N ),
    .RST(RST_N)
  );
  (* src = "mkBitNode.v:278" *)
  \$paramod\FIFO2\width=1\guarded=1  vffC2B_2 (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(\ffDataOut$ENQ ),
    .D_IN(c2b_2_put),
    .D_OUT(\vffC2B_2$D_OUT ),
    .EMPTY_N(\vffC2B_2$EMPTY_N ),
    .ENQ(EN_c2b_2_put),
    .FULL_N(\vffC2B_2$FULL_N ),
    .RST(RST_N)
  );
  assign CAN_FIRE_RL_rlProcessChkNodeResult = \ffDataOut$ENQ ;
  assign CAN_FIRE_RL_rlProcessNewData = \ffB2C$ENQ ;
  assign CAN_FIRE_b2c_get = \ffB2C$EMPTY_N ;
  assign CAN_FIRE_c2b_0_put = \vffC2B_0$FULL_N ;
  assign CAN_FIRE_c2b_1_put = \vffC2B_1$FULL_N ;
  assign CAN_FIRE_c2b_2_put = \vffC2B_2$FULL_N ;
  assign CAN_FIRE_codeIn_put = \ffCodeIn$FULL_N ;
  assign CAN_FIRE_dataOut_get = \ffDataOut$EMPTY_N ;
  assign RDY_b2c_get = \ffB2C$EMPTY_N ;
  assign RDY_c2b_0_put = \vffC2B_0$FULL_N ;
  assign RDY_c2b_1_put = \vffC2B_1$FULL_N ;
  assign RDY_c2b_2_put = \vffC2B_2$FULL_N ;
  assign RDY_codeIn_put = \ffCodeIn$FULL_N ;
  assign RDY_dataOut_get = \ffDataOut$EMPTY_N ;
  assign WILL_FIRE_RL_rlProcessChkNodeResult = \ffDataOut$ENQ ;
  assign WILL_FIRE_RL_rlProcessNewData = \ffB2C$ENQ ;
  assign WILL_FIRE_b2c_get = EN_b2c_get;
  assign WILL_FIRE_c2b_0_put = EN_c2b_0_put;
  assign WILL_FIRE_c2b_1_put = EN_c2b_1_put;
  assign WILL_FIRE_c2b_2_put = EN_c2b_2_put;
  assign WILL_FIRE_codeIn_put = EN_codeIn_put;
  assign WILL_FIRE_dataOut_get = EN_dataOut_get;
  assign b2c_get = \ffB2C$D_OUT ;
  assign dataOut_get = \ffDataOut$D_OUT ;
  assign \ffB2C$DEQ  = EN_b2c_get;
  assign \ffCodeIn$DEQ  = \ffB2C$ENQ ;
  assign \ffCodeIn$D_IN  = codeIn_put;
  assign \ffCodeIn$D_OUT  = \ffB2C$D_IN ;
  assign \ffCodeIn$ENQ  = EN_codeIn_put;
  assign \ffDataOut$DEQ  = EN_dataOut_get;
  assign \vffC2B_0$DEQ  = \ffDataOut$ENQ ;
  assign \vffC2B_0$D_IN  = c2b_0_put;
  assign \vffC2B_0$ENQ  = EN_c2b_0_put;
  assign \vffC2B_1$DEQ  = \ffDataOut$ENQ ;
  assign \vffC2B_1$D_IN  = c2b_1_put;
  assign \vffC2B_1$ENQ  = EN_c2b_1_put;
  assign \vffC2B_2$DEQ  = \ffDataOut$ENQ ;
  assign \vffC2B_2$D_IN  = c2b_2_put;
  assign \vffC2B_2$ENQ  = EN_c2b_2_put;
endmodule

(* src = "module_fnBitNodeCore.v:30" *)
module module_fnBitNodeCore(\fnBitNodeCore_i[0] , \fnBitNodeCore_i[1] , \fnBitNodeCore_i[2] , fnBitNodeCore);
  wire ag_00;
  wire ag_01;
  wire ag_02;
  wire ag_03;
  wire ag_04;
  (* src = "module_fnBitNodeCore.v:34" *)
  output fnBitNodeCore;
  (* src = "module_fnBitNodeCore.v:33" *)
  input \fnBitNodeCore_i[0] ;
  (* src = "module_fnBitNodeCore.v:33" *)
  input \fnBitNodeCore_i[1] ;
  (* src = "module_fnBitNodeCore.v:33" *)
  input \fnBitNodeCore_i[2] ;
  std_nand2 ag_05 (
    .a(\fnBitNodeCore_i[0] ),
    .b(\fnBitNodeCore_i[1] ),
    .y(ag_00)
  );
  std_inv ag_06 (
    .a(\fnBitNodeCore_i[1] ),
    .y(ag_01)
  );
  std_inv ag_07 (
    .a(\fnBitNodeCore_i[0] ),
    .y(ag_02)
  );
  std_nand2 ag_08 (
    .a(ag_02),
    .b(ag_01),
    .y(ag_03)
  );
  std_nand2 ag_09 (
    .a(ag_03),
    .b(\fnBitNodeCore_i[2] ),
    .y(ag_04)
  );
  std_nand2 ag_10 (
    .a(ag_04),
    .b(ag_00),
    .y(fnBitNodeCore)
  );
endmodule
