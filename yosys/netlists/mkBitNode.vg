/* Generated by Yosys 0.7 (git sha1 61f6811, gcc 5.4.0-6ubuntu1~16.04.4 -O2 -fstack-protector-strong -fPIC -Os) */

(* src = "FIFO2.v:51" *)
module \$paramod\FIFO2\width=1\guarded=1 (CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR);
  (* src = "FIFO2.v:133" *)
  wire ag_00_;
  (* src = "FIFO2.v:133" *)
  wire ag_01_;
  (* src = "FIFO2.v:104" *)
  wire ag_02_;
  (* src = "FIFO2.v:104" *)
  wire ag_03_;
  wire ag_04_;
  wire ag_05_;
  wire ag_06_;
  wire ag_07_;
  wire ag_08_;
  wire ag_09_;
  wire ag_10_;
  wire ag_11_;
  wire ag_12_;
  wire ag_13_;
  wire ag_14_;
  wire ag_15_;
  wire ag_16_;
  wire ag_17_;
  wire ag_18_;
  wire ag_19_;
  wire ag_20_;
  wire ag_21_;
  wire ag_22_;
  wire ag_23_;
  wire ag_24_;
  wire ag_25_;
  wire ag_26_;
  wire ag_27_;
  wire ag_28_;
  wire ag_29_;
  wire ag_30_;
  wire ag_31_;
  wire ag_32_;
  wire ag_33_;
  wire ag_34_;
  wire ag_35_;
  wire ag_36_;
  wire ag_37_;
  (* src = "FIFO2.v:64" *)
  input CLK;
  (* src = "FIFO2.v:69" *)
  input CLR;
  (* src = "FIFO2.v:68" *)
  input DEQ;
  (* src = "FIFO2.v:66" *)
  input D_IN;
  (* src = "FIFO2.v:73" *)
  output D_OUT;
  (* src = "FIFO2.v:72" *)
  output EMPTY_N;
  (* src = "FIFO2.v:67" *)
  input ENQ;
  (* src = "FIFO2.v:71" *)
  output FULL_N;
  (* src = "FIFO2.v:65" *)
  input RST;
  (* src = "FIFO2.v:77" *)
  wire data0_reg;
  (* src = "FIFO2.v:78" *)
  wire data1_reg;
  (* src = "FIFO2.v:76" *)
  wire empty_reg;
  (* src = "FIFO2.v:75" *)
  wire full_reg;
  std_inv ag_38_ (
    .a(RST),
    .y(ag_04_)
  );
  std_nor2 ag_39_ (
    .a(CLR),
    .b(ag_04_),
    .y(ag_05_)
  );
  std_inv ag_40_ (
    .a(full_reg),
    .y(ag_06_)
  );
  std_inv ag_41_ (
    .a(ENQ),
    .y(ag_07_)
  );
  std_nor2 ag_42_ (
    .a(DEQ),
    .b(ag_07_),
    .y(ag_08_)
  );
  std_inv ag_43_ (
    .a(DEQ),
    .y(ag_09_)
  );
  std_nor2 ag_44_ (
    .a(ag_09_),
    .b(ENQ),
    .y(ag_10_)
  );
  std_nor2 ag_45_ (
    .a(ag_10_),
    .b(ag_08_),
    .y(ag_11_)
  );
  std_nand2 ag_46_ (
    .a(ag_11_),
    .b(ag_06_),
    .y(ag_12_)
  );
  std_nand2 ag_47_ (
    .a(ag_08_),
    .b(empty_reg),
    .y(ag_13_)
  );
  std_nand2 ag_48_ (
    .a(ag_13_),
    .b(ag_12_),
    .y(ag_14_)
  );
  std_nand2 ag_49_ (
    .a(ag_14_),
    .b(ag_05_),
    .y(ag_03_)
  );
  std_nand2 ag_50_ (
    .a(ag_09_),
    .b(ENQ),
    .y(ag_15_)
  );
  std_nand2 ag_51_ (
    .a(DEQ),
    .b(ag_07_),
    .y(ag_16_)
  );
  std_nand2 ag_52_ (
    .a(ag_16_),
    .b(ag_15_),
    .y(ag_17_)
  );
  std_nor2 ag_53_ (
    .a(ag_17_),
    .b(empty_reg),
    .y(ag_18_)
  );
  std_nand2 ag_54_ (
    .a(ag_10_),
    .b(full_reg),
    .y(ag_19_)
  );
  std_nand2 ag_55_ (
    .a(ag_19_),
    .b(ag_05_),
    .y(ag_20_)
  );
  std_nor2 ag_56_ (
    .a(ag_20_),
    .b(ag_18_),
    .y(ag_02_)
  );
  std_nand2 ag_57_ (
    .a(ENQ),
    .b(empty_reg),
    .y(ag_21_)
  );
  std_inv ag_58_ (
    .a(ag_21_),
    .y(ag_22_)
  );
  std_nor2 ag_59_ (
    .a(ag_22_),
    .b(data1_reg),
    .y(ag_23_)
  );
  std_nor2 ag_60_ (
    .a(ag_21_),
    .b(D_IN),
    .y(ag_24_)
  );
  std_nor2 ag_61_ (
    .a(ag_24_),
    .b(ag_23_),
    .y(ag_01_)
  );
  std_nand2 ag_62_ (
    .a(ag_09_),
    .b(empty_reg),
    .y(ag_25_)
  );
  std_nand2 ag_63_ (
    .a(ag_25_),
    .b(ENQ),
    .y(ag_26_)
  );
  std_inv ag_64_ (
    .a(data0_reg),
    .y(ag_27_)
  );
  std_nor2 ag_65_ (
    .a(ag_09_),
    .b(full_reg),
    .y(ag_28_)
  );
  std_nor2 ag_66_ (
    .a(ag_28_),
    .b(ag_27_),
    .y(ag_29_)
  );
  std_nand2 ag_67_ (
    .a(ag_29_),
    .b(ag_26_),
    .y(ag_30_)
  );
  std_inv ag_68_ (
    .a(data1_reg),
    .y(ag_31_)
  );
  std_nand2 ag_69_ (
    .a(DEQ),
    .b(ag_06_),
    .y(ag_32_)
  );
  std_nor2 ag_70_ (
    .a(ag_32_),
    .b(ag_31_),
    .y(ag_33_)
  );
  std_nand2 ag_71_ (
    .a(ag_06_),
    .b(empty_reg),
    .y(ag_34_)
  );
  std_nand2 ag_72_ (
    .a(ag_34_),
    .b(D_IN),
    .y(ag_35_)
  );
  std_nor2 ag_73_ (
    .a(ag_35_),
    .b(ag_26_),
    .y(ag_36_)
  );
  std_nor2 ag_74_ (
    .a(ag_36_),
    .b(ag_33_),
    .y(ag_37_)
  );
  std_nand2 ag_75_ (
    .a(ag_37_),
    .b(ag_30_),
    .y(ag_00_)
  );
  d_ff ag_76_ (
    .clk(CLK),
    .d(ag_02_),
    .q(empty_reg)
  );
  d_ff ag_77_ (
    .clk(CLK),
    .d(ag_03_),
    .q(full_reg)
  );
  d_ff ag_78_ (
    .clk(CLK),
    .d(ag_01_),
    .q(data1_reg)
  );
  d_ff ag_79_ (
    .clk(CLK),
    .d(ag_00_),
    .q(data0_reg)
  );
  assign D_OUT = data0_reg;
  assign EMPTY_N = empty_reg;
  assign FULL_N = full_reg;
endmodule

(* top =  1  *)
(* src = "mkBitNode.v:47" *)
module mkBitNode(CLK, RST_N, c2b_0_put, EN_c2b_0_put, RDY_c2b_0_put, c2b_1_put, EN_c2b_1_put, RDY_c2b_1_put, c2b_2_put, EN_c2b_2_put, RDY_c2b_2_put, EN_b2c_get, b2c_get, RDY_b2c_get, codeIn_put, EN_codeIn_put, RDY_codeIn_put, EN_dataOut_get, dataOut_get, RDY_dataOut_get);
  wire ag_0_;
  wire ag_1_;
  wire ag_2_;
  wire ag_3_;
  (* src = "mkBitNode.v:171" *)
  wire CAN_FIRE_RL_rlProcessChkNodeResult;
  (* src = "mkBitNode.v:171" *)
  wire CAN_FIRE_RL_rlProcessNewData;
  (* src = "mkBitNode.v:171" *)
  wire CAN_FIRE_b2c_get;
  (* src = "mkBitNode.v:171" *)
  wire CAN_FIRE_c2b_0_put;
  (* src = "mkBitNode.v:171" *)
  wire CAN_FIRE_c2b_1_put;
  (* src = "mkBitNode.v:171" *)
  wire CAN_FIRE_c2b_2_put;
  (* src = "mkBitNode.v:171" *)
  wire CAN_FIRE_codeIn_put;
  (* src = "mkBitNode.v:171" *)
  wire CAN_FIRE_dataOut_get;
  (* src = "mkBitNode.v:73" *)
  input CLK;
  (* src = "mkBitNode.v:92" *)
  input EN_b2c_get;
  (* src = "mkBitNode.v:78" *)
  input EN_c2b_0_put;
  (* src = "mkBitNode.v:83" *)
  input EN_c2b_1_put;
  (* src = "mkBitNode.v:88" *)
  input EN_c2b_2_put;
  (* src = "mkBitNode.v:98" *)
  input EN_codeIn_put;
  (* src = "mkBitNode.v:102" *)
  input EN_dataOut_get;
  (* src = "mkBitNode.v:94" *)
  output RDY_b2c_get;
  (* src = "mkBitNode.v:79" *)
  output RDY_c2b_0_put;
  (* src = "mkBitNode.v:84" *)
  output RDY_c2b_1_put;
  (* src = "mkBitNode.v:89" *)
  output RDY_c2b_2_put;
  (* src = "mkBitNode.v:99" *)
  output RDY_codeIn_put;
  (* src = "mkBitNode.v:104" *)
  output RDY_dataOut_get;
  (* src = "mkBitNode.v:74" *)
  input RST_N;
  (* src = "mkBitNode.v:171" *)
  wire WILL_FIRE_RL_rlProcessChkNodeResult;
  (* src = "mkBitNode.v:171" *)
  wire WILL_FIRE_RL_rlProcessNewData;
  (* src = "mkBitNode.v:171" *)
  wire WILL_FIRE_b2c_get;
  (* src = "mkBitNode.v:171" *)
  wire WILL_FIRE_c2b_0_put;
  (* src = "mkBitNode.v:171" *)
  wire WILL_FIRE_c2b_1_put;
  (* src = "mkBitNode.v:171" *)
  wire WILL_FIRE_c2b_2_put;
  (* src = "mkBitNode.v:171" *)
  wire WILL_FIRE_codeIn_put;
  (* src = "mkBitNode.v:171" *)
  wire WILL_FIRE_dataOut_get;
  (* src = "mkBitNode.v:93" *)
  output b2c_get;
  (* src = "mkBitNode.v:77" *)
  input c2b_0_put;
  (* src = "mkBitNode.v:82" *)
  input c2b_1_put;
  (* src = "mkBitNode.v:87" *)
  input c2b_2_put;
  (* src = "mkBitNode.v:97" *)
  input codeIn_put;
  (* src = "mkBitNode.v:103" *)
  output dataOut_get;
  (* src = "mkBitNode.v:117" *)
  wire \ffB2C$DEQ ;
  (* src = "mkBitNode.v:117" *)
  wire \ffB2C$D_IN ;
  (* src = "mkBitNode.v:117" *)
  wire \ffB2C$D_OUT ;
  (* src = "mkBitNode.v:117" *)
  wire \ffB2C$EMPTY_N ;
  (* src = "mkBitNode.v:117" *)
  wire \ffB2C$ENQ ;
  (* src = "mkBitNode.v:117" *)
  wire \ffB2C$FULL_N ;
  (* src = "mkBitNode.v:126" *)
  wire \ffCodeIn$DEQ ;
  (* src = "mkBitNode.v:126" *)
  wire \ffCodeIn$D_IN ;
  (* src = "mkBitNode.v:126" *)
  wire \ffCodeIn$D_OUT ;
  (* src = "mkBitNode.v:126" *)
  wire \ffCodeIn$EMPTY_N ;
  (* src = "mkBitNode.v:126" *)
  wire \ffCodeIn$ENQ ;
  (* src = "mkBitNode.v:126" *)
  wire \ffCodeIn$FULL_N ;
  (* src = "mkBitNode.v:135" *)
  wire \ffDataOut$DEQ ;
  (* src = "mkBitNode.v:135" *)
  wire \ffDataOut$D_IN ;
  (* src = "mkBitNode.v:135" *)
  wire \ffDataOut$D_OUT ;
  (* src = "mkBitNode.v:135" *)
  wire \ffDataOut$EMPTY_N ;
  (* src = "mkBitNode.v:135" *)
  wire \ffDataOut$ENQ ;
  (* src = "mkBitNode.v:135" *)
  wire \ffDataOut$FULL_N ;
  (* src = "mkBitNode.v:144" *)
  wire \vffC2B_0$DEQ ;
  (* src = "mkBitNode.v:144" *)
  wire \vffC2B_0$D_IN ;
  (* src = "mkBitNode.v:144" *)
  wire \vffC2B_0$D_OUT ;
  (* src = "mkBitNode.v:144" *)
  wire \vffC2B_0$EMPTY_N ;
  (* src = "mkBitNode.v:144" *)
  wire \vffC2B_0$ENQ ;
  (* src = "mkBitNode.v:144" *)
  wire \vffC2B_0$FULL_N ;
  (* src = "mkBitNode.v:153" *)
  wire \vffC2B_1$DEQ ;
  (* src = "mkBitNode.v:153" *)
  wire \vffC2B_1$D_IN ;
  (* src = "mkBitNode.v:153" *)
  wire \vffC2B_1$D_OUT ;
  (* src = "mkBitNode.v:153" *)
  wire \vffC2B_1$EMPTY_N ;
  (* src = "mkBitNode.v:153" *)
  wire \vffC2B_1$ENQ ;
  (* src = "mkBitNode.v:153" *)
  wire \vffC2B_1$FULL_N ;
  (* src = "mkBitNode.v:162" *)
  wire \vffC2B_2$DEQ ;
  (* src = "mkBitNode.v:162" *)
  wire \vffC2B_2$D_IN ;
  (* src = "mkBitNode.v:162" *)
  wire \vffC2B_2$D_OUT ;
  (* src = "mkBitNode.v:162" *)
  wire \vffC2B_2$EMPTY_N ;
  (* src = "mkBitNode.v:162" *)
  wire \vffC2B_2$ENQ ;
  (* src = "mkBitNode.v:162" *)
  wire \vffC2B_2$FULL_N ;
  std_inv ag_4_ (
    .a(\ffCodeIn$EMPTY_N ),
    .y(ag_3_)
  );
  std_inv ag_5_ (
    .a(\ffB2C$FULL_N ),
    .y(ag_0_)
  );
  std_nor2 ag_6_ (
    .a(ag_0_),
    .b(ag_3_),
    .y(\ffB2C$ENQ )
  );
  std_nand2 ag_7_ (
    .a(\vffC2B_1$EMPTY_N ),
    .b(\vffC2B_0$EMPTY_N ),
    .y(ag_1_)
  );
  std_nand2 ag_8_ (
    .a(\ffDataOut$FULL_N ),
    .b(\vffC2B_2$EMPTY_N ),
    .y(ag_2_)
  );
  std_nor2 ag_9_ (
    .a(ag_2_),
    .b(ag_1_),
    .y(\ffDataOut$ENQ )
  );
  (* src = "mkBitNode.v:223" *)
  \$paramod\FIFO2\width=1\guarded=1  ffB2C (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(EN_b2c_get),
    .D_IN(\ffB2C$D_IN ),
    .D_OUT(\ffB2C$D_OUT ),
    .EMPTY_N(\ffB2C$EMPTY_N ),
    .ENQ(\ffB2C$ENQ ),
    .FULL_N(\ffB2C$FULL_N ),
    .RST(RST_N)
  );
  (* src = "mkBitNode.v:234" *)
  \$paramod\FIFO2\width=1\guarded=1  ffCodeIn (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(\ffB2C$ENQ ),
    .D_IN(codeIn_put),
    .D_OUT(\ffB2C$D_IN ),
    .EMPTY_N(\ffCodeIn$EMPTY_N ),
    .ENQ(EN_codeIn_put),
    .FULL_N(\ffCodeIn$FULL_N ),
    .RST(RST_N)
  );
  (* src = "mkBitNode.v:245" *)
  \$paramod\FIFO2\width=1\guarded=1  ffDataOut (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(EN_dataOut_get),
    .D_IN(\ffDataOut$D_IN ),
    .D_OUT(\ffDataOut$D_OUT ),
    .EMPTY_N(\ffDataOut$EMPTY_N ),
    .ENQ(\ffDataOut$ENQ ),
    .FULL_N(\ffDataOut$FULL_N ),
    .RST(RST_N)
  );
  (* src = "mkBitNode.v:316" *)
  module_fnBitNodeCore instance_fnBitNodeCore_0 (
    .fnBitNodeCore(\ffDataOut$D_IN ),
    .\fnBitNodeCore_i[0] (\vffC2B_0$D_OUT ),
    .\fnBitNodeCore_i[1] (\vffC2B_1$D_OUT ),
    .\fnBitNodeCore_i[2] (\vffC2B_2$D_OUT )
  );
  (* src = "mkBitNode.v:256" *)
  \$paramod\FIFO2\width=1\guarded=1  vffC2B_0 (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(\ffDataOut$ENQ ),
    .D_IN(c2b_0_put),
    .D_OUT(\vffC2B_0$D_OUT ),
    .EMPTY_N(\vffC2B_0$EMPTY_N ),
    .ENQ(EN_c2b_0_put),
    .FULL_N(\vffC2B_0$FULL_N ),
    .RST(RST_N)
  );
  (* src = "mkBitNode.v:267" *)
  \$paramod\FIFO2\width=1\guarded=1  vffC2B_1 (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(\ffDataOut$ENQ ),
    .D_IN(c2b_1_put),
    .D_OUT(\vffC2B_1$D_OUT ),
    .EMPTY_N(\vffC2B_1$EMPTY_N ),
    .ENQ(EN_c2b_1_put),
    .FULL_N(\vffC2B_1$FULL_N ),
    .RST(RST_N)
  );
  (* src = "mkBitNode.v:278" *)
  \$paramod\FIFO2\width=1\guarded=1  vffC2B_2 (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(\ffDataOut$ENQ ),
    .D_IN(c2b_2_put),
    .D_OUT(\vffC2B_2$D_OUT ),
    .EMPTY_N(\vffC2B_2$EMPTY_N ),
    .ENQ(EN_c2b_2_put),
    .FULL_N(\vffC2B_2$FULL_N ),
    .RST(RST_N)
  );
  assign CAN_FIRE_RL_rlProcessChkNodeResult = \ffDataOut$ENQ ;
  assign CAN_FIRE_RL_rlProcessNewData = \ffB2C$ENQ ;
  assign CAN_FIRE_b2c_get = \ffB2C$EMPTY_N ;
  assign CAN_FIRE_c2b_0_put = \vffC2B_0$FULL_N ;
  assign CAN_FIRE_c2b_1_put = \vffC2B_1$FULL_N ;
  assign CAN_FIRE_c2b_2_put = \vffC2B_2$FULL_N ;
  assign CAN_FIRE_codeIn_put = \ffCodeIn$FULL_N ;
  assign CAN_FIRE_dataOut_get = \ffDataOut$EMPTY_N ;
  assign RDY_b2c_get = \ffB2C$EMPTY_N ;
  assign RDY_c2b_0_put = \vffC2B_0$FULL_N ;
  assign RDY_c2b_1_put = \vffC2B_1$FULL_N ;
  assign RDY_c2b_2_put = \vffC2B_2$FULL_N ;
  assign RDY_codeIn_put = \ffCodeIn$FULL_N ;
  assign RDY_dataOut_get = \ffDataOut$EMPTY_N ;
  assign WILL_FIRE_RL_rlProcessChkNodeResult = \ffDataOut$ENQ ;
  assign WILL_FIRE_RL_rlProcessNewData = \ffB2C$ENQ ;
  assign WILL_FIRE_b2c_get = EN_b2c_get;
  assign WILL_FIRE_c2b_0_put = EN_c2b_0_put;
  assign WILL_FIRE_c2b_1_put = EN_c2b_1_put;
  assign WILL_FIRE_c2b_2_put = EN_c2b_2_put;
  assign WILL_FIRE_codeIn_put = EN_codeIn_put;
  assign WILL_FIRE_dataOut_get = EN_dataOut_get;
  assign b2c_get = \ffB2C$D_OUT ;
  assign dataOut_get = \ffDataOut$D_OUT ;
  assign \ffB2C$DEQ  = EN_b2c_get;
  assign \ffCodeIn$DEQ  = \ffB2C$ENQ ;
  assign \ffCodeIn$D_IN  = codeIn_put;
  assign \ffCodeIn$D_OUT  = \ffB2C$D_IN ;
  assign \ffCodeIn$ENQ  = EN_codeIn_put;
  assign \ffDataOut$DEQ  = EN_dataOut_get;
  assign \vffC2B_0$DEQ  = \ffDataOut$ENQ ;
  assign \vffC2B_0$D_IN  = c2b_0_put;
  assign \vffC2B_0$ENQ  = EN_c2b_0_put;
  assign \vffC2B_1$DEQ  = \ffDataOut$ENQ ;
  assign \vffC2B_1$D_IN  = c2b_1_put;
  assign \vffC2B_1$ENQ  = EN_c2b_1_put;
  assign \vffC2B_2$DEQ  = \ffDataOut$ENQ ;
  assign \vffC2B_2$D_IN  = c2b_2_put;
  assign \vffC2B_2$ENQ  = EN_c2b_2_put;
endmodule

(* src = "module_fnBitNodeCore.v:30" *)
module module_fnBitNodeCore(\fnBitNodeCore_i[0] , \fnBitNodeCore_i[1] , \fnBitNodeCore_i[2] , fnBitNodeCore);
  wire ag_00_;
  wire ag_01_;
  wire ag_02_;
  wire ag_03_;
  wire ag_04_;
  (* src = "module_fnBitNodeCore.v:34" *)
  output fnBitNodeCore;
  (* src = "module_fnBitNodeCore.v:33" *)
  input \fnBitNodeCore_i[0] ;
  (* src = "module_fnBitNodeCore.v:33" *)
  input \fnBitNodeCore_i[1] ;
  (* src = "module_fnBitNodeCore.v:33" *)
  input \fnBitNodeCore_i[2] ;
  std_nand2 ag_05_ (
    .a(\fnBitNodeCore_i[0] ),
    .b(\fnBitNodeCore_i[1] ),
    .y(ag_00_)
  );
  std_inv ag_06_ (
    .a(\fnBitNodeCore_i[1] ),
    .y(ag_01_)
  );
  std_inv ag_07_ (
    .a(\fnBitNodeCore_i[0] ),
    .y(ag_02_)
  );
  std_nand2 ag_08_ (
    .a(ag_02_),
    .b(ag_01_),
    .y(ag_03_)
  );
  std_nand2 ag_09_ (
    .a(ag_03_),
    .b(\fnBitNodeCore_i[2] ),
    .y(ag_04_)
  );
  std_nand2 ag_10_ (
    .a(ag_04_),
    .b(ag_00_),
    .y(fnBitNodeCore)
  );
endmodule
