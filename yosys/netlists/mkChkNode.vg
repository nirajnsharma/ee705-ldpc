/* Generated by Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os) */

(* src = "lib/FIFO2_1.v:51" *)
module FIFO2_1(CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR);
  (* src = "lib/FIFO2_1.v:133" *)
  wire ag_00_;
  (* src = "lib/FIFO2_1.v:133" *)
  wire ag_01_;
  (* src = "lib/FIFO2_1.v:104" *)
  wire ag_02_;
  (* src = "lib/FIFO2_1.v:104" *)
  wire ag_03_;
  wire ag_04_;
  wire ag_05_;
  wire ag_06_;
  wire ag_07_;
  wire ag_08_;
  wire ag_09_;
  wire ag_10_;
  wire ag_11_;
  wire ag_12_;
  wire ag_13_;
  wire ag_14_;
  wire ag_15_;
  wire ag_16_;
  wire ag_17_;
  wire ag_18_;
  wire ag_19_;
  wire ag_20_;
  wire ag_21_;
  wire ag_22_;
  wire ag_23_;
  wire ag_24_;
  wire ag_25_;
  wire ag_26_;
  wire ag_27_;
  wire ag_28_;
  wire ag_29_;
  wire ag_30_;
  wire ag_31_;
  (* src = "lib/FIFO2_1.v:64" *)
  input CLK;
  (* src = "lib/FIFO2_1.v:69" *)
  input CLR;
  (* src = "lib/FIFO2_1.v:68" *)
  input DEQ;
  (* src = "lib/FIFO2_1.v:66" *)
  input D_IN;
  (* src = "lib/FIFO2_1.v:73" *)
  output D_OUT;
  (* src = "lib/FIFO2_1.v:72" *)
  output EMPTY_N;
  (* src = "lib/FIFO2_1.v:67" *)
  input ENQ;
  (* src = "lib/FIFO2_1.v:71" *)
  output FULL_N;
  (* src = "lib/FIFO2_1.v:65" *)
  input RST;
  (* src = "lib/FIFO2_1.v:77" *)
  wire data0_reg;
  (* src = "lib/FIFO2_1.v:78" *)
  wire data1_reg;
  (* src = "lib/FIFO2_1.v:76" *)
  wire empty_reg;
  (* src = "lib/FIFO2_1.v:75" *)
  wire full_reg;
  std_inv ag_32_ (
    .a(data1_reg),
    .y(ag_04_)
  );
  std_nand2 ag_33_ (
    .a(ENQ),
    .b(empty_reg),
    .y(ag_05_)
  );
  std_nor2 ag_34_ (
    .a(ag_05_),
    .b(D_IN),
    .y(ag_06_)
  );
  std_aoi ag_35_ (
    .a(ag_05_),
    .b(ag_04_),
    .c(ag_06_),
    .y(ag_01_)
  );
  std_inv ag_36_ (
    .a(ENQ),
    .y(ag_07_)
  );
  std_nand2 ag_37_ (
    .a(DEQ),
    .b(ag_07_),
    .y(ag_08_)
  );
  std_inv ag_38_ (
    .a(DEQ),
    .y(ag_09_)
  );
  std_nand2 ag_39_ (
    .a(ag_09_),
    .b(ENQ),
    .y(ag_10_)
  );
  std_nand2 ag_40_ (
    .a(ag_10_),
    .b(ag_08_),
    .y(ag_11_)
  );
  std_nor2 ag_41_ (
    .a(ag_11_),
    .b(empty_reg),
    .y(ag_12_)
  );
  std_inv ag_42_ (
    .a(RST),
    .y(ag_13_)
  );
  std_nor2 ag_43_ (
    .a(ag_13_),
    .b(CLR),
    .y(ag_14_)
  );
  std_nor2 ag_44_ (
    .a(ag_09_),
    .b(ENQ),
    .y(ag_15_)
  );
  std_nand2 ag_45_ (
    .a(ag_15_),
    .b(full_reg),
    .y(ag_16_)
  );
  std_nand2 ag_46_ (
    .a(ag_16_),
    .b(ag_14_),
    .y(ag_17_)
  );
  std_nor2 ag_47_ (
    .a(ag_17_),
    .b(ag_12_),
    .y(ag_02_)
  );
  std_inv ag_48_ (
    .a(full_reg),
    .y(ag_18_)
  );
  std_nand3 ag_49_ (
    .a(ag_10_),
    .b(ag_08_),
    .c(ag_18_),
    .y(ag_19_)
  );
  std_nor2 ag_50_ (
    .a(DEQ),
    .b(ag_07_),
    .y(ag_20_)
  );
  std_nand2 ag_51_ (
    .a(ag_20_),
    .b(empty_reg),
    .y(ag_21_)
  );
  std_nand2 ag_52_ (
    .a(ag_21_),
    .b(ag_19_),
    .y(ag_22_)
  );
  std_nand2 ag_53_ (
    .a(ag_22_),
    .b(ag_14_),
    .y(ag_03_)
  );
  std_nand2 ag_54_ (
    .a(DEQ),
    .b(ag_18_),
    .y(ag_23_)
  );
  std_inv ag_55_ (
    .a(data0_reg),
    .y(ag_24_)
  );
  std_aoi ag_56_ (
    .a(ag_09_),
    .b(empty_reg),
    .c(ag_07_),
    .y(ag_25_)
  );
  std_nor2 ag_57_ (
    .a(ag_25_),
    .b(ag_24_),
    .y(ag_26_)
  );
  std_nand2 ag_58_ (
    .a(ag_26_),
    .b(ag_23_),
    .y(ag_27_)
  );
  std_nor2 ag_59_ (
    .a(ag_09_),
    .b(full_reg),
    .y(ag_28_)
  );
  std_nand2 ag_60_ (
    .a(ag_28_),
    .b(data1_reg),
    .y(ag_29_)
  );
  std_nand2 ag_61_ (
    .a(ag_18_),
    .b(empty_reg),
    .y(ag_30_)
  );
  std_nand3 ag_62_ (
    .a(ag_30_),
    .b(ag_25_),
    .c(D_IN),
    .y(ag_31_)
  );
  std_nand3 ag_63_ (
    .a(ag_31_),
    .b(ag_29_),
    .c(ag_27_),
    .y(ag_00_)
  );
  d_ff ag_64_ (
    .clk(CLK),
    .d(ag_00_),
    .q(data0_reg)
  );
  d_ff ag_65_ (
    .clk(CLK),
    .d(ag_01_),
    .q(data1_reg)
  );
  d_ff ag_66_ (
    .clk(CLK),
    .d(ag_03_),
    .q(full_reg)
  );
  d_ff ag_67_ (
    .clk(CLK),
    .d(ag_02_),
    .q(empty_reg)
  );
  assign D_OUT = data0_reg;
  assign EMPTY_N = empty_reg;
  assign FULL_N = full_reg;
endmodule

(* top =  1  *)
(* src = "rtl/mkChkNode.v:47" *)
module mkChkNode(CLK, RST_N, b2c_0_put, EN_b2c_0_put, RDY_b2c_0_put, b2c_1_put, EN_b2c_1_put, RDY_b2c_1_put, b2c_2_put, EN_b2c_2_put, RDY_b2c_2_put, EN_c2b_0_get, c2b_0_get, RDY_c2b_0_get, EN_c2b_1_get, c2b_1_get, RDY_c2b_1_get, EN_c2b_2_get, c2b_2_get, RDY_c2b_2_get);
  wire ag_0_;
  wire ag_1_;
  wire ag_2_;
  (* src = "rtl/mkChkNode.v:172" *)
  wire CAN_FIRE_RL_rlProcessIteration;
  (* src = "rtl/mkChkNode.v:172" *)
  wire CAN_FIRE_b2c_0_put;
  (* src = "rtl/mkChkNode.v:172" *)
  wire CAN_FIRE_b2c_1_put;
  (* src = "rtl/mkChkNode.v:172" *)
  wire CAN_FIRE_b2c_2_put;
  (* src = "rtl/mkChkNode.v:172" *)
  wire CAN_FIRE_c2b_0_get;
  (* src = "rtl/mkChkNode.v:172" *)
  wire CAN_FIRE_c2b_1_get;
  (* src = "rtl/mkChkNode.v:172" *)
  wire CAN_FIRE_c2b_2_get;
  (* src = "rtl/mkChkNode.v:73" *)
  input CLK;
  (* src = "rtl/mkChkNode.v:78" *)
  input EN_b2c_0_put;
  (* src = "rtl/mkChkNode.v:83" *)
  input EN_b2c_1_put;
  (* src = "rtl/mkChkNode.v:88" *)
  input EN_b2c_2_put;
  (* src = "rtl/mkChkNode.v:92" *)
  input EN_c2b_0_get;
  (* src = "rtl/mkChkNode.v:97" *)
  input EN_c2b_1_get;
  (* src = "rtl/mkChkNode.v:102" *)
  input EN_c2b_2_get;
  (* src = "rtl/mkChkNode.v:79" *)
  output RDY_b2c_0_put;
  (* src = "rtl/mkChkNode.v:84" *)
  output RDY_b2c_1_put;
  (* src = "rtl/mkChkNode.v:89" *)
  output RDY_b2c_2_put;
  (* src = "rtl/mkChkNode.v:94" *)
  output RDY_c2b_0_get;
  (* src = "rtl/mkChkNode.v:99" *)
  output RDY_c2b_1_get;
  (* src = "rtl/mkChkNode.v:104" *)
  output RDY_c2b_2_get;
  (* src = "rtl/mkChkNode.v:74" *)
  input RST_N;
  (* src = "rtl/mkChkNode.v:172" *)
  wire WILL_FIRE_RL_rlProcessIteration;
  (* src = "rtl/mkChkNode.v:172" *)
  wire WILL_FIRE_b2c_0_put;
  (* src = "rtl/mkChkNode.v:172" *)
  wire WILL_FIRE_b2c_1_put;
  (* src = "rtl/mkChkNode.v:172" *)
  wire WILL_FIRE_b2c_2_put;
  (* src = "rtl/mkChkNode.v:172" *)
  wire WILL_FIRE_c2b_0_get;
  (* src = "rtl/mkChkNode.v:172" *)
  wire WILL_FIRE_c2b_1_get;
  (* src = "rtl/mkChkNode.v:172" *)
  wire WILL_FIRE_c2b_2_get;
  (* src = "rtl/mkChkNode.v:77" *)
  input b2c_0_put;
  (* src = "rtl/mkChkNode.v:82" *)
  input b2c_1_put;
  (* src = "rtl/mkChkNode.v:87" *)
  input b2c_2_put;
  (* src = "rtl/mkChkNode.v:93" *)
  output c2b_0_get;
  (* src = "rtl/mkChkNode.v:98" *)
  output c2b_1_get;
  (* src = "rtl/mkChkNode.v:103" *)
  output c2b_2_get;
  (* src = "rtl/mkChkNode.v:188" *)
  wire \fnChkNodeCore___d16[0] ;
  (* src = "rtl/mkChkNode.v:188" *)
  wire \fnChkNodeCore___d16[1] ;
  (* src = "rtl/mkChkNode.v:188" *)
  wire \fnChkNodeCore___d16[2] ;
  (* src = "rtl/mkChkNode.v:118" *)
  wire \vffB2C_0$DEQ ;
  (* src = "rtl/mkChkNode.v:118" *)
  wire \vffB2C_0$D_IN ;
  (* src = "rtl/mkChkNode.v:118" *)
  wire \vffB2C_0$D_OUT ;
  (* src = "rtl/mkChkNode.v:118" *)
  wire \vffB2C_0$EMPTY_N ;
  (* src = "rtl/mkChkNode.v:118" *)
  wire \vffB2C_0$ENQ ;
  (* src = "rtl/mkChkNode.v:118" *)
  wire \vffB2C_0$FULL_N ;
  (* src = "rtl/mkChkNode.v:127" *)
  wire \vffB2C_1$DEQ ;
  (* src = "rtl/mkChkNode.v:127" *)
  wire \vffB2C_1$D_IN ;
  (* src = "rtl/mkChkNode.v:127" *)
  wire \vffB2C_1$D_OUT ;
  (* src = "rtl/mkChkNode.v:127" *)
  wire \vffB2C_1$EMPTY_N ;
  (* src = "rtl/mkChkNode.v:127" *)
  wire \vffB2C_1$ENQ ;
  (* src = "rtl/mkChkNode.v:127" *)
  wire \vffB2C_1$FULL_N ;
  (* src = "rtl/mkChkNode.v:136" *)
  wire \vffB2C_2$DEQ ;
  (* src = "rtl/mkChkNode.v:136" *)
  wire \vffB2C_2$D_IN ;
  (* src = "rtl/mkChkNode.v:136" *)
  wire \vffB2C_2$D_OUT ;
  (* src = "rtl/mkChkNode.v:136" *)
  wire \vffB2C_2$EMPTY_N ;
  (* src = "rtl/mkChkNode.v:136" *)
  wire \vffB2C_2$ENQ ;
  (* src = "rtl/mkChkNode.v:136" *)
  wire \vffB2C_2$FULL_N ;
  (* src = "rtl/mkChkNode.v:145" *)
  wire \vffC2B_0$DEQ ;
  (* src = "rtl/mkChkNode.v:145" *)
  wire \vffC2B_0$D_IN ;
  (* src = "rtl/mkChkNode.v:145" *)
  wire \vffC2B_0$D_OUT ;
  (* src = "rtl/mkChkNode.v:145" *)
  wire \vffC2B_0$EMPTY_N ;
  (* src = "rtl/mkChkNode.v:145" *)
  wire \vffC2B_0$ENQ ;
  (* src = "rtl/mkChkNode.v:145" *)
  wire \vffC2B_0$FULL_N ;
  (* src = "rtl/mkChkNode.v:154" *)
  wire \vffC2B_1$DEQ ;
  (* src = "rtl/mkChkNode.v:154" *)
  wire \vffC2B_1$D_IN ;
  (* src = "rtl/mkChkNode.v:154" *)
  wire \vffC2B_1$D_OUT ;
  (* src = "rtl/mkChkNode.v:154" *)
  wire \vffC2B_1$EMPTY_N ;
  (* src = "rtl/mkChkNode.v:154" *)
  wire \vffC2B_1$ENQ ;
  (* src = "rtl/mkChkNode.v:154" *)
  wire \vffC2B_1$FULL_N ;
  (* src = "rtl/mkChkNode.v:163" *)
  wire \vffC2B_2$DEQ ;
  (* src = "rtl/mkChkNode.v:163" *)
  wire \vffC2B_2$D_IN ;
  (* src = "rtl/mkChkNode.v:163" *)
  wire \vffC2B_2$D_OUT ;
  (* src = "rtl/mkChkNode.v:163" *)
  wire \vffC2B_2$EMPTY_N ;
  (* src = "rtl/mkChkNode.v:163" *)
  wire \vffC2B_2$ENQ ;
  (* src = "rtl/mkChkNode.v:163" *)
  wire \vffC2B_2$FULL_N ;
  std_nand2 ag_3_ (
    .a(\vffB2C_1$EMPTY_N ),
    .b(\vffB2C_0$EMPTY_N ),
    .y(ag_1_)
  );
  std_nand2 ag_4_ (
    .a(\vffC2B_1$FULL_N ),
    .b(\vffC2B_0$FULL_N ),
    .y(ag_2_)
  );
  std_nand2 ag_5_ (
    .a(\vffC2B_2$FULL_N ),
    .b(\vffB2C_2$EMPTY_N ),
    .y(ag_0_)
  );
  std_nor3 ag_6_ (
    .a(ag_0_),
    .b(ag_2_),
    .c(ag_1_),
    .y(\vffB2C_0$DEQ )
  );
  (* src = "rtl/mkChkNode.v:339" *)
  module_fnChkNodeCore instance_fnChkNodeCore_0 (
    .\fnChkNodeCore[0] (\fnChkNodeCore___d16[0] ),
    .\fnChkNodeCore[1] (\fnChkNodeCore___d16[1] ),
    .\fnChkNodeCore[2] (\fnChkNodeCore___d16[2] ),
    .\fnChkNodeCore_i[0] (\vffB2C_0$D_OUT ),
    .\fnChkNodeCore_i[1] (\vffB2C_1$D_OUT ),
    .\fnChkNodeCore_i[2] (\vffB2C_2$D_OUT )
  );
  (* src = "rtl/mkChkNode.v:225" *)
  FIFO2_1 vffB2C_0 (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(\vffB2C_0$DEQ ),
    .D_IN(b2c_0_put),
    .D_OUT(\vffB2C_0$D_OUT ),
    .EMPTY_N(\vffB2C_0$EMPTY_N ),
    .ENQ(EN_b2c_0_put),
    .FULL_N(\vffB2C_0$FULL_N ),
    .RST(RST_N)
  );
  (* src = "rtl/mkChkNode.v:236" *)
  FIFO2_1 vffB2C_1 (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(\vffB2C_0$DEQ ),
    .D_IN(b2c_1_put),
    .D_OUT(\vffB2C_1$D_OUT ),
    .EMPTY_N(\vffB2C_1$EMPTY_N ),
    .ENQ(EN_b2c_1_put),
    .FULL_N(\vffB2C_1$FULL_N ),
    .RST(RST_N)
  );
  (* src = "rtl/mkChkNode.v:247" *)
  FIFO2_1 vffB2C_2 (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(\vffB2C_0$DEQ ),
    .D_IN(b2c_2_put),
    .D_OUT(\vffB2C_2$D_OUT ),
    .EMPTY_N(\vffB2C_2$EMPTY_N ),
    .ENQ(EN_b2c_2_put),
    .FULL_N(\vffB2C_2$FULL_N ),
    .RST(RST_N)
  );
  (* src = "rtl/mkChkNode.v:258" *)
  FIFO2_1 vffC2B_0 (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(EN_c2b_0_get),
    .D_IN(\fnChkNodeCore___d16[0] ),
    .D_OUT(\vffC2B_0$D_OUT ),
    .EMPTY_N(\vffC2B_0$EMPTY_N ),
    .ENQ(\vffB2C_0$DEQ ),
    .FULL_N(\vffC2B_0$FULL_N ),
    .RST(RST_N)
  );
  (* src = "rtl/mkChkNode.v:269" *)
  FIFO2_1 vffC2B_1 (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(EN_c2b_1_get),
    .D_IN(\fnChkNodeCore___d16[1] ),
    .D_OUT(\vffC2B_1$D_OUT ),
    .EMPTY_N(\vffC2B_1$EMPTY_N ),
    .ENQ(\vffB2C_0$DEQ ),
    .FULL_N(\vffC2B_1$FULL_N ),
    .RST(RST_N)
  );
  (* src = "rtl/mkChkNode.v:280" *)
  FIFO2_1 vffC2B_2 (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(EN_c2b_2_get),
    .D_IN(\fnChkNodeCore___d16[2] ),
    .D_OUT(\vffC2B_2$D_OUT ),
    .EMPTY_N(\vffC2B_2$EMPTY_N ),
    .ENQ(\vffB2C_0$DEQ ),
    .FULL_N(\vffC2B_2$FULL_N ),
    .RST(RST_N)
  );
  assign CAN_FIRE_RL_rlProcessIteration = \vffB2C_0$DEQ ;
  assign CAN_FIRE_b2c_0_put = \vffB2C_0$FULL_N ;
  assign CAN_FIRE_b2c_1_put = \vffB2C_1$FULL_N ;
  assign CAN_FIRE_b2c_2_put = \vffB2C_2$FULL_N ;
  assign CAN_FIRE_c2b_0_get = \vffC2B_0$EMPTY_N ;
  assign CAN_FIRE_c2b_1_get = \vffC2B_1$EMPTY_N ;
  assign CAN_FIRE_c2b_2_get = \vffC2B_2$EMPTY_N ;
  assign RDY_b2c_0_put = \vffB2C_0$FULL_N ;
  assign RDY_b2c_1_put = \vffB2C_1$FULL_N ;
  assign RDY_b2c_2_put = \vffB2C_2$FULL_N ;
  assign RDY_c2b_0_get = \vffC2B_0$EMPTY_N ;
  assign RDY_c2b_1_get = \vffC2B_1$EMPTY_N ;
  assign RDY_c2b_2_get = \vffC2B_2$EMPTY_N ;
  assign WILL_FIRE_RL_rlProcessIteration = \vffB2C_0$DEQ ;
  assign WILL_FIRE_b2c_0_put = EN_b2c_0_put;
  assign WILL_FIRE_b2c_1_put = EN_b2c_1_put;
  assign WILL_FIRE_b2c_2_put = EN_b2c_2_put;
  assign WILL_FIRE_c2b_0_get = EN_c2b_0_get;
  assign WILL_FIRE_c2b_1_get = EN_c2b_1_get;
  assign WILL_FIRE_c2b_2_get = EN_c2b_2_get;
  assign c2b_0_get = \vffC2B_0$D_OUT ;
  assign c2b_1_get = \vffC2B_1$D_OUT ;
  assign c2b_2_get = \vffC2B_2$D_OUT ;
  assign \vffB2C_0$D_IN  = b2c_0_put;
  assign \vffB2C_0$ENQ  = EN_b2c_0_put;
  assign \vffB2C_1$DEQ  = \vffB2C_0$DEQ ;
  assign \vffB2C_1$D_IN  = b2c_1_put;
  assign \vffB2C_1$ENQ  = EN_b2c_1_put;
  assign \vffB2C_2$DEQ  = \vffB2C_0$DEQ ;
  assign \vffB2C_2$D_IN  = b2c_2_put;
  assign \vffB2C_2$ENQ  = EN_b2c_2_put;
  assign \vffC2B_0$DEQ  = EN_c2b_0_get;
  assign \vffC2B_0$D_IN  = \fnChkNodeCore___d16[0] ;
  assign \vffC2B_0$ENQ  = \vffB2C_0$DEQ ;
  assign \vffC2B_1$DEQ  = EN_c2b_1_get;
  assign \vffC2B_1$D_IN  = \fnChkNodeCore___d16[1] ;
  assign \vffC2B_1$ENQ  = \vffB2C_0$DEQ ;
  assign \vffC2B_2$DEQ  = EN_c2b_2_get;
  assign \vffC2B_2$D_IN  = \fnChkNodeCore___d16[2] ;
  assign \vffC2B_2$ENQ  = \vffB2C_0$DEQ ;
endmodule

(* src = "rtl/module_fnChkNodeCore.v:30" *)
module module_fnChkNodeCore(\fnChkNodeCore_i[0] , \fnChkNodeCore_i[1] , \fnChkNodeCore_i[2] , \fnChkNodeCore[0] , \fnChkNodeCore[1] , \fnChkNodeCore[2] );
  wire ag_00_;
  wire ag_01_;
  wire ag_02_;
  wire ag_03_;
  wire ag_04_;
  wire ag_05_;
  wire ag_06_;
  wire ag_07_;
  wire ag_08_;
  (* src = "rtl/module_fnChkNodeCore.v:34" *)
  output \fnChkNodeCore[0] ;
  (* src = "rtl/module_fnChkNodeCore.v:34" *)
  output \fnChkNodeCore[1] ;
  (* src = "rtl/module_fnChkNodeCore.v:34" *)
  output \fnChkNodeCore[2] ;
  (* src = "rtl/module_fnChkNodeCore.v:33" *)
  input \fnChkNodeCore_i[0] ;
  (* src = "rtl/module_fnChkNodeCore.v:33" *)
  input \fnChkNodeCore_i[1] ;
  (* src = "rtl/module_fnChkNodeCore.v:33" *)
  input \fnChkNodeCore_i[2] ;
  std_inv ag_09_ (
    .a(\fnChkNodeCore_i[2] ),
    .y(ag_06_)
  );
  std_nand2 ag_10_ (
    .a(ag_06_),
    .b(\fnChkNodeCore_i[1] ),
    .y(ag_07_)
  );
  std_inv ag_11_ (
    .a(\fnChkNodeCore_i[1] ),
    .y(ag_08_)
  );
  std_nand2 ag_12_ (
    .a(\fnChkNodeCore_i[2] ),
    .b(ag_08_),
    .y(ag_00_)
  );
  std_nand2 ag_13_ (
    .a(ag_00_),
    .b(ag_07_),
    .y(\fnChkNodeCore[0] )
  );
  std_inv ag_14_ (
    .a(\fnChkNodeCore_i[0] ),
    .y(ag_01_)
  );
  std_nand2 ag_15_ (
    .a(ag_01_),
    .b(\fnChkNodeCore_i[2] ),
    .y(ag_02_)
  );
  std_nand2 ag_16_ (
    .a(\fnChkNodeCore_i[0] ),
    .b(ag_06_),
    .y(ag_03_)
  );
  std_nand2 ag_17_ (
    .a(ag_03_),
    .b(ag_02_),
    .y(\fnChkNodeCore[1] )
  );
  std_nand2 ag_18_ (
    .a(ag_01_),
    .b(\fnChkNodeCore_i[1] ),
    .y(ag_04_)
  );
  std_nand2 ag_19_ (
    .a(\fnChkNodeCore_i[0] ),
    .b(ag_08_),
    .y(ag_05_)
  );
  std_nand2 ag_20_ (
    .a(ag_05_),
    .b(ag_04_),
    .y(\fnChkNodeCore[2] )
  );
endmodule
