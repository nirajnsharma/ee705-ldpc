/* Generated by Yosys 0.7 (git sha1 61f6811, gcc 5.4.0-6ubuntu1~16.04.4 -O2 -fstack-protector-strong -fPIC -Os) */

(* src = "FIFO2.v:51" *)
module \$paramod\FIFO2\width=1\guarded=1 (CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR);
  (* src = "FIFO2.v:133" *)
  wire _00_;
  (* src = "FIFO2.v:133" *)
  wire _01_;
  (* src = "FIFO2.v:104" *)
  wire _02_;
  (* src = "FIFO2.v:104" *)
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  (* src = "FIFO2.v:64" *)
  input CLK;
  (* src = "FIFO2.v:69" *)
  input CLR;
  (* src = "FIFO2.v:68" *)
  input DEQ;
  (* src = "FIFO2.v:66" *)
  input D_IN;
  (* src = "FIFO2.v:73" *)
  output D_OUT;
  (* src = "FIFO2.v:72" *)
  output EMPTY_N;
  (* src = "FIFO2.v:67" *)
  input ENQ;
  (* src = "FIFO2.v:71" *)
  output FULL_N;
  (* src = "FIFO2.v:65" *)
  input RST;
  (* src = "FIFO2.v:77" *)
  wire data0_reg;
  (* src = "FIFO2.v:78" *)
  wire data1_reg;
  (* src = "FIFO2.v:76" *)
  wire empty_reg;
  (* src = "FIFO2.v:75" *)
  wire full_reg;
  NOT _38_ (
    .A(RST),
    .Y(_04_)
  );
  NOR _39_ (
    .A(CLR),
    .B(_04_),
    .Y(_05_)
  );
  NOT _40_ (
    .A(full_reg),
    .Y(_06_)
  );
  NOT _41_ (
    .A(ENQ),
    .Y(_07_)
  );
  NOR _42_ (
    .A(DEQ),
    .B(_07_),
    .Y(_08_)
  );
  NOT _43_ (
    .A(DEQ),
    .Y(_09_)
  );
  NOR _44_ (
    .A(_09_),
    .B(ENQ),
    .Y(_10_)
  );
  NOR _45_ (
    .A(_10_),
    .B(_08_),
    .Y(_11_)
  );
  NAND _46_ (
    .A(_11_),
    .B(_06_),
    .Y(_12_)
  );
  NAND _47_ (
    .A(_08_),
    .B(empty_reg),
    .Y(_13_)
  );
  NAND _48_ (
    .A(_13_),
    .B(_12_),
    .Y(_14_)
  );
  NAND _49_ (
    .A(_14_),
    .B(_05_),
    .Y(_03_)
  );
  NAND _50_ (
    .A(_09_),
    .B(ENQ),
    .Y(_15_)
  );
  NAND _51_ (
    .A(DEQ),
    .B(_07_),
    .Y(_16_)
  );
  NAND _52_ (
    .A(_16_),
    .B(_15_),
    .Y(_17_)
  );
  NOR _53_ (
    .A(_17_),
    .B(empty_reg),
    .Y(_18_)
  );
  NAND _54_ (
    .A(_10_),
    .B(full_reg),
    .Y(_19_)
  );
  NAND _55_ (
    .A(_19_),
    .B(_05_),
    .Y(_20_)
  );
  NOR _56_ (
    .A(_20_),
    .B(_18_),
    .Y(_02_)
  );
  NAND _57_ (
    .A(ENQ),
    .B(empty_reg),
    .Y(_21_)
  );
  NOT _58_ (
    .A(_21_),
    .Y(_22_)
  );
  NOR _59_ (
    .A(_22_),
    .B(data1_reg),
    .Y(_23_)
  );
  NOR _60_ (
    .A(_21_),
    .B(D_IN),
    .Y(_24_)
  );
  NOR _61_ (
    .A(_24_),
    .B(_23_),
    .Y(_01_)
  );
  NAND _62_ (
    .A(_09_),
    .B(empty_reg),
    .Y(_25_)
  );
  NAND _63_ (
    .A(_25_),
    .B(ENQ),
    .Y(_26_)
  );
  NOT _64_ (
    .A(data0_reg),
    .Y(_27_)
  );
  NOR _65_ (
    .A(_09_),
    .B(full_reg),
    .Y(_28_)
  );
  NOR _66_ (
    .A(_28_),
    .B(_27_),
    .Y(_29_)
  );
  NAND _67_ (
    .A(_29_),
    .B(_26_),
    .Y(_30_)
  );
  NOT _68_ (
    .A(data1_reg),
    .Y(_31_)
  );
  NAND _69_ (
    .A(DEQ),
    .B(_06_),
    .Y(_32_)
  );
  NOR _70_ (
    .A(_32_),
    .B(_31_),
    .Y(_33_)
  );
  NAND _71_ (
    .A(_06_),
    .B(empty_reg),
    .Y(_34_)
  );
  NAND _72_ (
    .A(_34_),
    .B(D_IN),
    .Y(_35_)
  );
  NOR _73_ (
    .A(_35_),
    .B(_26_),
    .Y(_36_)
  );
  NOR _74_ (
    .A(_36_),
    .B(_33_),
    .Y(_37_)
  );
  NAND _75_ (
    .A(_37_),
    .B(_30_),
    .Y(_00_)
  );
  DFF _76_ (
    .C(CLK),
    .D(_02_),
    .Q(empty_reg)
  );
  DFF _77_ (
    .C(CLK),
    .D(_03_),
    .Q(full_reg)
  );
  DFF _78_ (
    .C(CLK),
    .D(_01_),
    .Q(data1_reg)
  );
  DFF _79_ (
    .C(CLK),
    .D(_00_),
    .Q(data0_reg)
  );
  assign D_OUT = data0_reg;
  assign EMPTY_N = empty_reg;
  assign FULL_N = full_reg;
endmodule

(* top =  1  *)
(* src = "mkChkNode.v:47" *)
module mkChkNode(CLK, RST_N, b2c_0_put, EN_b2c_0_put, RDY_b2c_0_put, b2c_1_put, EN_b2c_1_put, RDY_b2c_1_put, b2c_2_put, EN_b2c_2_put, RDY_b2c_2_put, EN_c2b_0_get, c2b_0_get, RDY_c2b_0_get, EN_c2b_1_get, c2b_1_get, RDY_c2b_1_get, EN_c2b_2_get, c2b_2_get, RDY_c2b_2_get);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  (* src = "mkChkNode.v:172" *)
  wire CAN_FIRE_RL_rlProcessIteration;
  (* src = "mkChkNode.v:172" *)
  wire CAN_FIRE_b2c_0_put;
  (* src = "mkChkNode.v:172" *)
  wire CAN_FIRE_b2c_1_put;
  (* src = "mkChkNode.v:172" *)
  wire CAN_FIRE_b2c_2_put;
  (* src = "mkChkNode.v:172" *)
  wire CAN_FIRE_c2b_0_get;
  (* src = "mkChkNode.v:172" *)
  wire CAN_FIRE_c2b_1_get;
  (* src = "mkChkNode.v:172" *)
  wire CAN_FIRE_c2b_2_get;
  (* src = "mkChkNode.v:73" *)
  input CLK;
  (* src = "mkChkNode.v:78" *)
  input EN_b2c_0_put;
  (* src = "mkChkNode.v:83" *)
  input EN_b2c_1_put;
  (* src = "mkChkNode.v:88" *)
  input EN_b2c_2_put;
  (* src = "mkChkNode.v:92" *)
  input EN_c2b_0_get;
  (* src = "mkChkNode.v:97" *)
  input EN_c2b_1_get;
  (* src = "mkChkNode.v:102" *)
  input EN_c2b_2_get;
  (* src = "mkChkNode.v:79" *)
  output RDY_b2c_0_put;
  (* src = "mkChkNode.v:84" *)
  output RDY_b2c_1_put;
  (* src = "mkChkNode.v:89" *)
  output RDY_b2c_2_put;
  (* src = "mkChkNode.v:94" *)
  output RDY_c2b_0_get;
  (* src = "mkChkNode.v:99" *)
  output RDY_c2b_1_get;
  (* src = "mkChkNode.v:104" *)
  output RDY_c2b_2_get;
  (* src = "mkChkNode.v:74" *)
  input RST_N;
  (* src = "mkChkNode.v:172" *)
  wire WILL_FIRE_RL_rlProcessIteration;
  (* src = "mkChkNode.v:172" *)
  wire WILL_FIRE_b2c_0_put;
  (* src = "mkChkNode.v:172" *)
  wire WILL_FIRE_b2c_1_put;
  (* src = "mkChkNode.v:172" *)
  wire WILL_FIRE_b2c_2_put;
  (* src = "mkChkNode.v:172" *)
  wire WILL_FIRE_c2b_0_get;
  (* src = "mkChkNode.v:172" *)
  wire WILL_FIRE_c2b_1_get;
  (* src = "mkChkNode.v:172" *)
  wire WILL_FIRE_c2b_2_get;
  (* src = "mkChkNode.v:77" *)
  input b2c_0_put;
  (* src = "mkChkNode.v:82" *)
  input b2c_1_put;
  (* src = "mkChkNode.v:87" *)
  input b2c_2_put;
  (* src = "mkChkNode.v:93" *)
  output c2b_0_get;
  (* src = "mkChkNode.v:98" *)
  output c2b_1_get;
  (* src = "mkChkNode.v:103" *)
  output c2b_2_get;
  (* src = "mkChkNode.v:188" *)
  wire \fnChkNodeCore___d16[0] ;
  (* src = "mkChkNode.v:188" *)
  wire \fnChkNodeCore___d16[1] ;
  (* src = "mkChkNode.v:188" *)
  wire \fnChkNodeCore___d16[2] ;
  (* src = "mkChkNode.v:118" *)
  wire \vffB2C_0$DEQ ;
  (* src = "mkChkNode.v:118" *)
  wire \vffB2C_0$D_IN ;
  (* src = "mkChkNode.v:118" *)
  wire \vffB2C_0$D_OUT ;
  (* src = "mkChkNode.v:118" *)
  wire \vffB2C_0$EMPTY_N ;
  (* src = "mkChkNode.v:118" *)
  wire \vffB2C_0$ENQ ;
  (* src = "mkChkNode.v:118" *)
  wire \vffB2C_0$FULL_N ;
  (* src = "mkChkNode.v:127" *)
  wire \vffB2C_1$DEQ ;
  (* src = "mkChkNode.v:127" *)
  wire \vffB2C_1$D_IN ;
  (* src = "mkChkNode.v:127" *)
  wire \vffB2C_1$D_OUT ;
  (* src = "mkChkNode.v:127" *)
  wire \vffB2C_1$EMPTY_N ;
  (* src = "mkChkNode.v:127" *)
  wire \vffB2C_1$ENQ ;
  (* src = "mkChkNode.v:127" *)
  wire \vffB2C_1$FULL_N ;
  (* src = "mkChkNode.v:136" *)
  wire \vffB2C_2$DEQ ;
  (* src = "mkChkNode.v:136" *)
  wire \vffB2C_2$D_IN ;
  (* src = "mkChkNode.v:136" *)
  wire \vffB2C_2$D_OUT ;
  (* src = "mkChkNode.v:136" *)
  wire \vffB2C_2$EMPTY_N ;
  (* src = "mkChkNode.v:136" *)
  wire \vffB2C_2$ENQ ;
  (* src = "mkChkNode.v:136" *)
  wire \vffB2C_2$FULL_N ;
  (* src = "mkChkNode.v:145" *)
  wire \vffC2B_0$DEQ ;
  (* src = "mkChkNode.v:145" *)
  wire \vffC2B_0$D_IN ;
  (* src = "mkChkNode.v:145" *)
  wire \vffC2B_0$D_OUT ;
  (* src = "mkChkNode.v:145" *)
  wire \vffC2B_0$EMPTY_N ;
  (* src = "mkChkNode.v:145" *)
  wire \vffC2B_0$ENQ ;
  (* src = "mkChkNode.v:145" *)
  wire \vffC2B_0$FULL_N ;
  (* src = "mkChkNode.v:154" *)
  wire \vffC2B_1$DEQ ;
  (* src = "mkChkNode.v:154" *)
  wire \vffC2B_1$D_IN ;
  (* src = "mkChkNode.v:154" *)
  wire \vffC2B_1$D_OUT ;
  (* src = "mkChkNode.v:154" *)
  wire \vffC2B_1$EMPTY_N ;
  (* src = "mkChkNode.v:154" *)
  wire \vffC2B_1$ENQ ;
  (* src = "mkChkNode.v:154" *)
  wire \vffC2B_1$FULL_N ;
  (* src = "mkChkNode.v:163" *)
  wire \vffC2B_2$DEQ ;
  (* src = "mkChkNode.v:163" *)
  wire \vffC2B_2$D_IN ;
  (* src = "mkChkNode.v:163" *)
  wire \vffC2B_2$D_OUT ;
  (* src = "mkChkNode.v:163" *)
  wire \vffC2B_2$EMPTY_N ;
  (* src = "mkChkNode.v:163" *)
  wire \vffC2B_2$ENQ ;
  (* src = "mkChkNode.v:163" *)
  wire \vffC2B_2$FULL_N ;
  NAND _08_ (
    .A(\vffC2B_1$FULL_N ),
    .B(\vffC2B_0$FULL_N ),
    .Y(_06_)
  );
  NOT _09_ (
    .A(\vffB2C_0$EMPTY_N ),
    .Y(_07_)
  );
  NOT _10_ (
    .A(\vffB2C_1$EMPTY_N ),
    .Y(_00_)
  );
  NOR _11_ (
    .A(_00_),
    .B(_07_),
    .Y(_01_)
  );
  NOT _12_ (
    .A(\vffB2C_2$EMPTY_N ),
    .Y(_02_)
  );
  NOT _13_ (
    .A(\vffC2B_2$FULL_N ),
    .Y(_03_)
  );
  NOR _14_ (
    .A(_03_),
    .B(_02_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_04_),
    .B(_01_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_05_),
    .B(_06_),
    .Y(\vffB2C_0$DEQ )
  );
  (* src = "mkChkNode.v:339" *)
  module_fnChkNodeCore instance_fnChkNodeCore_0 (
    .\fnChkNodeCore[0] (\fnChkNodeCore___d16[0] ),
    .\fnChkNodeCore[1] (\fnChkNodeCore___d16[1] ),
    .\fnChkNodeCore[2] (\fnChkNodeCore___d16[2] ),
    .\fnChkNodeCore_i[0] (\vffB2C_0$D_OUT ),
    .\fnChkNodeCore_i[1] (\vffB2C_1$D_OUT ),
    .\fnChkNodeCore_i[2] (\vffB2C_2$D_OUT )
  );
  (* src = "mkChkNode.v:225" *)
  \$paramod\FIFO2\width=1\guarded=1  vffB2C_0 (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(\vffB2C_0$DEQ ),
    .D_IN(b2c_0_put),
    .D_OUT(\vffB2C_0$D_OUT ),
    .EMPTY_N(\vffB2C_0$EMPTY_N ),
    .ENQ(EN_b2c_0_put),
    .FULL_N(\vffB2C_0$FULL_N ),
    .RST(RST_N)
  );
  (* src = "mkChkNode.v:236" *)
  \$paramod\FIFO2\width=1\guarded=1  vffB2C_1 (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(\vffB2C_0$DEQ ),
    .D_IN(b2c_1_put),
    .D_OUT(\vffB2C_1$D_OUT ),
    .EMPTY_N(\vffB2C_1$EMPTY_N ),
    .ENQ(EN_b2c_1_put),
    .FULL_N(\vffB2C_1$FULL_N ),
    .RST(RST_N)
  );
  (* src = "mkChkNode.v:247" *)
  \$paramod\FIFO2\width=1\guarded=1  vffB2C_2 (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(\vffB2C_0$DEQ ),
    .D_IN(b2c_2_put),
    .D_OUT(\vffB2C_2$D_OUT ),
    .EMPTY_N(\vffB2C_2$EMPTY_N ),
    .ENQ(EN_b2c_2_put),
    .FULL_N(\vffB2C_2$FULL_N ),
    .RST(RST_N)
  );
  (* src = "mkChkNode.v:258" *)
  \$paramod\FIFO2\width=1\guarded=1  vffC2B_0 (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(EN_c2b_0_get),
    .D_IN(\fnChkNodeCore___d16[0] ),
    .D_OUT(\vffC2B_0$D_OUT ),
    .EMPTY_N(\vffC2B_0$EMPTY_N ),
    .ENQ(\vffB2C_0$DEQ ),
    .FULL_N(\vffC2B_0$FULL_N ),
    .RST(RST_N)
  );
  (* src = "mkChkNode.v:269" *)
  \$paramod\FIFO2\width=1\guarded=1  vffC2B_1 (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(EN_c2b_1_get),
    .D_IN(\fnChkNodeCore___d16[1] ),
    .D_OUT(\vffC2B_1$D_OUT ),
    .EMPTY_N(\vffC2B_1$EMPTY_N ),
    .ENQ(\vffB2C_0$DEQ ),
    .FULL_N(\vffC2B_1$FULL_N ),
    .RST(RST_N)
  );
  (* src = "mkChkNode.v:280" *)
  \$paramod\FIFO2\width=1\guarded=1  vffC2B_2 (
    .CLK(CLK),
    .CLR(1'b0),
    .DEQ(EN_c2b_2_get),
    .D_IN(\fnChkNodeCore___d16[2] ),
    .D_OUT(\vffC2B_2$D_OUT ),
    .EMPTY_N(\vffC2B_2$EMPTY_N ),
    .ENQ(\vffB2C_0$DEQ ),
    .FULL_N(\vffC2B_2$FULL_N ),
    .RST(RST_N)
  );
  assign CAN_FIRE_RL_rlProcessIteration = \vffB2C_0$DEQ ;
  assign CAN_FIRE_b2c_0_put = \vffB2C_0$FULL_N ;
  assign CAN_FIRE_b2c_1_put = \vffB2C_1$FULL_N ;
  assign CAN_FIRE_b2c_2_put = \vffB2C_2$FULL_N ;
  assign CAN_FIRE_c2b_0_get = \vffC2B_0$EMPTY_N ;
  assign CAN_FIRE_c2b_1_get = \vffC2B_1$EMPTY_N ;
  assign CAN_FIRE_c2b_2_get = \vffC2B_2$EMPTY_N ;
  assign RDY_b2c_0_put = \vffB2C_0$FULL_N ;
  assign RDY_b2c_1_put = \vffB2C_1$FULL_N ;
  assign RDY_b2c_2_put = \vffB2C_2$FULL_N ;
  assign RDY_c2b_0_get = \vffC2B_0$EMPTY_N ;
  assign RDY_c2b_1_get = \vffC2B_1$EMPTY_N ;
  assign RDY_c2b_2_get = \vffC2B_2$EMPTY_N ;
  assign WILL_FIRE_RL_rlProcessIteration = \vffB2C_0$DEQ ;
  assign WILL_FIRE_b2c_0_put = EN_b2c_0_put;
  assign WILL_FIRE_b2c_1_put = EN_b2c_1_put;
  assign WILL_FIRE_b2c_2_put = EN_b2c_2_put;
  assign WILL_FIRE_c2b_0_get = EN_c2b_0_get;
  assign WILL_FIRE_c2b_1_get = EN_c2b_1_get;
  assign WILL_FIRE_c2b_2_get = EN_c2b_2_get;
  assign c2b_0_get = \vffC2B_0$D_OUT ;
  assign c2b_1_get = \vffC2B_1$D_OUT ;
  assign c2b_2_get = \vffC2B_2$D_OUT ;
  assign \vffB2C_0$D_IN  = b2c_0_put;
  assign \vffB2C_0$ENQ  = EN_b2c_0_put;
  assign \vffB2C_1$DEQ  = \vffB2C_0$DEQ ;
  assign \vffB2C_1$D_IN  = b2c_1_put;
  assign \vffB2C_1$ENQ  = EN_b2c_1_put;
  assign \vffB2C_2$DEQ  = \vffB2C_0$DEQ ;
  assign \vffB2C_2$D_IN  = b2c_2_put;
  assign \vffB2C_2$ENQ  = EN_b2c_2_put;
  assign \vffC2B_0$DEQ  = EN_c2b_0_get;
  assign \vffC2B_0$D_IN  = \fnChkNodeCore___d16[0] ;
  assign \vffC2B_0$ENQ  = \vffB2C_0$DEQ ;
  assign \vffC2B_1$DEQ  = EN_c2b_1_get;
  assign \vffC2B_1$D_IN  = \fnChkNodeCore___d16[1] ;
  assign \vffC2B_1$ENQ  = \vffB2C_0$DEQ ;
  assign \vffC2B_2$DEQ  = EN_c2b_2_get;
  assign \vffC2B_2$D_IN  = \fnChkNodeCore___d16[2] ;
  assign \vffC2B_2$ENQ  = \vffB2C_0$DEQ ;
endmodule

(* src = "module_fnChkNodeCore.v:30" *)
module module_fnChkNodeCore(\fnChkNodeCore_i[0] , \fnChkNodeCore_i[1] , \fnChkNodeCore_i[2] , \fnChkNodeCore[0] , \fnChkNodeCore[1] , \fnChkNodeCore[2] );
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  (* src = "module_fnChkNodeCore.v:34" *)
  output \fnChkNodeCore[0] ;
  (* src = "module_fnChkNodeCore.v:34" *)
  output \fnChkNodeCore[1] ;
  (* src = "module_fnChkNodeCore.v:34" *)
  output \fnChkNodeCore[2] ;
  (* src = "module_fnChkNodeCore.v:33" *)
  input \fnChkNodeCore_i[0] ;
  (* src = "module_fnChkNodeCore.v:33" *)
  input \fnChkNodeCore_i[1] ;
  (* src = "module_fnChkNodeCore.v:33" *)
  input \fnChkNodeCore_i[2] ;
  NOT _09_ (
    .A(\fnChkNodeCore_i[2] ),
    .Y(_06_)
  );
  NAND _10_ (
    .A(_06_),
    .B(\fnChkNodeCore_i[1] ),
    .Y(_07_)
  );
  NOT _11_ (
    .A(\fnChkNodeCore_i[1] ),
    .Y(_08_)
  );
  NAND _12_ (
    .A(\fnChkNodeCore_i[2] ),
    .B(_08_),
    .Y(_00_)
  );
  NAND _13_ (
    .A(_00_),
    .B(_07_),
    .Y(\fnChkNodeCore[0] )
  );
  NOT _14_ (
    .A(\fnChkNodeCore_i[0] ),
    .Y(_01_)
  );
  NAND _15_ (
    .A(_01_),
    .B(\fnChkNodeCore_i[2] ),
    .Y(_02_)
  );
  NAND _16_ (
    .A(\fnChkNodeCore_i[0] ),
    .B(_06_),
    .Y(_03_)
  );
  NAND _17_ (
    .A(_03_),
    .B(_02_),
    .Y(\fnChkNodeCore[1] )
  );
  NAND _18_ (
    .A(_01_),
    .B(\fnChkNodeCore_i[1] ),
    .Y(_04_)
  );
  NAND _19_ (
    .A(\fnChkNodeCore_i[0] ),
    .B(_08_),
    .Y(_05_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_04_),
    .Y(\fnChkNodeCore[2] )
  );
endmodule
