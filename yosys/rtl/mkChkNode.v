//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
// On Sat Apr 27 13:13:11 IST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_b2c_0_put                  O     1 reg
// RDY_b2c_1_put                  O     1 reg
// RDY_b2c_2_put                  O     1 reg
// c2b_0_get                      O     1 reg
// RDY_c2b_0_get                  O     1 reg
// c2b_1_get                      O     1 reg
// RDY_c2b_1_get                  O     1 reg
// c2b_2_get                      O     1 reg
// RDY_c2b_2_get                  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// b2c_0_put                      I     1 reg
// b2c_1_put                      I     1 reg
// b2c_2_put                      I     1 reg
// EN_b2c_0_put                   I     1
// EN_b2c_1_put                   I     1
// EN_b2c_2_put                   I     1
// EN_c2b_0_get                   I     1
// EN_c2b_1_get                   I     1
// EN_c2b_2_get                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkChkNode(CLK,
		 RST_N,

		 b2c_0_put,
		 EN_b2c_0_put,
		 RDY_b2c_0_put,

		 b2c_1_put,
		 EN_b2c_1_put,
		 RDY_b2c_1_put,

		 b2c_2_put,
		 EN_b2c_2_put,
		 RDY_b2c_2_put,

		 EN_c2b_0_get,
		 c2b_0_get,
		 RDY_c2b_0_get,

		 EN_c2b_1_get,
		 c2b_1_get,
		 RDY_c2b_1_get,

		 EN_c2b_2_get,
		 c2b_2_get,
		 RDY_c2b_2_get);
  input  CLK;
  input  RST_N;

  // action method b2c_0_put
  input  b2c_0_put;
  input  EN_b2c_0_put;
  output RDY_b2c_0_put;

  // action method b2c_1_put
  input  b2c_1_put;
  input  EN_b2c_1_put;
  output RDY_b2c_1_put;

  // action method b2c_2_put
  input  b2c_2_put;
  input  EN_b2c_2_put;
  output RDY_b2c_2_put;

  // actionvalue method c2b_0_get
  input  EN_c2b_0_get;
  output c2b_0_get;
  output RDY_c2b_0_get;

  // actionvalue method c2b_1_get
  input  EN_c2b_1_get;
  output c2b_1_get;
  output RDY_c2b_1_get;

  // actionvalue method c2b_2_get
  input  EN_c2b_2_get;
  output c2b_2_get;
  output RDY_c2b_2_get;

  // signals for module outputs
  wire RDY_b2c_0_put,
       RDY_b2c_1_put,
       RDY_b2c_2_put,
       RDY_c2b_0_get,
       RDY_c2b_1_get,
       RDY_c2b_2_get,
       c2b_0_get,
       c2b_1_get,
       c2b_2_get;

  // ports of submodule vffB2C_0
  wire vffB2C_0$CLR,
       vffB2C_0$DEQ,
       vffB2C_0$D_IN,
       vffB2C_0$D_OUT,
       vffB2C_0$EMPTY_N,
       vffB2C_0$ENQ,
       vffB2C_0$FULL_N;

  // ports of submodule vffB2C_1
  wire vffB2C_1$CLR,
       vffB2C_1$DEQ,
       vffB2C_1$D_IN,
       vffB2C_1$D_OUT,
       vffB2C_1$EMPTY_N,
       vffB2C_1$ENQ,
       vffB2C_1$FULL_N;

  // ports of submodule vffB2C_2
  wire vffB2C_2$CLR,
       vffB2C_2$DEQ,
       vffB2C_2$D_IN,
       vffB2C_2$D_OUT,
       vffB2C_2$EMPTY_N,
       vffB2C_2$ENQ,
       vffB2C_2$FULL_N;

  // ports of submodule vffC2B_0
  wire vffC2B_0$CLR,
       vffC2B_0$DEQ,
       vffC2B_0$D_IN,
       vffC2B_0$D_OUT,
       vffC2B_0$EMPTY_N,
       vffC2B_0$ENQ,
       vffC2B_0$FULL_N;

  // ports of submodule vffC2B_1
  wire vffC2B_1$CLR,
       vffC2B_1$DEQ,
       vffC2B_1$D_IN,
       vffC2B_1$D_OUT,
       vffC2B_1$EMPTY_N,
       vffC2B_1$ENQ,
       vffC2B_1$FULL_N;

  // ports of submodule vffC2B_2
  wire vffC2B_2$CLR,
       vffC2B_2$DEQ,
       vffC2B_2$D_IN,
       vffC2B_2$D_OUT,
       vffC2B_2$EMPTY_N,
       vffC2B_2$ENQ,
       vffC2B_2$FULL_N;

  // remaining internal signals
  wire [2 : 0] fnChkNodeCore___d16;

  // action method b2c_0_put
  assign RDY_b2c_0_put = vffB2C_0$FULL_N ;

  // action method b2c_1_put
  assign RDY_b2c_1_put = vffB2C_1$FULL_N ;

  // action method b2c_2_put
  assign RDY_b2c_2_put = vffB2C_2$FULL_N ;

  // actionvalue method c2b_0_get
  assign c2b_0_get = vffC2B_0$D_OUT ;
  assign RDY_c2b_0_get = vffC2B_0$EMPTY_N ;

  // actionvalue method c2b_1_get
  assign c2b_1_get = vffC2B_1$D_OUT ;
  assign RDY_c2b_1_get = vffC2B_1$EMPTY_N ;

  // actionvalue method c2b_2_get
  assign c2b_2_get = vffC2B_2$D_OUT ;
  assign RDY_c2b_2_get = vffC2B_2$EMPTY_N ;

  // Creating a new submodule to remove std-cells from the check-node
  // top-level -- this sub-module captures all the control signals for
  // controlling the B2C fifos
  mkChkNodeCtrl ctrl (
     .B2C_0_DEQ (vffB2C_0$DEQ),
     .B2C_1_DEQ (vffB2C_1$DEQ),
     .B2C_2_DEQ (vffB2C_2$DEQ),
     .B2C_0_EMPTY_N  (vffB2C_0$EMPTY_N),
     .B2C_0_FULL_N   (vffB2C_0$FULL_N),
     .B2C_1_EMPTY_N  (vffB2C_1$EMPTY_N),
     .B2C_1_FULL_N   (vffB2C_1$FULL_N),
     .B2C_2_EMPTY_N  (vffB2C_2$EMPTY_N),
     .B2C_2_FULL_N   (vffB2C_2$FULL_N),

     .C2B_0_EMPTY_N  (vffC2B_0$EMPTY_N),
     .C2B_0_FULL_N   (vffC2B_0$FULL_N),
     .C2B_1_EMPTY_N  (vffC2B_1$EMPTY_N),
     .C2B_1_FULL_N   (vffC2B_1$FULL_N),
     .C2B_2_EMPTY_N  (vffC2B_2$EMPTY_N),
     .C2B_2_FULL_N   (vffC2B_2$FULL_N),
     .C2B_0_ENQ (vffC2B_0$ENQ),
     .C2B_1_ENQ (vffC2B_1$ENQ),
     .C2B_2_ENQ (vffC2B_2$ENQ),
  );

  // submodule vffB2C_0
  FIFO2_1 vffB2C_0(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(b2c_0_put),
						   .ENQ(EN_b2c_0_put),
						   .DEQ(vffB2C_0$DEQ),
						   .CLR(1'b0),
						   .D_OUT(vffB2C_0$D_OUT),
						   .FULL_N(vffB2C_0$FULL_N),
						   .EMPTY_N(vffB2C_0$EMPTY_N));

  // submodule vffB2C_1
  FIFO2_1 vffB2C_1(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(b2c_1_put),
						   .ENQ(EN_b2c_1_put),
						   .DEQ(vffB2C_1$DEQ),
						   .CLR(1'b0),
						   .D_OUT(vffB2C_1$D_OUT),
						   .FULL_N(vffB2C_1$FULL_N),
						   .EMPTY_N(vffB2C_1$EMPTY_N));

  // submodule vffB2C_2
  FIFO2_1 vffB2C_2(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(b2c_2_put),
						   .ENQ(EN_b2c_2_put),
						   .DEQ(vffB2C_2$DEQ),
						   .CLR(1'b0),
						   .D_OUT(vffB2C_2$D_OUT),
						   .FULL_N(vffB2C_2$FULL_N),
						   .EMPTY_N(vffB2C_2$EMPTY_N));

  // submodule vffC2B_0
  FIFO2_1 vffC2B_0(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(fnChkNodeCore___d16[0]),
						   .ENQ(vffC2B_0$ENQ),
						   .DEQ(EN_c2b_0_get),
						   .CLR(1'b0),
						   .D_OUT(vffC2B_0$D_OUT),
						   .FULL_N(vffC2B_0$FULL_N),
						   .EMPTY_N(vffC2B_0$EMPTY_N));
  

  // submodule vffC2B_1
  FIFO2_1 vffC2B_1(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(fnChkNodeCore___d16[1]),
						   .ENQ(vffC2B_1$ENQ),
						   .DEQ(EN_c2b_1_get),
						   .CLR(1'b0),
						   .D_OUT(vffC2B_1$D_OUT),
						   .FULL_N(vffC2B_1$FULL_N),
						   .EMPTY_N(vffC2B_1$EMPTY_N));

  // submodule vffC2B_2
  FIFO2_1 vffC2B_2(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(fnChkNodeCore___d16[2]),
						   .ENQ(vffC2B_2$ENQ),
						   .DEQ(EN_c2b_2_get),
						   .CLR(1'b0),
						   .D_OUT(vffC2B_2$D_OUT),
						   .FULL_N(vffC2B_2$FULL_N),
						   .EMPTY_N(vffC2B_2$EMPTY_N));

  // remaining internal signals
  module_fnChkNodeCore instance_fnChkNodeCore_0(
     .fnChkNodeCore_i({ vffB2C_2$D_OUT, vffB2C_1$D_OUT, vffB2C_0$D_OUT }),
     .fnChkNodeCore(fnChkNodeCore___d16));
endmodule  // mkChkNode

